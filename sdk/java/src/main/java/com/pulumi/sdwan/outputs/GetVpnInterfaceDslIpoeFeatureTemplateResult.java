// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetVpnInterfaceDslIpoeFeatureTemplateAccessList;
import com.pulumi.sdwan.outputs.GetVpnInterfaceDslIpoeFeatureTemplateNatPortForward;
import com.pulumi.sdwan.outputs.GetVpnInterfaceDslIpoeFeatureTemplatePolicer;
import com.pulumi.sdwan.outputs.GetVpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation;
import com.pulumi.sdwan.outputs.GetVpnInterfaceDslIpoeFeatureTemplateVdslConfiguration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVpnInterfaceDslIpoeFeatureTemplateResult {
    /**
     * @return Apply ACL
     * 
     */
    private List<GetVpnInterfaceDslIpoeFeatureTemplateAccessList> accessLists;
    /**
     * @return Interface downstream bandwidth capacity, in kbps
     * 
     */
    private Integer bandwidthDownstream;
    /**
     * @return Variable name
     * 
     */
    private String bandwidthDownstreamVariable;
    /**
     * @return Interface upstream bandwidth capacity, in kbps
     * 
     */
    private Integer bandwidthUpstream;
    /**
     * @return Variable name
     * 
     */
    private String bandwidthUpstreamVariable;
    /**
     * @return CHAP Hostname
     * 
     */
    private String chapHostname;
    /**
     * @return Variable name
     * 
     */
    private String chapHostnameVariable;
    /**
     * @return Specify ppp chap authentication Password
     * 
     */
    private String chapPppAuthPassword;
    /**
     * @return Variable name
     * 
     */
    private String chapPppAuthPasswordVariable;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Dialer IP Negotiated
     * 
     */
    private Boolean dialerAddressNegotiated;
    /**
     * @return Variable name
     * 
     */
    private String dialerAddressNegotiatedVariable;
    /**
     * @return Dialer pool number
     * 
     */
    private Integer dialerPoolNumber;
    /**
     * @return Variable name
     * 
     */
    private String dialerPoolNumberVariable;
    /**
     * @return Encapsulation VLAN id
     * 
     */
    private Integer encap;
    /**
     * @return Variable name
     * 
     */
    private String encapVariable;
    /**
     * @return Interface description
     * 
     */
    private String ethernetDescription;
    /**
     * @return Variable name
     * 
     */
    private String ethernetDescriptionVariable;
    /**
     * @return Set administrative distance for DHCP default route
     * 
     */
    private Integer ethernetDhcpDistance;
    /**
     * @return Variable name
     * 
     */
    private String ethernetDhcpDistanceVariable;
    /**
     * @return Variable name
     * 
     */
    private String ethernetDhcpHelperVariable;
    /**
     * @return List of DHCP IPv4 helper addresses
     * 
     */
    private List<String> ethernetDhcpHelpers;
    /**
     * @return Enable DHCP
     * 
     */
    private Boolean ethernetEnableDhcp;
    /**
     * @return Variable name
     * 
     */
    private String ethernetEnableDhcpVariable;
    /**
     * @return Ethernet Interface/Sub Interface Name including sub interface number
     * 
     */
    private String ethernetInterfaceName;
    /**
     * @return Variable name
     * 
     */
    private String ethernetInterfaceNameVariable;
    /**
     * @return Assign IPv4 address
     * 
     */
    private String ethernetIpv4Address;
    /**
     * @return Variable name
     * 
     */
    private String ethernetIpv4AddressVariable;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return internal controller-type
     * 
     */
    private String internalControllerType;
    /**
     * @return IP Directed-Broadcast
     * 
     */
    private Boolean ipDirectedBroadcast;
    /**
     * @return Variable name
     * 
     */
    private String ipDirectedBroadcastVariable;
    /**
     * @return Interface MTU \n\n, in bytes
     * 
     */
    private Integer ipMtu;
    /**
     * @return Variable name
     * 
     */
    private String ipMtuVariable;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Network Address Translation on this interface
     * 
     */
    private Boolean nat;
    /**
     * @return Block inbound ICMP error messages
     * 
     */
    private Boolean natBlockIcmpError;
    /**
     * @return Variable name
     * 
     */
    private String natBlockIcmpErrorVariable;
    /**
     * @return Set port-forwarding rules for NAT on this interface
     * 
     */
    private List<GetVpnInterfaceDslIpoeFeatureTemplateNatPortForward> natPortForwards;
    /**
     * @return Set NAT refresh mode
     * 
     */
    private String natRefreshMode;
    /**
     * @return Variable name
     * 
     */
    private String natRefreshModeVariable;
    /**
     * @return Respond to ping requests to NAT interface ip address from the public side
     * 
     */
    private Boolean natResponseToPing;
    /**
     * @return Variable name
     * 
     */
    private String natResponseToPingVariable;
    /**
     * @return Set NAT TCP session timeout, in minutes
     * 
     */
    private Integer natTcpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String natTcpTimeoutVariable;
    /**
     * @return Set NAT UDP session timeout, in minutes
     * 
     */
    private Integer natUdpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String natUdpTimeoutVariable;
    /**
     * @return PAP outbound Password
     * 
     */
    private Boolean papPassword;
    /**
     * @return Specify ppp pap authentication Password
     * 
     */
    private String papPppAuthPassword;
    /**
     * @return Variable name
     * 
     */
    private String papPppAuthPasswordVariable;
    /**
     * @return PAP outbound Sent Username
     * 
     */
    private String papUsername;
    /**
     * @return Variable name
     * 
     */
    private String papUsernameVariable;
    /**
     * @return Per-tunnel Qos
     * 
     */
    private Boolean perTunnelQos;
    /**
     * @return Per-tunnel QoS Aggregator
     * 
     */
    private Boolean perTunnelQosAggregator;
    /**
     * @return Variable name
     * 
     */
    private String perTunnelQosAggregatorVariable;
    /**
     * @return Variable name
     * 
     */
    private String perTunnelQosVariable;
    /**
     * @return Enable policer
     * 
     */
    private List<GetVpnInterfaceDslIpoeFeatureTemplatePolicer> policers;
    /**
     * @return PPP Link Authentication Protocol
     * 
     */
    private String pppAuthenticationProtocol;
    /**
     * @return PPP Authentication Protocol PAP
     * 
     */
    private Boolean pppAuthenticationProtocolPap;
    /**
     * @return Variable name
     * 
     */
    private String pppAuthenticationProtocolVariable;
    /**
     * @return Maximum MRU to be negotiated during PPP LCP negotiation
     * 
     */
    private Integer pppMaximumPayload;
    /**
     * @return Variable name
     * 
     */
    private String pppMaximumPayloadVariable;
    /**
     * @return Adaptive QoS default downstream bandwidth
     * 
     */
    private Integer qosAdaptiveBandwidthDownstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveBandwidthDownstreamVariable;
    /**
     * @return Adaptive QoS default upstream bandwidth
     * 
     */
    private Integer qosAdaptiveBandwidthUpstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveBandwidthUpstreamVariable;
    /**
     * @return Downstream max bandwidth limit
     * 
     */
    private Integer qosAdaptiveMaxDownstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveMaxDownstreamVariable;
    /**
     * @return Upstream max bandwidth limit
     * 
     */
    private Integer qosAdaptiveMaxUpstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveMaxUpstreamVariable;
    /**
     * @return Downstream min bandwidth limit
     * 
     */
    private Integer qosAdaptiveMinDownstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveMinDownstreamVariable;
    /**
     * @return Upstream min bandwidth limit
     * 
     */
    private Integer qosAdaptiveMinUpstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveMinUpstreamVariable;
    /**
     * @return Periodic timer for adaptive QoS in minutes
     * 
     */
    private Integer qosAdaptivePeriod;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptivePeriodVariable;
    /**
     * @return Name of QoS map
     * 
     */
    private String qosMap;
    /**
     * @return Variable name
     * 
     */
    private String qosMapVariable;
    /**
     * @return Name of VPN QoS map
     * 
     */
    private String qosMapVpn;
    /**
     * @return Variable name
     * 
     */
    private String qosMapVpnVariable;
    /**
     * @return 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     * 
     */
    private Integer shapingRate;
    /**
     * @return Variable name
     * 
     */
    private String shapingRateVariable;
    /**
     * @return Administrative state
     * 
     */
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tcpMssVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    private String tlocExtension;
    /**
     * @return Variable name
     * 
     */
    private String tlocExtensionVariable;
    /**
     * @return Variable name
     * 
     */
    private String trackerVariable;
    /**
     * @return Enable tracker for this interface
     * 
     */
    private List<String> trackers;
    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set
     * 
     */
    private Boolean tunnelInterfaceAllowAll;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowAllVariable;
    /**
     * @return Allow/deny BGP
     * 
     */
    private Boolean tunnelInterfaceAllowBgp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowBgpVariable;
    /**
     * @return Allow/Deny DHCP
     * 
     */
    private Boolean tunnelInterfaceAllowDhcp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowDhcpVariable;
    /**
     * @return Allow/Deny DNS
     * 
     */
    private Boolean tunnelInterfaceAllowDns;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowDnsVariable;
    /**
     * @return Allow/Deny Https
     * 
     */
    private Boolean tunnelInterfaceAllowHttps;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowHttpsVariable;
    /**
     * @return Allow/Deny ICMP
     * 
     */
    private Boolean tunnelInterfaceAllowIcmp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowIcmpVariable;
    /**
     * @return Allow/Deny NETCONF
     * 
     */
    private Boolean tunnelInterfaceAllowNetconf;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowNetconfVariable;
    /**
     * @return Allow/Deny NTP
     * 
     */
    private Boolean tunnelInterfaceAllowNtp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowNtpVariable;
    /**
     * @return Allow/Deny OSPF
     * 
     */
    private Boolean tunnelInterfaceAllowOspf;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowOspfVariable;
    /**
     * @return Allow/Deny SNMP
     * 
     */
    private Boolean tunnelInterfaceAllowSnmp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowSnmpVariable;
    /**
     * @return Allow/Deny SSH
     * 
     */
    private Boolean tunnelInterfaceAllowSsh;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowSshVariable;
    /**
     * @return Allow/Deny STUN
     * 
     */
    private Boolean tunnelInterfaceAllowStun;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowStunVariable;
    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    private String tunnelInterfaceBindLoopbackTunnel;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceBindLoopbackTunnelVariable;
    /**
     * @return Set TLOC as border TLOC
     * 
     */
    private Boolean tunnelInterfaceBorder;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceBorderVariable;
    /**
     * @return Set carrier for TLOC
     * 
     */
    private String tunnelInterfaceCarrier;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceCarrierVariable;
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    private Boolean tunnelInterfaceClearDontFragment;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceClearDontFragmentVariable;
    /**
     * @return Set color for TLOC
     * 
     */
    private String tunnelInterfaceColor;
    /**
     * @return Restrict this TLOC behavior
     * 
     */
    private Boolean tunnelInterfaceColorRestrict;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceColorVariable;
    /**
     * @return Allow Control Connection
     * 
     */
    private Boolean tunnelInterfaceControlConnections;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceControlConnectionsVariable;
    /**
     * @return Encapsulation for TLOC
     * 
     */
    private List<GetVpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceExcludeControllerGroupListVariable;
    /**
     * @return Exclude the following controller groups defined in this list
     * 
     */
    private List<Integer> tunnelInterfaceExcludeControllerGroupLists;
    /**
     * @return List of groups
     * 
     */
    private List<Integer> tunnelInterfaceGroups;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceGroupsVariable;
    /**
     * @return Set time period of control hello packets \n\n milli seconds
     * 
     */
    private Integer tunnelInterfaceHelloInterval;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceHelloIntervalVariable;
    /**
     * @return Set tolerance of control hello packets \n\n seconds
     * 
     */
    private Integer tunnelInterfaceHelloTolerance;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceHelloToleranceVariable;
    /**
     * @return Set TLOC as last resort
     * 
     */
    private Boolean tunnelInterfaceLastResortCircuit;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceLastResortCircuitVariable;
    /**
     * @return Set the interface as a low-bandwidth circuit
     * 
     */
    private Boolean tunnelInterfaceLowBandwidthLink;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceLowBandwidthLinkVariable;
    /**
     * @return Set the maximum number of control connections for this TLOC
     * 
     */
    private Integer tunnelInterfaceMaxControlConnections;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceMaxControlConnectionsVariable;
    /**
     * @return Set time period of nat refresh packets \n\n seconds
     * 
     */
    private Integer tunnelInterfaceNatRefreshInterval;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceNatRefreshIntervalVariable;
    /**
     * @return Accept and respond to network-prefix-directed broadcasts)
     * 
     */
    private Boolean tunnelInterfaceNetworkBroadcast;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceNetworkBroadcastVariable;
    /**
     * @return Disallow port hopping on the tunnel interface
     * 
     */
    private Boolean tunnelInterfacePortHop;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfacePortHopVariable;
    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tunnelInterfaceTunnelTcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceTunnelTcpMssVariable;
    /**
     * @return Put this wan interface in STUN mode only
     * 
     */
    private Boolean tunnelInterfaceVbondAsStunServer;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceVbondAsStunServerVariable;
    /**
     * @return Set interface preference for control connection to vManage \n\n
     * 
     */
    private Integer tunnelInterfaceVmanageConnectionPreference;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceVmanageConnectionPreferenceVariable;
    /**
     * @return Set tunnel QoS mode
     * 
     */
    private String tunnelQosMode;
    /**
     * @return Variable name
     * 
     */
    private String tunnelQosModeVariable;
    /**
     * @return Dialer IP Unnumbered Loopback interface name
     * 
     */
    private String unnumberedLoopbackInterface;
    /**
     * @return Variable name
     * 
     */
    private String unnumberedLoopbackInterfaceVariable;
    /**
     * @return vdsl
     * 
     */
    private List<GetVpnInterfaceDslIpoeFeatureTemplateVdslConfiguration> vdslConfigurations;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;
    /**
     * @return Name of rewrite rule
     * 
     */
    private String writeRule;
    /**
     * @return Variable name
     * 
     */
    private String writeRuleVariable;

    private GetVpnInterfaceDslIpoeFeatureTemplateResult() {}
    /**
     * @return Apply ACL
     * 
     */
    public List<GetVpnInterfaceDslIpoeFeatureTemplateAccessList> accessLists() {
        return this.accessLists;
    }
    /**
     * @return Interface downstream bandwidth capacity, in kbps
     * 
     */
    public Integer bandwidthDownstream() {
        return this.bandwidthDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String bandwidthDownstreamVariable() {
        return this.bandwidthDownstreamVariable;
    }
    /**
     * @return Interface upstream bandwidth capacity, in kbps
     * 
     */
    public Integer bandwidthUpstream() {
        return this.bandwidthUpstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String bandwidthUpstreamVariable() {
        return this.bandwidthUpstreamVariable;
    }
    /**
     * @return CHAP Hostname
     * 
     */
    public String chapHostname() {
        return this.chapHostname;
    }
    /**
     * @return Variable name
     * 
     */
    public String chapHostnameVariable() {
        return this.chapHostnameVariable;
    }
    /**
     * @return Specify ppp chap authentication Password
     * 
     */
    public String chapPppAuthPassword() {
        return this.chapPppAuthPassword;
    }
    /**
     * @return Variable name
     * 
     */
    public String chapPppAuthPasswordVariable() {
        return this.chapPppAuthPasswordVariable;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Dialer IP Negotiated
     * 
     */
    public Boolean dialerAddressNegotiated() {
        return this.dialerAddressNegotiated;
    }
    /**
     * @return Variable name
     * 
     */
    public String dialerAddressNegotiatedVariable() {
        return this.dialerAddressNegotiatedVariable;
    }
    /**
     * @return Dialer pool number
     * 
     */
    public Integer dialerPoolNumber() {
        return this.dialerPoolNumber;
    }
    /**
     * @return Variable name
     * 
     */
    public String dialerPoolNumberVariable() {
        return this.dialerPoolNumberVariable;
    }
    /**
     * @return Encapsulation VLAN id
     * 
     */
    public Integer encap() {
        return this.encap;
    }
    /**
     * @return Variable name
     * 
     */
    public String encapVariable() {
        return this.encapVariable;
    }
    /**
     * @return Interface description
     * 
     */
    public String ethernetDescription() {
        return this.ethernetDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String ethernetDescriptionVariable() {
        return this.ethernetDescriptionVariable;
    }
    /**
     * @return Set administrative distance for DHCP default route
     * 
     */
    public Integer ethernetDhcpDistance() {
        return this.ethernetDhcpDistance;
    }
    /**
     * @return Variable name
     * 
     */
    public String ethernetDhcpDistanceVariable() {
        return this.ethernetDhcpDistanceVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String ethernetDhcpHelperVariable() {
        return this.ethernetDhcpHelperVariable;
    }
    /**
     * @return List of DHCP IPv4 helper addresses
     * 
     */
    public List<String> ethernetDhcpHelpers() {
        return this.ethernetDhcpHelpers;
    }
    /**
     * @return Enable DHCP
     * 
     */
    public Boolean ethernetEnableDhcp() {
        return this.ethernetEnableDhcp;
    }
    /**
     * @return Variable name
     * 
     */
    public String ethernetEnableDhcpVariable() {
        return this.ethernetEnableDhcpVariable;
    }
    /**
     * @return Ethernet Interface/Sub Interface Name including sub interface number
     * 
     */
    public String ethernetInterfaceName() {
        return this.ethernetInterfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String ethernetInterfaceNameVariable() {
        return this.ethernetInterfaceNameVariable;
    }
    /**
     * @return Assign IPv4 address
     * 
     */
    public String ethernetIpv4Address() {
        return this.ethernetIpv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ethernetIpv4AddressVariable() {
        return this.ethernetIpv4AddressVariable;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return internal controller-type
     * 
     */
    public String internalControllerType() {
        return this.internalControllerType;
    }
    /**
     * @return IP Directed-Broadcast
     * 
     */
    public Boolean ipDirectedBroadcast() {
        return this.ipDirectedBroadcast;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipDirectedBroadcastVariable() {
        return this.ipDirectedBroadcastVariable;
    }
    /**
     * @return Interface MTU \n\n, in bytes
     * 
     */
    public Integer ipMtu() {
        return this.ipMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipMtuVariable() {
        return this.ipMtuVariable;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Network Address Translation on this interface
     * 
     */
    public Boolean nat() {
        return this.nat;
    }
    /**
     * @return Block inbound ICMP error messages
     * 
     */
    public Boolean natBlockIcmpError() {
        return this.natBlockIcmpError;
    }
    /**
     * @return Variable name
     * 
     */
    public String natBlockIcmpErrorVariable() {
        return this.natBlockIcmpErrorVariable;
    }
    /**
     * @return Set port-forwarding rules for NAT on this interface
     * 
     */
    public List<GetVpnInterfaceDslIpoeFeatureTemplateNatPortForward> natPortForwards() {
        return this.natPortForwards;
    }
    /**
     * @return Set NAT refresh mode
     * 
     */
    public String natRefreshMode() {
        return this.natRefreshMode;
    }
    /**
     * @return Variable name
     * 
     */
    public String natRefreshModeVariable() {
        return this.natRefreshModeVariable;
    }
    /**
     * @return Respond to ping requests to NAT interface ip address from the public side
     * 
     */
    public Boolean natResponseToPing() {
        return this.natResponseToPing;
    }
    /**
     * @return Variable name
     * 
     */
    public String natResponseToPingVariable() {
        return this.natResponseToPingVariable;
    }
    /**
     * @return Set NAT TCP session timeout, in minutes
     * 
     */
    public Integer natTcpTimeout() {
        return this.natTcpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String natTcpTimeoutVariable() {
        return this.natTcpTimeoutVariable;
    }
    /**
     * @return Set NAT UDP session timeout, in minutes
     * 
     */
    public Integer natUdpTimeout() {
        return this.natUdpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String natUdpTimeoutVariable() {
        return this.natUdpTimeoutVariable;
    }
    /**
     * @return PAP outbound Password
     * 
     */
    public Boolean papPassword() {
        return this.papPassword;
    }
    /**
     * @return Specify ppp pap authentication Password
     * 
     */
    public String papPppAuthPassword() {
        return this.papPppAuthPassword;
    }
    /**
     * @return Variable name
     * 
     */
    public String papPppAuthPasswordVariable() {
        return this.papPppAuthPasswordVariable;
    }
    /**
     * @return PAP outbound Sent Username
     * 
     */
    public String papUsername() {
        return this.papUsername;
    }
    /**
     * @return Variable name
     * 
     */
    public String papUsernameVariable() {
        return this.papUsernameVariable;
    }
    /**
     * @return Per-tunnel Qos
     * 
     */
    public Boolean perTunnelQos() {
        return this.perTunnelQos;
    }
    /**
     * @return Per-tunnel QoS Aggregator
     * 
     */
    public Boolean perTunnelQosAggregator() {
        return this.perTunnelQosAggregator;
    }
    /**
     * @return Variable name
     * 
     */
    public String perTunnelQosAggregatorVariable() {
        return this.perTunnelQosAggregatorVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String perTunnelQosVariable() {
        return this.perTunnelQosVariable;
    }
    /**
     * @return Enable policer
     * 
     */
    public List<GetVpnInterfaceDslIpoeFeatureTemplatePolicer> policers() {
        return this.policers;
    }
    /**
     * @return PPP Link Authentication Protocol
     * 
     */
    public String pppAuthenticationProtocol() {
        return this.pppAuthenticationProtocol;
    }
    /**
     * @return PPP Authentication Protocol PAP
     * 
     */
    public Boolean pppAuthenticationProtocolPap() {
        return this.pppAuthenticationProtocolPap;
    }
    /**
     * @return Variable name
     * 
     */
    public String pppAuthenticationProtocolVariable() {
        return this.pppAuthenticationProtocolVariable;
    }
    /**
     * @return Maximum MRU to be negotiated during PPP LCP negotiation
     * 
     */
    public Integer pppMaximumPayload() {
        return this.pppMaximumPayload;
    }
    /**
     * @return Variable name
     * 
     */
    public String pppMaximumPayloadVariable() {
        return this.pppMaximumPayloadVariable;
    }
    /**
     * @return Adaptive QoS default downstream bandwidth
     * 
     */
    public Integer qosAdaptiveBandwidthDownstream() {
        return this.qosAdaptiveBandwidthDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveBandwidthDownstreamVariable() {
        return this.qosAdaptiveBandwidthDownstreamVariable;
    }
    /**
     * @return Adaptive QoS default upstream bandwidth
     * 
     */
    public Integer qosAdaptiveBandwidthUpstream() {
        return this.qosAdaptiveBandwidthUpstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveBandwidthUpstreamVariable() {
        return this.qosAdaptiveBandwidthUpstreamVariable;
    }
    /**
     * @return Downstream max bandwidth limit
     * 
     */
    public Integer qosAdaptiveMaxDownstream() {
        return this.qosAdaptiveMaxDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveMaxDownstreamVariable() {
        return this.qosAdaptiveMaxDownstreamVariable;
    }
    /**
     * @return Upstream max bandwidth limit
     * 
     */
    public Integer qosAdaptiveMaxUpstream() {
        return this.qosAdaptiveMaxUpstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveMaxUpstreamVariable() {
        return this.qosAdaptiveMaxUpstreamVariable;
    }
    /**
     * @return Downstream min bandwidth limit
     * 
     */
    public Integer qosAdaptiveMinDownstream() {
        return this.qosAdaptiveMinDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveMinDownstreamVariable() {
        return this.qosAdaptiveMinDownstreamVariable;
    }
    /**
     * @return Upstream min bandwidth limit
     * 
     */
    public Integer qosAdaptiveMinUpstream() {
        return this.qosAdaptiveMinUpstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveMinUpstreamVariable() {
        return this.qosAdaptiveMinUpstreamVariable;
    }
    /**
     * @return Periodic timer for adaptive QoS in minutes
     * 
     */
    public Integer qosAdaptivePeriod() {
        return this.qosAdaptivePeriod;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptivePeriodVariable() {
        return this.qosAdaptivePeriodVariable;
    }
    /**
     * @return Name of QoS map
     * 
     */
    public String qosMap() {
        return this.qosMap;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosMapVariable() {
        return this.qosMapVariable;
    }
    /**
     * @return Name of VPN QoS map
     * 
     */
    public String qosMapVpn() {
        return this.qosMapVpn;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosMapVpnVariable() {
        return this.qosMapVpnVariable;
    }
    /**
     * @return 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     * 
     */
    public Integer shapingRate() {
        return this.shapingRate;
    }
    /**
     * @return Variable name
     * 
     */
    public String shapingRateVariable() {
        return this.shapingRateVariable;
    }
    /**
     * @return Administrative state
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tcpMss() {
        return this.tcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpMssVariable() {
        return this.tcpMssVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    public String tlocExtension() {
        return this.tlocExtension;
    }
    /**
     * @return Variable name
     * 
     */
    public String tlocExtensionVariable() {
        return this.tlocExtensionVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackerVariable() {
        return this.trackerVariable;
    }
    /**
     * @return Enable tracker for this interface
     * 
     */
    public List<String> trackers() {
        return this.trackers;
    }
    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set
     * 
     */
    public Boolean tunnelInterfaceAllowAll() {
        return this.tunnelInterfaceAllowAll;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowAllVariable() {
        return this.tunnelInterfaceAllowAllVariable;
    }
    /**
     * @return Allow/deny BGP
     * 
     */
    public Boolean tunnelInterfaceAllowBgp() {
        return this.tunnelInterfaceAllowBgp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowBgpVariable() {
        return this.tunnelInterfaceAllowBgpVariable;
    }
    /**
     * @return Allow/Deny DHCP
     * 
     */
    public Boolean tunnelInterfaceAllowDhcp() {
        return this.tunnelInterfaceAllowDhcp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowDhcpVariable() {
        return this.tunnelInterfaceAllowDhcpVariable;
    }
    /**
     * @return Allow/Deny DNS
     * 
     */
    public Boolean tunnelInterfaceAllowDns() {
        return this.tunnelInterfaceAllowDns;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowDnsVariable() {
        return this.tunnelInterfaceAllowDnsVariable;
    }
    /**
     * @return Allow/Deny Https
     * 
     */
    public Boolean tunnelInterfaceAllowHttps() {
        return this.tunnelInterfaceAllowHttps;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowHttpsVariable() {
        return this.tunnelInterfaceAllowHttpsVariable;
    }
    /**
     * @return Allow/Deny ICMP
     * 
     */
    public Boolean tunnelInterfaceAllowIcmp() {
        return this.tunnelInterfaceAllowIcmp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowIcmpVariable() {
        return this.tunnelInterfaceAllowIcmpVariable;
    }
    /**
     * @return Allow/Deny NETCONF
     * 
     */
    public Boolean tunnelInterfaceAllowNetconf() {
        return this.tunnelInterfaceAllowNetconf;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowNetconfVariable() {
        return this.tunnelInterfaceAllowNetconfVariable;
    }
    /**
     * @return Allow/Deny NTP
     * 
     */
    public Boolean tunnelInterfaceAllowNtp() {
        return this.tunnelInterfaceAllowNtp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowNtpVariable() {
        return this.tunnelInterfaceAllowNtpVariable;
    }
    /**
     * @return Allow/Deny OSPF
     * 
     */
    public Boolean tunnelInterfaceAllowOspf() {
        return this.tunnelInterfaceAllowOspf;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowOspfVariable() {
        return this.tunnelInterfaceAllowOspfVariable;
    }
    /**
     * @return Allow/Deny SNMP
     * 
     */
    public Boolean tunnelInterfaceAllowSnmp() {
        return this.tunnelInterfaceAllowSnmp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowSnmpVariable() {
        return this.tunnelInterfaceAllowSnmpVariable;
    }
    /**
     * @return Allow/Deny SSH
     * 
     */
    public Boolean tunnelInterfaceAllowSsh() {
        return this.tunnelInterfaceAllowSsh;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowSshVariable() {
        return this.tunnelInterfaceAllowSshVariable;
    }
    /**
     * @return Allow/Deny STUN
     * 
     */
    public Boolean tunnelInterfaceAllowStun() {
        return this.tunnelInterfaceAllowStun;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowStunVariable() {
        return this.tunnelInterfaceAllowStunVariable;
    }
    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    public String tunnelInterfaceBindLoopbackTunnel() {
        return this.tunnelInterfaceBindLoopbackTunnel;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceBindLoopbackTunnelVariable() {
        return this.tunnelInterfaceBindLoopbackTunnelVariable;
    }
    /**
     * @return Set TLOC as border TLOC
     * 
     */
    public Boolean tunnelInterfaceBorder() {
        return this.tunnelInterfaceBorder;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceBorderVariable() {
        return this.tunnelInterfaceBorderVariable;
    }
    /**
     * @return Set carrier for TLOC
     * 
     */
    public String tunnelInterfaceCarrier() {
        return this.tunnelInterfaceCarrier;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceCarrierVariable() {
        return this.tunnelInterfaceCarrierVariable;
    }
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    public Boolean tunnelInterfaceClearDontFragment() {
        return this.tunnelInterfaceClearDontFragment;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceClearDontFragmentVariable() {
        return this.tunnelInterfaceClearDontFragmentVariable;
    }
    /**
     * @return Set color for TLOC
     * 
     */
    public String tunnelInterfaceColor() {
        return this.tunnelInterfaceColor;
    }
    /**
     * @return Restrict this TLOC behavior
     * 
     */
    public Boolean tunnelInterfaceColorRestrict() {
        return this.tunnelInterfaceColorRestrict;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceColorVariable() {
        return this.tunnelInterfaceColorVariable;
    }
    /**
     * @return Allow Control Connection
     * 
     */
    public Boolean tunnelInterfaceControlConnections() {
        return this.tunnelInterfaceControlConnections;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceControlConnectionsVariable() {
        return this.tunnelInterfaceControlConnectionsVariable;
    }
    /**
     * @return Encapsulation for TLOC
     * 
     */
    public List<GetVpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations() {
        return this.tunnelInterfaceEncapsulations;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceExcludeControllerGroupListVariable() {
        return this.tunnelInterfaceExcludeControllerGroupListVariable;
    }
    /**
     * @return Exclude the following controller groups defined in this list
     * 
     */
    public List<Integer> tunnelInterfaceExcludeControllerGroupLists() {
        return this.tunnelInterfaceExcludeControllerGroupLists;
    }
    /**
     * @return List of groups
     * 
     */
    public List<Integer> tunnelInterfaceGroups() {
        return this.tunnelInterfaceGroups;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceGroupsVariable() {
        return this.tunnelInterfaceGroupsVariable;
    }
    /**
     * @return Set time period of control hello packets \n\n milli seconds
     * 
     */
    public Integer tunnelInterfaceHelloInterval() {
        return this.tunnelInterfaceHelloInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceHelloIntervalVariable() {
        return this.tunnelInterfaceHelloIntervalVariable;
    }
    /**
     * @return Set tolerance of control hello packets \n\n seconds
     * 
     */
    public Integer tunnelInterfaceHelloTolerance() {
        return this.tunnelInterfaceHelloTolerance;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceHelloToleranceVariable() {
        return this.tunnelInterfaceHelloToleranceVariable;
    }
    /**
     * @return Set TLOC as last resort
     * 
     */
    public Boolean tunnelInterfaceLastResortCircuit() {
        return this.tunnelInterfaceLastResortCircuit;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceLastResortCircuitVariable() {
        return this.tunnelInterfaceLastResortCircuitVariable;
    }
    /**
     * @return Set the interface as a low-bandwidth circuit
     * 
     */
    public Boolean tunnelInterfaceLowBandwidthLink() {
        return this.tunnelInterfaceLowBandwidthLink;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceLowBandwidthLinkVariable() {
        return this.tunnelInterfaceLowBandwidthLinkVariable;
    }
    /**
     * @return Set the maximum number of control connections for this TLOC
     * 
     */
    public Integer tunnelInterfaceMaxControlConnections() {
        return this.tunnelInterfaceMaxControlConnections;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceMaxControlConnectionsVariable() {
        return this.tunnelInterfaceMaxControlConnectionsVariable;
    }
    /**
     * @return Set time period of nat refresh packets \n\n seconds
     * 
     */
    public Integer tunnelInterfaceNatRefreshInterval() {
        return this.tunnelInterfaceNatRefreshInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceNatRefreshIntervalVariable() {
        return this.tunnelInterfaceNatRefreshIntervalVariable;
    }
    /**
     * @return Accept and respond to network-prefix-directed broadcasts)
     * 
     */
    public Boolean tunnelInterfaceNetworkBroadcast() {
        return this.tunnelInterfaceNetworkBroadcast;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceNetworkBroadcastVariable() {
        return this.tunnelInterfaceNetworkBroadcastVariable;
    }
    /**
     * @return Disallow port hopping on the tunnel interface
     * 
     */
    public Boolean tunnelInterfacePortHop() {
        return this.tunnelInterfacePortHop;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfacePortHopVariable() {
        return this.tunnelInterfacePortHopVariable;
    }
    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tunnelInterfaceTunnelTcpMss() {
        return this.tunnelInterfaceTunnelTcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceTunnelTcpMssVariable() {
        return this.tunnelInterfaceTunnelTcpMssVariable;
    }
    /**
     * @return Put this wan interface in STUN mode only
     * 
     */
    public Boolean tunnelInterfaceVbondAsStunServer() {
        return this.tunnelInterfaceVbondAsStunServer;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceVbondAsStunServerVariable() {
        return this.tunnelInterfaceVbondAsStunServerVariable;
    }
    /**
     * @return Set interface preference for control connection to vManage \n\n
     * 
     */
    public Integer tunnelInterfaceVmanageConnectionPreference() {
        return this.tunnelInterfaceVmanageConnectionPreference;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceVmanageConnectionPreferenceVariable() {
        return this.tunnelInterfaceVmanageConnectionPreferenceVariable;
    }
    /**
     * @return Set tunnel QoS mode
     * 
     */
    public String tunnelQosMode() {
        return this.tunnelQosMode;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelQosModeVariable() {
        return this.tunnelQosModeVariable;
    }
    /**
     * @return Dialer IP Unnumbered Loopback interface name
     * 
     */
    public String unnumberedLoopbackInterface() {
        return this.unnumberedLoopbackInterface;
    }
    /**
     * @return Variable name
     * 
     */
    public String unnumberedLoopbackInterfaceVariable() {
        return this.unnumberedLoopbackInterfaceVariable;
    }
    /**
     * @return vdsl
     * 
     */
    public List<GetVpnInterfaceDslIpoeFeatureTemplateVdslConfiguration> vdslConfigurations() {
        return this.vdslConfigurations;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return Name of rewrite rule
     * 
     */
    public String writeRule() {
        return this.writeRule;
    }
    /**
     * @return Variable name
     * 
     */
    public String writeRuleVariable() {
        return this.writeRuleVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpnInterfaceDslIpoeFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetVpnInterfaceDslIpoeFeatureTemplateAccessList> accessLists;
        private Integer bandwidthDownstream;
        private String bandwidthDownstreamVariable;
        private Integer bandwidthUpstream;
        private String bandwidthUpstreamVariable;
        private String chapHostname;
        private String chapHostnameVariable;
        private String chapPppAuthPassword;
        private String chapPppAuthPasswordVariable;
        private String description;
        private List<String> deviceTypes;
        private Boolean dialerAddressNegotiated;
        private String dialerAddressNegotiatedVariable;
        private Integer dialerPoolNumber;
        private String dialerPoolNumberVariable;
        private Integer encap;
        private String encapVariable;
        private String ethernetDescription;
        private String ethernetDescriptionVariable;
        private Integer ethernetDhcpDistance;
        private String ethernetDhcpDistanceVariable;
        private String ethernetDhcpHelperVariable;
        private List<String> ethernetDhcpHelpers;
        private Boolean ethernetEnableDhcp;
        private String ethernetEnableDhcpVariable;
        private String ethernetInterfaceName;
        private String ethernetInterfaceNameVariable;
        private String ethernetIpv4Address;
        private String ethernetIpv4AddressVariable;
        private String id;
        private String internalControllerType;
        private Boolean ipDirectedBroadcast;
        private String ipDirectedBroadcastVariable;
        private Integer ipMtu;
        private String ipMtuVariable;
        private String name;
        private Boolean nat;
        private Boolean natBlockIcmpError;
        private String natBlockIcmpErrorVariable;
        private List<GetVpnInterfaceDslIpoeFeatureTemplateNatPortForward> natPortForwards;
        private String natRefreshMode;
        private String natRefreshModeVariable;
        private Boolean natResponseToPing;
        private String natResponseToPingVariable;
        private Integer natTcpTimeout;
        private String natTcpTimeoutVariable;
        private Integer natUdpTimeout;
        private String natUdpTimeoutVariable;
        private Boolean papPassword;
        private String papPppAuthPassword;
        private String papPppAuthPasswordVariable;
        private String papUsername;
        private String papUsernameVariable;
        private Boolean perTunnelQos;
        private Boolean perTunnelQosAggregator;
        private String perTunnelQosAggregatorVariable;
        private String perTunnelQosVariable;
        private List<GetVpnInterfaceDslIpoeFeatureTemplatePolicer> policers;
        private String pppAuthenticationProtocol;
        private Boolean pppAuthenticationProtocolPap;
        private String pppAuthenticationProtocolVariable;
        private Integer pppMaximumPayload;
        private String pppMaximumPayloadVariable;
        private Integer qosAdaptiveBandwidthDownstream;
        private String qosAdaptiveBandwidthDownstreamVariable;
        private Integer qosAdaptiveBandwidthUpstream;
        private String qosAdaptiveBandwidthUpstreamVariable;
        private Integer qosAdaptiveMaxDownstream;
        private String qosAdaptiveMaxDownstreamVariable;
        private Integer qosAdaptiveMaxUpstream;
        private String qosAdaptiveMaxUpstreamVariable;
        private Integer qosAdaptiveMinDownstream;
        private String qosAdaptiveMinDownstreamVariable;
        private Integer qosAdaptiveMinUpstream;
        private String qosAdaptiveMinUpstreamVariable;
        private Integer qosAdaptivePeriod;
        private String qosAdaptivePeriodVariable;
        private String qosMap;
        private String qosMapVariable;
        private String qosMapVpn;
        private String qosMapVpnVariable;
        private Integer shapingRate;
        private String shapingRateVariable;
        private Boolean shutdown;
        private String shutdownVariable;
        private Integer tcpMss;
        private String tcpMssVariable;
        private String templateType;
        private String tlocExtension;
        private String tlocExtensionVariable;
        private String trackerVariable;
        private List<String> trackers;
        private Boolean tunnelInterfaceAllowAll;
        private String tunnelInterfaceAllowAllVariable;
        private Boolean tunnelInterfaceAllowBgp;
        private String tunnelInterfaceAllowBgpVariable;
        private Boolean tunnelInterfaceAllowDhcp;
        private String tunnelInterfaceAllowDhcpVariable;
        private Boolean tunnelInterfaceAllowDns;
        private String tunnelInterfaceAllowDnsVariable;
        private Boolean tunnelInterfaceAllowHttps;
        private String tunnelInterfaceAllowHttpsVariable;
        private Boolean tunnelInterfaceAllowIcmp;
        private String tunnelInterfaceAllowIcmpVariable;
        private Boolean tunnelInterfaceAllowNetconf;
        private String tunnelInterfaceAllowNetconfVariable;
        private Boolean tunnelInterfaceAllowNtp;
        private String tunnelInterfaceAllowNtpVariable;
        private Boolean tunnelInterfaceAllowOspf;
        private String tunnelInterfaceAllowOspfVariable;
        private Boolean tunnelInterfaceAllowSnmp;
        private String tunnelInterfaceAllowSnmpVariable;
        private Boolean tunnelInterfaceAllowSsh;
        private String tunnelInterfaceAllowSshVariable;
        private Boolean tunnelInterfaceAllowStun;
        private String tunnelInterfaceAllowStunVariable;
        private String tunnelInterfaceBindLoopbackTunnel;
        private String tunnelInterfaceBindLoopbackTunnelVariable;
        private Boolean tunnelInterfaceBorder;
        private String tunnelInterfaceBorderVariable;
        private String tunnelInterfaceCarrier;
        private String tunnelInterfaceCarrierVariable;
        private Boolean tunnelInterfaceClearDontFragment;
        private String tunnelInterfaceClearDontFragmentVariable;
        private String tunnelInterfaceColor;
        private Boolean tunnelInterfaceColorRestrict;
        private String tunnelInterfaceColorVariable;
        private Boolean tunnelInterfaceControlConnections;
        private String tunnelInterfaceControlConnectionsVariable;
        private List<GetVpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations;
        private String tunnelInterfaceExcludeControllerGroupListVariable;
        private List<Integer> tunnelInterfaceExcludeControllerGroupLists;
        private List<Integer> tunnelInterfaceGroups;
        private String tunnelInterfaceGroupsVariable;
        private Integer tunnelInterfaceHelloInterval;
        private String tunnelInterfaceHelloIntervalVariable;
        private Integer tunnelInterfaceHelloTolerance;
        private String tunnelInterfaceHelloToleranceVariable;
        private Boolean tunnelInterfaceLastResortCircuit;
        private String tunnelInterfaceLastResortCircuitVariable;
        private Boolean tunnelInterfaceLowBandwidthLink;
        private String tunnelInterfaceLowBandwidthLinkVariable;
        private Integer tunnelInterfaceMaxControlConnections;
        private String tunnelInterfaceMaxControlConnectionsVariable;
        private Integer tunnelInterfaceNatRefreshInterval;
        private String tunnelInterfaceNatRefreshIntervalVariable;
        private Boolean tunnelInterfaceNetworkBroadcast;
        private String tunnelInterfaceNetworkBroadcastVariable;
        private Boolean tunnelInterfacePortHop;
        private String tunnelInterfacePortHopVariable;
        private Integer tunnelInterfaceTunnelTcpMss;
        private String tunnelInterfaceTunnelTcpMssVariable;
        private Boolean tunnelInterfaceVbondAsStunServer;
        private String tunnelInterfaceVbondAsStunServerVariable;
        private Integer tunnelInterfaceVmanageConnectionPreference;
        private String tunnelInterfaceVmanageConnectionPreferenceVariable;
        private String tunnelQosMode;
        private String tunnelQosModeVariable;
        private String unnumberedLoopbackInterface;
        private String unnumberedLoopbackInterfaceVariable;
        private List<GetVpnInterfaceDslIpoeFeatureTemplateVdslConfiguration> vdslConfigurations;
        private Integer version;
        private String writeRule;
        private String writeRuleVariable;
        public Builder() {}
        public Builder(GetVpnInterfaceDslIpoeFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLists = defaults.accessLists;
    	      this.bandwidthDownstream = defaults.bandwidthDownstream;
    	      this.bandwidthDownstreamVariable = defaults.bandwidthDownstreamVariable;
    	      this.bandwidthUpstream = defaults.bandwidthUpstream;
    	      this.bandwidthUpstreamVariable = defaults.bandwidthUpstreamVariable;
    	      this.chapHostname = defaults.chapHostname;
    	      this.chapHostnameVariable = defaults.chapHostnameVariable;
    	      this.chapPppAuthPassword = defaults.chapPppAuthPassword;
    	      this.chapPppAuthPasswordVariable = defaults.chapPppAuthPasswordVariable;
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.dialerAddressNegotiated = defaults.dialerAddressNegotiated;
    	      this.dialerAddressNegotiatedVariable = defaults.dialerAddressNegotiatedVariable;
    	      this.dialerPoolNumber = defaults.dialerPoolNumber;
    	      this.dialerPoolNumberVariable = defaults.dialerPoolNumberVariable;
    	      this.encap = defaults.encap;
    	      this.encapVariable = defaults.encapVariable;
    	      this.ethernetDescription = defaults.ethernetDescription;
    	      this.ethernetDescriptionVariable = defaults.ethernetDescriptionVariable;
    	      this.ethernetDhcpDistance = defaults.ethernetDhcpDistance;
    	      this.ethernetDhcpDistanceVariable = defaults.ethernetDhcpDistanceVariable;
    	      this.ethernetDhcpHelperVariable = defaults.ethernetDhcpHelperVariable;
    	      this.ethernetDhcpHelpers = defaults.ethernetDhcpHelpers;
    	      this.ethernetEnableDhcp = defaults.ethernetEnableDhcp;
    	      this.ethernetEnableDhcpVariable = defaults.ethernetEnableDhcpVariable;
    	      this.ethernetInterfaceName = defaults.ethernetInterfaceName;
    	      this.ethernetInterfaceNameVariable = defaults.ethernetInterfaceNameVariable;
    	      this.ethernetIpv4Address = defaults.ethernetIpv4Address;
    	      this.ethernetIpv4AddressVariable = defaults.ethernetIpv4AddressVariable;
    	      this.id = defaults.id;
    	      this.internalControllerType = defaults.internalControllerType;
    	      this.ipDirectedBroadcast = defaults.ipDirectedBroadcast;
    	      this.ipDirectedBroadcastVariable = defaults.ipDirectedBroadcastVariable;
    	      this.ipMtu = defaults.ipMtu;
    	      this.ipMtuVariable = defaults.ipMtuVariable;
    	      this.name = defaults.name;
    	      this.nat = defaults.nat;
    	      this.natBlockIcmpError = defaults.natBlockIcmpError;
    	      this.natBlockIcmpErrorVariable = defaults.natBlockIcmpErrorVariable;
    	      this.natPortForwards = defaults.natPortForwards;
    	      this.natRefreshMode = defaults.natRefreshMode;
    	      this.natRefreshModeVariable = defaults.natRefreshModeVariable;
    	      this.natResponseToPing = defaults.natResponseToPing;
    	      this.natResponseToPingVariable = defaults.natResponseToPingVariable;
    	      this.natTcpTimeout = defaults.natTcpTimeout;
    	      this.natTcpTimeoutVariable = defaults.natTcpTimeoutVariable;
    	      this.natUdpTimeout = defaults.natUdpTimeout;
    	      this.natUdpTimeoutVariable = defaults.natUdpTimeoutVariable;
    	      this.papPassword = defaults.papPassword;
    	      this.papPppAuthPassword = defaults.papPppAuthPassword;
    	      this.papPppAuthPasswordVariable = defaults.papPppAuthPasswordVariable;
    	      this.papUsername = defaults.papUsername;
    	      this.papUsernameVariable = defaults.papUsernameVariable;
    	      this.perTunnelQos = defaults.perTunnelQos;
    	      this.perTunnelQosAggregator = defaults.perTunnelQosAggregator;
    	      this.perTunnelQosAggregatorVariable = defaults.perTunnelQosAggregatorVariable;
    	      this.perTunnelQosVariable = defaults.perTunnelQosVariable;
    	      this.policers = defaults.policers;
    	      this.pppAuthenticationProtocol = defaults.pppAuthenticationProtocol;
    	      this.pppAuthenticationProtocolPap = defaults.pppAuthenticationProtocolPap;
    	      this.pppAuthenticationProtocolVariable = defaults.pppAuthenticationProtocolVariable;
    	      this.pppMaximumPayload = defaults.pppMaximumPayload;
    	      this.pppMaximumPayloadVariable = defaults.pppMaximumPayloadVariable;
    	      this.qosAdaptiveBandwidthDownstream = defaults.qosAdaptiveBandwidthDownstream;
    	      this.qosAdaptiveBandwidthDownstreamVariable = defaults.qosAdaptiveBandwidthDownstreamVariable;
    	      this.qosAdaptiveBandwidthUpstream = defaults.qosAdaptiveBandwidthUpstream;
    	      this.qosAdaptiveBandwidthUpstreamVariable = defaults.qosAdaptiveBandwidthUpstreamVariable;
    	      this.qosAdaptiveMaxDownstream = defaults.qosAdaptiveMaxDownstream;
    	      this.qosAdaptiveMaxDownstreamVariable = defaults.qosAdaptiveMaxDownstreamVariable;
    	      this.qosAdaptiveMaxUpstream = defaults.qosAdaptiveMaxUpstream;
    	      this.qosAdaptiveMaxUpstreamVariable = defaults.qosAdaptiveMaxUpstreamVariable;
    	      this.qosAdaptiveMinDownstream = defaults.qosAdaptiveMinDownstream;
    	      this.qosAdaptiveMinDownstreamVariable = defaults.qosAdaptiveMinDownstreamVariable;
    	      this.qosAdaptiveMinUpstream = defaults.qosAdaptiveMinUpstream;
    	      this.qosAdaptiveMinUpstreamVariable = defaults.qosAdaptiveMinUpstreamVariable;
    	      this.qosAdaptivePeriod = defaults.qosAdaptivePeriod;
    	      this.qosAdaptivePeriodVariable = defaults.qosAdaptivePeriodVariable;
    	      this.qosMap = defaults.qosMap;
    	      this.qosMapVariable = defaults.qosMapVariable;
    	      this.qosMapVpn = defaults.qosMapVpn;
    	      this.qosMapVpnVariable = defaults.qosMapVpnVariable;
    	      this.shapingRate = defaults.shapingRate;
    	      this.shapingRateVariable = defaults.shapingRateVariable;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.tcpMss = defaults.tcpMss;
    	      this.tcpMssVariable = defaults.tcpMssVariable;
    	      this.templateType = defaults.templateType;
    	      this.tlocExtension = defaults.tlocExtension;
    	      this.tlocExtensionVariable = defaults.tlocExtensionVariable;
    	      this.trackerVariable = defaults.trackerVariable;
    	      this.trackers = defaults.trackers;
    	      this.tunnelInterfaceAllowAll = defaults.tunnelInterfaceAllowAll;
    	      this.tunnelInterfaceAllowAllVariable = defaults.tunnelInterfaceAllowAllVariable;
    	      this.tunnelInterfaceAllowBgp = defaults.tunnelInterfaceAllowBgp;
    	      this.tunnelInterfaceAllowBgpVariable = defaults.tunnelInterfaceAllowBgpVariable;
    	      this.tunnelInterfaceAllowDhcp = defaults.tunnelInterfaceAllowDhcp;
    	      this.tunnelInterfaceAllowDhcpVariable = defaults.tunnelInterfaceAllowDhcpVariable;
    	      this.tunnelInterfaceAllowDns = defaults.tunnelInterfaceAllowDns;
    	      this.tunnelInterfaceAllowDnsVariable = defaults.tunnelInterfaceAllowDnsVariable;
    	      this.tunnelInterfaceAllowHttps = defaults.tunnelInterfaceAllowHttps;
    	      this.tunnelInterfaceAllowHttpsVariable = defaults.tunnelInterfaceAllowHttpsVariable;
    	      this.tunnelInterfaceAllowIcmp = defaults.tunnelInterfaceAllowIcmp;
    	      this.tunnelInterfaceAllowIcmpVariable = defaults.tunnelInterfaceAllowIcmpVariable;
    	      this.tunnelInterfaceAllowNetconf = defaults.tunnelInterfaceAllowNetconf;
    	      this.tunnelInterfaceAllowNetconfVariable = defaults.tunnelInterfaceAllowNetconfVariable;
    	      this.tunnelInterfaceAllowNtp = defaults.tunnelInterfaceAllowNtp;
    	      this.tunnelInterfaceAllowNtpVariable = defaults.tunnelInterfaceAllowNtpVariable;
    	      this.tunnelInterfaceAllowOspf = defaults.tunnelInterfaceAllowOspf;
    	      this.tunnelInterfaceAllowOspfVariable = defaults.tunnelInterfaceAllowOspfVariable;
    	      this.tunnelInterfaceAllowSnmp = defaults.tunnelInterfaceAllowSnmp;
    	      this.tunnelInterfaceAllowSnmpVariable = defaults.tunnelInterfaceAllowSnmpVariable;
    	      this.tunnelInterfaceAllowSsh = defaults.tunnelInterfaceAllowSsh;
    	      this.tunnelInterfaceAllowSshVariable = defaults.tunnelInterfaceAllowSshVariable;
    	      this.tunnelInterfaceAllowStun = defaults.tunnelInterfaceAllowStun;
    	      this.tunnelInterfaceAllowStunVariable = defaults.tunnelInterfaceAllowStunVariable;
    	      this.tunnelInterfaceBindLoopbackTunnel = defaults.tunnelInterfaceBindLoopbackTunnel;
    	      this.tunnelInterfaceBindLoopbackTunnelVariable = defaults.tunnelInterfaceBindLoopbackTunnelVariable;
    	      this.tunnelInterfaceBorder = defaults.tunnelInterfaceBorder;
    	      this.tunnelInterfaceBorderVariable = defaults.tunnelInterfaceBorderVariable;
    	      this.tunnelInterfaceCarrier = defaults.tunnelInterfaceCarrier;
    	      this.tunnelInterfaceCarrierVariable = defaults.tunnelInterfaceCarrierVariable;
    	      this.tunnelInterfaceClearDontFragment = defaults.tunnelInterfaceClearDontFragment;
    	      this.tunnelInterfaceClearDontFragmentVariable = defaults.tunnelInterfaceClearDontFragmentVariable;
    	      this.tunnelInterfaceColor = defaults.tunnelInterfaceColor;
    	      this.tunnelInterfaceColorRestrict = defaults.tunnelInterfaceColorRestrict;
    	      this.tunnelInterfaceColorVariable = defaults.tunnelInterfaceColorVariable;
    	      this.tunnelInterfaceControlConnections = defaults.tunnelInterfaceControlConnections;
    	      this.tunnelInterfaceControlConnectionsVariable = defaults.tunnelInterfaceControlConnectionsVariable;
    	      this.tunnelInterfaceEncapsulations = defaults.tunnelInterfaceEncapsulations;
    	      this.tunnelInterfaceExcludeControllerGroupListVariable = defaults.tunnelInterfaceExcludeControllerGroupListVariable;
    	      this.tunnelInterfaceExcludeControllerGroupLists = defaults.tunnelInterfaceExcludeControllerGroupLists;
    	      this.tunnelInterfaceGroups = defaults.tunnelInterfaceGroups;
    	      this.tunnelInterfaceGroupsVariable = defaults.tunnelInterfaceGroupsVariable;
    	      this.tunnelInterfaceHelloInterval = defaults.tunnelInterfaceHelloInterval;
    	      this.tunnelInterfaceHelloIntervalVariable = defaults.tunnelInterfaceHelloIntervalVariable;
    	      this.tunnelInterfaceHelloTolerance = defaults.tunnelInterfaceHelloTolerance;
    	      this.tunnelInterfaceHelloToleranceVariable = defaults.tunnelInterfaceHelloToleranceVariable;
    	      this.tunnelInterfaceLastResortCircuit = defaults.tunnelInterfaceLastResortCircuit;
    	      this.tunnelInterfaceLastResortCircuitVariable = defaults.tunnelInterfaceLastResortCircuitVariable;
    	      this.tunnelInterfaceLowBandwidthLink = defaults.tunnelInterfaceLowBandwidthLink;
    	      this.tunnelInterfaceLowBandwidthLinkVariable = defaults.tunnelInterfaceLowBandwidthLinkVariable;
    	      this.tunnelInterfaceMaxControlConnections = defaults.tunnelInterfaceMaxControlConnections;
    	      this.tunnelInterfaceMaxControlConnectionsVariable = defaults.tunnelInterfaceMaxControlConnectionsVariable;
    	      this.tunnelInterfaceNatRefreshInterval = defaults.tunnelInterfaceNatRefreshInterval;
    	      this.tunnelInterfaceNatRefreshIntervalVariable = defaults.tunnelInterfaceNatRefreshIntervalVariable;
    	      this.tunnelInterfaceNetworkBroadcast = defaults.tunnelInterfaceNetworkBroadcast;
    	      this.tunnelInterfaceNetworkBroadcastVariable = defaults.tunnelInterfaceNetworkBroadcastVariable;
    	      this.tunnelInterfacePortHop = defaults.tunnelInterfacePortHop;
    	      this.tunnelInterfacePortHopVariable = defaults.tunnelInterfacePortHopVariable;
    	      this.tunnelInterfaceTunnelTcpMss = defaults.tunnelInterfaceTunnelTcpMss;
    	      this.tunnelInterfaceTunnelTcpMssVariable = defaults.tunnelInterfaceTunnelTcpMssVariable;
    	      this.tunnelInterfaceVbondAsStunServer = defaults.tunnelInterfaceVbondAsStunServer;
    	      this.tunnelInterfaceVbondAsStunServerVariable = defaults.tunnelInterfaceVbondAsStunServerVariable;
    	      this.tunnelInterfaceVmanageConnectionPreference = defaults.tunnelInterfaceVmanageConnectionPreference;
    	      this.tunnelInterfaceVmanageConnectionPreferenceVariable = defaults.tunnelInterfaceVmanageConnectionPreferenceVariable;
    	      this.tunnelQosMode = defaults.tunnelQosMode;
    	      this.tunnelQosModeVariable = defaults.tunnelQosModeVariable;
    	      this.unnumberedLoopbackInterface = defaults.unnumberedLoopbackInterface;
    	      this.unnumberedLoopbackInterfaceVariable = defaults.unnumberedLoopbackInterfaceVariable;
    	      this.vdslConfigurations = defaults.vdslConfigurations;
    	      this.version = defaults.version;
    	      this.writeRule = defaults.writeRule;
    	      this.writeRuleVariable = defaults.writeRuleVariable;
        }

        @CustomType.Setter
        public Builder accessLists(List<GetVpnInterfaceDslIpoeFeatureTemplateAccessList> accessLists) {
            if (accessLists == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "accessLists");
            }
            this.accessLists = accessLists;
            return this;
        }
        public Builder accessLists(GetVpnInterfaceDslIpoeFeatureTemplateAccessList... accessLists) {
            return accessLists(List.of(accessLists));
        }
        @CustomType.Setter
        public Builder bandwidthDownstream(Integer bandwidthDownstream) {
            if (bandwidthDownstream == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "bandwidthDownstream");
            }
            this.bandwidthDownstream = bandwidthDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthDownstreamVariable(String bandwidthDownstreamVariable) {
            if (bandwidthDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "bandwidthDownstreamVariable");
            }
            this.bandwidthDownstreamVariable = bandwidthDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthUpstream(Integer bandwidthUpstream) {
            if (bandwidthUpstream == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "bandwidthUpstream");
            }
            this.bandwidthUpstream = bandwidthUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthUpstreamVariable(String bandwidthUpstreamVariable) {
            if (bandwidthUpstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "bandwidthUpstreamVariable");
            }
            this.bandwidthUpstreamVariable = bandwidthUpstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder chapHostname(String chapHostname) {
            if (chapHostname == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "chapHostname");
            }
            this.chapHostname = chapHostname;
            return this;
        }
        @CustomType.Setter
        public Builder chapHostnameVariable(String chapHostnameVariable) {
            if (chapHostnameVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "chapHostnameVariable");
            }
            this.chapHostnameVariable = chapHostnameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder chapPppAuthPassword(String chapPppAuthPassword) {
            if (chapPppAuthPassword == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "chapPppAuthPassword");
            }
            this.chapPppAuthPassword = chapPppAuthPassword;
            return this;
        }
        @CustomType.Setter
        public Builder chapPppAuthPasswordVariable(String chapPppAuthPasswordVariable) {
            if (chapPppAuthPasswordVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "chapPppAuthPasswordVariable");
            }
            this.chapPppAuthPasswordVariable = chapPppAuthPasswordVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder dialerAddressNegotiated(Boolean dialerAddressNegotiated) {
            if (dialerAddressNegotiated == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "dialerAddressNegotiated");
            }
            this.dialerAddressNegotiated = dialerAddressNegotiated;
            return this;
        }
        @CustomType.Setter
        public Builder dialerAddressNegotiatedVariable(String dialerAddressNegotiatedVariable) {
            if (dialerAddressNegotiatedVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "dialerAddressNegotiatedVariable");
            }
            this.dialerAddressNegotiatedVariable = dialerAddressNegotiatedVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dialerPoolNumber(Integer dialerPoolNumber) {
            if (dialerPoolNumber == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "dialerPoolNumber");
            }
            this.dialerPoolNumber = dialerPoolNumber;
            return this;
        }
        @CustomType.Setter
        public Builder dialerPoolNumberVariable(String dialerPoolNumberVariable) {
            if (dialerPoolNumberVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "dialerPoolNumberVariable");
            }
            this.dialerPoolNumberVariable = dialerPoolNumberVariable;
            return this;
        }
        @CustomType.Setter
        public Builder encap(Integer encap) {
            if (encap == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "encap");
            }
            this.encap = encap;
            return this;
        }
        @CustomType.Setter
        public Builder encapVariable(String encapVariable) {
            if (encapVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "encapVariable");
            }
            this.encapVariable = encapVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ethernetDescription(String ethernetDescription) {
            if (ethernetDescription == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ethernetDescription");
            }
            this.ethernetDescription = ethernetDescription;
            return this;
        }
        @CustomType.Setter
        public Builder ethernetDescriptionVariable(String ethernetDescriptionVariable) {
            if (ethernetDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ethernetDescriptionVariable");
            }
            this.ethernetDescriptionVariable = ethernetDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ethernetDhcpDistance(Integer ethernetDhcpDistance) {
            if (ethernetDhcpDistance == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ethernetDhcpDistance");
            }
            this.ethernetDhcpDistance = ethernetDhcpDistance;
            return this;
        }
        @CustomType.Setter
        public Builder ethernetDhcpDistanceVariable(String ethernetDhcpDistanceVariable) {
            if (ethernetDhcpDistanceVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ethernetDhcpDistanceVariable");
            }
            this.ethernetDhcpDistanceVariable = ethernetDhcpDistanceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ethernetDhcpHelperVariable(String ethernetDhcpHelperVariable) {
            if (ethernetDhcpHelperVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ethernetDhcpHelperVariable");
            }
            this.ethernetDhcpHelperVariable = ethernetDhcpHelperVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ethernetDhcpHelpers(List<String> ethernetDhcpHelpers) {
            if (ethernetDhcpHelpers == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ethernetDhcpHelpers");
            }
            this.ethernetDhcpHelpers = ethernetDhcpHelpers;
            return this;
        }
        public Builder ethernetDhcpHelpers(String... ethernetDhcpHelpers) {
            return ethernetDhcpHelpers(List.of(ethernetDhcpHelpers));
        }
        @CustomType.Setter
        public Builder ethernetEnableDhcp(Boolean ethernetEnableDhcp) {
            if (ethernetEnableDhcp == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ethernetEnableDhcp");
            }
            this.ethernetEnableDhcp = ethernetEnableDhcp;
            return this;
        }
        @CustomType.Setter
        public Builder ethernetEnableDhcpVariable(String ethernetEnableDhcpVariable) {
            if (ethernetEnableDhcpVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ethernetEnableDhcpVariable");
            }
            this.ethernetEnableDhcpVariable = ethernetEnableDhcpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ethernetInterfaceName(String ethernetInterfaceName) {
            if (ethernetInterfaceName == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ethernetInterfaceName");
            }
            this.ethernetInterfaceName = ethernetInterfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder ethernetInterfaceNameVariable(String ethernetInterfaceNameVariable) {
            if (ethernetInterfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ethernetInterfaceNameVariable");
            }
            this.ethernetInterfaceNameVariable = ethernetInterfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ethernetIpv4Address(String ethernetIpv4Address) {
            if (ethernetIpv4Address == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ethernetIpv4Address");
            }
            this.ethernetIpv4Address = ethernetIpv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ethernetIpv4AddressVariable(String ethernetIpv4AddressVariable) {
            if (ethernetIpv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ethernetIpv4AddressVariable");
            }
            this.ethernetIpv4AddressVariable = ethernetIpv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder internalControllerType(String internalControllerType) {
            if (internalControllerType == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "internalControllerType");
            }
            this.internalControllerType = internalControllerType;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcast(Boolean ipDirectedBroadcast) {
            if (ipDirectedBroadcast == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ipDirectedBroadcast");
            }
            this.ipDirectedBroadcast = ipDirectedBroadcast;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcastVariable(String ipDirectedBroadcastVariable) {
            if (ipDirectedBroadcastVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ipDirectedBroadcastVariable");
            }
            this.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtu(Integer ipMtu) {
            if (ipMtu == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ipMtu");
            }
            this.ipMtu = ipMtu;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtuVariable(String ipMtuVariable) {
            if (ipMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "ipMtuVariable");
            }
            this.ipMtuVariable = ipMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nat(Boolean nat) {
            if (nat == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "nat");
            }
            this.nat = nat;
            return this;
        }
        @CustomType.Setter
        public Builder natBlockIcmpError(Boolean natBlockIcmpError) {
            if (natBlockIcmpError == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "natBlockIcmpError");
            }
            this.natBlockIcmpError = natBlockIcmpError;
            return this;
        }
        @CustomType.Setter
        public Builder natBlockIcmpErrorVariable(String natBlockIcmpErrorVariable) {
            if (natBlockIcmpErrorVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "natBlockIcmpErrorVariable");
            }
            this.natBlockIcmpErrorVariable = natBlockIcmpErrorVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natPortForwards(List<GetVpnInterfaceDslIpoeFeatureTemplateNatPortForward> natPortForwards) {
            if (natPortForwards == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "natPortForwards");
            }
            this.natPortForwards = natPortForwards;
            return this;
        }
        public Builder natPortForwards(GetVpnInterfaceDslIpoeFeatureTemplateNatPortForward... natPortForwards) {
            return natPortForwards(List.of(natPortForwards));
        }
        @CustomType.Setter
        public Builder natRefreshMode(String natRefreshMode) {
            if (natRefreshMode == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "natRefreshMode");
            }
            this.natRefreshMode = natRefreshMode;
            return this;
        }
        @CustomType.Setter
        public Builder natRefreshModeVariable(String natRefreshModeVariable) {
            if (natRefreshModeVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "natRefreshModeVariable");
            }
            this.natRefreshModeVariable = natRefreshModeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natResponseToPing(Boolean natResponseToPing) {
            if (natResponseToPing == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "natResponseToPing");
            }
            this.natResponseToPing = natResponseToPing;
            return this;
        }
        @CustomType.Setter
        public Builder natResponseToPingVariable(String natResponseToPingVariable) {
            if (natResponseToPingVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "natResponseToPingVariable");
            }
            this.natResponseToPingVariable = natResponseToPingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natTcpTimeout(Integer natTcpTimeout) {
            if (natTcpTimeout == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "natTcpTimeout");
            }
            this.natTcpTimeout = natTcpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder natTcpTimeoutVariable(String natTcpTimeoutVariable) {
            if (natTcpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "natTcpTimeoutVariable");
            }
            this.natTcpTimeoutVariable = natTcpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natUdpTimeout(Integer natUdpTimeout) {
            if (natUdpTimeout == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "natUdpTimeout");
            }
            this.natUdpTimeout = natUdpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder natUdpTimeoutVariable(String natUdpTimeoutVariable) {
            if (natUdpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "natUdpTimeoutVariable");
            }
            this.natUdpTimeoutVariable = natUdpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder papPassword(Boolean papPassword) {
            if (papPassword == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "papPassword");
            }
            this.papPassword = papPassword;
            return this;
        }
        @CustomType.Setter
        public Builder papPppAuthPassword(String papPppAuthPassword) {
            if (papPppAuthPassword == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "papPppAuthPassword");
            }
            this.papPppAuthPassword = papPppAuthPassword;
            return this;
        }
        @CustomType.Setter
        public Builder papPppAuthPasswordVariable(String papPppAuthPasswordVariable) {
            if (papPppAuthPasswordVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "papPppAuthPasswordVariable");
            }
            this.papPppAuthPasswordVariable = papPppAuthPasswordVariable;
            return this;
        }
        @CustomType.Setter
        public Builder papUsername(String papUsername) {
            if (papUsername == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "papUsername");
            }
            this.papUsername = papUsername;
            return this;
        }
        @CustomType.Setter
        public Builder papUsernameVariable(String papUsernameVariable) {
            if (papUsernameVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "papUsernameVariable");
            }
            this.papUsernameVariable = papUsernameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder perTunnelQos(Boolean perTunnelQos) {
            if (perTunnelQos == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "perTunnelQos");
            }
            this.perTunnelQos = perTunnelQos;
            return this;
        }
        @CustomType.Setter
        public Builder perTunnelQosAggregator(Boolean perTunnelQosAggregator) {
            if (perTunnelQosAggregator == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "perTunnelQosAggregator");
            }
            this.perTunnelQosAggregator = perTunnelQosAggregator;
            return this;
        }
        @CustomType.Setter
        public Builder perTunnelQosAggregatorVariable(String perTunnelQosAggregatorVariable) {
            if (perTunnelQosAggregatorVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "perTunnelQosAggregatorVariable");
            }
            this.perTunnelQosAggregatorVariable = perTunnelQosAggregatorVariable;
            return this;
        }
        @CustomType.Setter
        public Builder perTunnelQosVariable(String perTunnelQosVariable) {
            if (perTunnelQosVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "perTunnelQosVariable");
            }
            this.perTunnelQosVariable = perTunnelQosVariable;
            return this;
        }
        @CustomType.Setter
        public Builder policers(List<GetVpnInterfaceDslIpoeFeatureTemplatePolicer> policers) {
            if (policers == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "policers");
            }
            this.policers = policers;
            return this;
        }
        public Builder policers(GetVpnInterfaceDslIpoeFeatureTemplatePolicer... policers) {
            return policers(List.of(policers));
        }
        @CustomType.Setter
        public Builder pppAuthenticationProtocol(String pppAuthenticationProtocol) {
            if (pppAuthenticationProtocol == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "pppAuthenticationProtocol");
            }
            this.pppAuthenticationProtocol = pppAuthenticationProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder pppAuthenticationProtocolPap(Boolean pppAuthenticationProtocolPap) {
            if (pppAuthenticationProtocolPap == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "pppAuthenticationProtocolPap");
            }
            this.pppAuthenticationProtocolPap = pppAuthenticationProtocolPap;
            return this;
        }
        @CustomType.Setter
        public Builder pppAuthenticationProtocolVariable(String pppAuthenticationProtocolVariable) {
            if (pppAuthenticationProtocolVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "pppAuthenticationProtocolVariable");
            }
            this.pppAuthenticationProtocolVariable = pppAuthenticationProtocolVariable;
            return this;
        }
        @CustomType.Setter
        public Builder pppMaximumPayload(Integer pppMaximumPayload) {
            if (pppMaximumPayload == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "pppMaximumPayload");
            }
            this.pppMaximumPayload = pppMaximumPayload;
            return this;
        }
        @CustomType.Setter
        public Builder pppMaximumPayloadVariable(String pppMaximumPayloadVariable) {
            if (pppMaximumPayloadVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "pppMaximumPayloadVariable");
            }
            this.pppMaximumPayloadVariable = pppMaximumPayloadVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveBandwidthDownstream(Integer qosAdaptiveBandwidthDownstream) {
            if (qosAdaptiveBandwidthDownstream == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptiveBandwidthDownstream");
            }
            this.qosAdaptiveBandwidthDownstream = qosAdaptiveBandwidthDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveBandwidthDownstreamVariable(String qosAdaptiveBandwidthDownstreamVariable) {
            if (qosAdaptiveBandwidthDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptiveBandwidthDownstreamVariable");
            }
            this.qosAdaptiveBandwidthDownstreamVariable = qosAdaptiveBandwidthDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveBandwidthUpstream(Integer qosAdaptiveBandwidthUpstream) {
            if (qosAdaptiveBandwidthUpstream == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptiveBandwidthUpstream");
            }
            this.qosAdaptiveBandwidthUpstream = qosAdaptiveBandwidthUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveBandwidthUpstreamVariable(String qosAdaptiveBandwidthUpstreamVariable) {
            if (qosAdaptiveBandwidthUpstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptiveBandwidthUpstreamVariable");
            }
            this.qosAdaptiveBandwidthUpstreamVariable = qosAdaptiveBandwidthUpstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMaxDownstream(Integer qosAdaptiveMaxDownstream) {
            if (qosAdaptiveMaxDownstream == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptiveMaxDownstream");
            }
            this.qosAdaptiveMaxDownstream = qosAdaptiveMaxDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMaxDownstreamVariable(String qosAdaptiveMaxDownstreamVariable) {
            if (qosAdaptiveMaxDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptiveMaxDownstreamVariable");
            }
            this.qosAdaptiveMaxDownstreamVariable = qosAdaptiveMaxDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMaxUpstream(Integer qosAdaptiveMaxUpstream) {
            if (qosAdaptiveMaxUpstream == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptiveMaxUpstream");
            }
            this.qosAdaptiveMaxUpstream = qosAdaptiveMaxUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMaxUpstreamVariable(String qosAdaptiveMaxUpstreamVariable) {
            if (qosAdaptiveMaxUpstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptiveMaxUpstreamVariable");
            }
            this.qosAdaptiveMaxUpstreamVariable = qosAdaptiveMaxUpstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMinDownstream(Integer qosAdaptiveMinDownstream) {
            if (qosAdaptiveMinDownstream == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptiveMinDownstream");
            }
            this.qosAdaptiveMinDownstream = qosAdaptiveMinDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMinDownstreamVariable(String qosAdaptiveMinDownstreamVariable) {
            if (qosAdaptiveMinDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptiveMinDownstreamVariable");
            }
            this.qosAdaptiveMinDownstreamVariable = qosAdaptiveMinDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMinUpstream(Integer qosAdaptiveMinUpstream) {
            if (qosAdaptiveMinUpstream == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptiveMinUpstream");
            }
            this.qosAdaptiveMinUpstream = qosAdaptiveMinUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMinUpstreamVariable(String qosAdaptiveMinUpstreamVariable) {
            if (qosAdaptiveMinUpstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptiveMinUpstreamVariable");
            }
            this.qosAdaptiveMinUpstreamVariable = qosAdaptiveMinUpstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptivePeriod(Integer qosAdaptivePeriod) {
            if (qosAdaptivePeriod == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptivePeriod");
            }
            this.qosAdaptivePeriod = qosAdaptivePeriod;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptivePeriodVariable(String qosAdaptivePeriodVariable) {
            if (qosAdaptivePeriodVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosAdaptivePeriodVariable");
            }
            this.qosAdaptivePeriodVariable = qosAdaptivePeriodVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosMap(String qosMap) {
            if (qosMap == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosMap");
            }
            this.qosMap = qosMap;
            return this;
        }
        @CustomType.Setter
        public Builder qosMapVariable(String qosMapVariable) {
            if (qosMapVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosMapVariable");
            }
            this.qosMapVariable = qosMapVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosMapVpn(String qosMapVpn) {
            if (qosMapVpn == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosMapVpn");
            }
            this.qosMapVpn = qosMapVpn;
            return this;
        }
        @CustomType.Setter
        public Builder qosMapVpnVariable(String qosMapVpnVariable) {
            if (qosMapVpnVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "qosMapVpnVariable");
            }
            this.qosMapVpnVariable = qosMapVpnVariable;
            return this;
        }
        @CustomType.Setter
        public Builder shapingRate(Integer shapingRate) {
            if (shapingRate == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "shapingRate");
            }
            this.shapingRate = shapingRate;
            return this;
        }
        @CustomType.Setter
        public Builder shapingRateVariable(String shapingRateVariable) {
            if (shapingRateVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "shapingRateVariable");
            }
            this.shapingRateVariable = shapingRateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMss(Integer tcpMss) {
            if (tcpMss == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tcpMss");
            }
            this.tcpMss = tcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssVariable(String tcpMssVariable) {
            if (tcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tcpMssVariable");
            }
            this.tcpMssVariable = tcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder tlocExtension(String tlocExtension) {
            if (tlocExtension == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tlocExtension");
            }
            this.tlocExtension = tlocExtension;
            return this;
        }
        @CustomType.Setter
        public Builder tlocExtensionVariable(String tlocExtensionVariable) {
            if (tlocExtensionVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tlocExtensionVariable");
            }
            this.tlocExtensionVariable = tlocExtensionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackerVariable(String trackerVariable) {
            if (trackerVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "trackerVariable");
            }
            this.trackerVariable = trackerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackers(List<String> trackers) {
            if (trackers == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "trackers");
            }
            this.trackers = trackers;
            return this;
        }
        public Builder trackers(String... trackers) {
            return trackers(List.of(trackers));
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowAll(Boolean tunnelInterfaceAllowAll) {
            if (tunnelInterfaceAllowAll == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowAll");
            }
            this.tunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowAllVariable(String tunnelInterfaceAllowAllVariable) {
            if (tunnelInterfaceAllowAllVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowAllVariable");
            }
            this.tunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowBgp(Boolean tunnelInterfaceAllowBgp) {
            if (tunnelInterfaceAllowBgp == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowBgp");
            }
            this.tunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowBgpVariable(String tunnelInterfaceAllowBgpVariable) {
            if (tunnelInterfaceAllowBgpVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowBgpVariable");
            }
            this.tunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDhcp(Boolean tunnelInterfaceAllowDhcp) {
            if (tunnelInterfaceAllowDhcp == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowDhcp");
            }
            this.tunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDhcpVariable(String tunnelInterfaceAllowDhcpVariable) {
            if (tunnelInterfaceAllowDhcpVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowDhcpVariable");
            }
            this.tunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDns(Boolean tunnelInterfaceAllowDns) {
            if (tunnelInterfaceAllowDns == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowDns");
            }
            this.tunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDnsVariable(String tunnelInterfaceAllowDnsVariable) {
            if (tunnelInterfaceAllowDnsVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowDnsVariable");
            }
            this.tunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowHttps(Boolean tunnelInterfaceAllowHttps) {
            if (tunnelInterfaceAllowHttps == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowHttps");
            }
            this.tunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowHttpsVariable(String tunnelInterfaceAllowHttpsVariable) {
            if (tunnelInterfaceAllowHttpsVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowHttpsVariable");
            }
            this.tunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowIcmp(Boolean tunnelInterfaceAllowIcmp) {
            if (tunnelInterfaceAllowIcmp == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowIcmp");
            }
            this.tunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowIcmpVariable(String tunnelInterfaceAllowIcmpVariable) {
            if (tunnelInterfaceAllowIcmpVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowIcmpVariable");
            }
            this.tunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNetconf(Boolean tunnelInterfaceAllowNetconf) {
            if (tunnelInterfaceAllowNetconf == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowNetconf");
            }
            this.tunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNetconfVariable(String tunnelInterfaceAllowNetconfVariable) {
            if (tunnelInterfaceAllowNetconfVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowNetconfVariable");
            }
            this.tunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNtp(Boolean tunnelInterfaceAllowNtp) {
            if (tunnelInterfaceAllowNtp == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowNtp");
            }
            this.tunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNtpVariable(String tunnelInterfaceAllowNtpVariable) {
            if (tunnelInterfaceAllowNtpVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowNtpVariable");
            }
            this.tunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowOspf(Boolean tunnelInterfaceAllowOspf) {
            if (tunnelInterfaceAllowOspf == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowOspf");
            }
            this.tunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowOspfVariable(String tunnelInterfaceAllowOspfVariable) {
            if (tunnelInterfaceAllowOspfVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowOspfVariable");
            }
            this.tunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSnmp(Boolean tunnelInterfaceAllowSnmp) {
            if (tunnelInterfaceAllowSnmp == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowSnmp");
            }
            this.tunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSnmpVariable(String tunnelInterfaceAllowSnmpVariable) {
            if (tunnelInterfaceAllowSnmpVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowSnmpVariable");
            }
            this.tunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSsh(Boolean tunnelInterfaceAllowSsh) {
            if (tunnelInterfaceAllowSsh == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowSsh");
            }
            this.tunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSshVariable(String tunnelInterfaceAllowSshVariable) {
            if (tunnelInterfaceAllowSshVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowSshVariable");
            }
            this.tunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowStun(Boolean tunnelInterfaceAllowStun) {
            if (tunnelInterfaceAllowStun == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowStun");
            }
            this.tunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowStunVariable(String tunnelInterfaceAllowStunVariable) {
            if (tunnelInterfaceAllowStunVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceAllowStunVariable");
            }
            this.tunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBindLoopbackTunnel(String tunnelInterfaceBindLoopbackTunnel) {
            if (tunnelInterfaceBindLoopbackTunnel == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceBindLoopbackTunnel");
            }
            this.tunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBindLoopbackTunnelVariable(String tunnelInterfaceBindLoopbackTunnelVariable) {
            if (tunnelInterfaceBindLoopbackTunnelVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceBindLoopbackTunnelVariable");
            }
            this.tunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBorder(Boolean tunnelInterfaceBorder) {
            if (tunnelInterfaceBorder == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceBorder");
            }
            this.tunnelInterfaceBorder = tunnelInterfaceBorder;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBorderVariable(String tunnelInterfaceBorderVariable) {
            if (tunnelInterfaceBorderVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceBorderVariable");
            }
            this.tunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceCarrier(String tunnelInterfaceCarrier) {
            if (tunnelInterfaceCarrier == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceCarrier");
            }
            this.tunnelInterfaceCarrier = tunnelInterfaceCarrier;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceCarrierVariable(String tunnelInterfaceCarrierVariable) {
            if (tunnelInterfaceCarrierVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceCarrierVariable");
            }
            this.tunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceClearDontFragment(Boolean tunnelInterfaceClearDontFragment) {
            if (tunnelInterfaceClearDontFragment == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceClearDontFragment");
            }
            this.tunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceClearDontFragmentVariable(String tunnelInterfaceClearDontFragmentVariable) {
            if (tunnelInterfaceClearDontFragmentVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceClearDontFragmentVariable");
            }
            this.tunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColor(String tunnelInterfaceColor) {
            if (tunnelInterfaceColor == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceColor");
            }
            this.tunnelInterfaceColor = tunnelInterfaceColor;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColorRestrict(Boolean tunnelInterfaceColorRestrict) {
            if (tunnelInterfaceColorRestrict == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceColorRestrict");
            }
            this.tunnelInterfaceColorRestrict = tunnelInterfaceColorRestrict;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColorVariable(String tunnelInterfaceColorVariable) {
            if (tunnelInterfaceColorVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceColorVariable");
            }
            this.tunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceControlConnections(Boolean tunnelInterfaceControlConnections) {
            if (tunnelInterfaceControlConnections == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceControlConnections");
            }
            this.tunnelInterfaceControlConnections = tunnelInterfaceControlConnections;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceControlConnectionsVariable(String tunnelInterfaceControlConnectionsVariable) {
            if (tunnelInterfaceControlConnectionsVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceControlConnectionsVariable");
            }
            this.tunnelInterfaceControlConnectionsVariable = tunnelInterfaceControlConnectionsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceEncapsulations(List<GetVpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations) {
            if (tunnelInterfaceEncapsulations == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceEncapsulations");
            }
            this.tunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            return this;
        }
        public Builder tunnelInterfaceEncapsulations(GetVpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation... tunnelInterfaceEncapsulations) {
            return tunnelInterfaceEncapsulations(List.of(tunnelInterfaceEncapsulations));
        }
        @CustomType.Setter
        public Builder tunnelInterfaceExcludeControllerGroupListVariable(String tunnelInterfaceExcludeControllerGroupListVariable) {
            if (tunnelInterfaceExcludeControllerGroupListVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceExcludeControllerGroupListVariable");
            }
            this.tunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceExcludeControllerGroupLists(List<Integer> tunnelInterfaceExcludeControllerGroupLists) {
            if (tunnelInterfaceExcludeControllerGroupLists == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceExcludeControllerGroupLists");
            }
            this.tunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            return this;
        }
        public Builder tunnelInterfaceExcludeControllerGroupLists(Integer... tunnelInterfaceExcludeControllerGroupLists) {
            return tunnelInterfaceExcludeControllerGroupLists(List.of(tunnelInterfaceExcludeControllerGroupLists));
        }
        @CustomType.Setter
        public Builder tunnelInterfaceGroups(List<Integer> tunnelInterfaceGroups) {
            if (tunnelInterfaceGroups == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceGroups");
            }
            this.tunnelInterfaceGroups = tunnelInterfaceGroups;
            return this;
        }
        public Builder tunnelInterfaceGroups(Integer... tunnelInterfaceGroups) {
            return tunnelInterfaceGroups(List.of(tunnelInterfaceGroups));
        }
        @CustomType.Setter
        public Builder tunnelInterfaceGroupsVariable(String tunnelInterfaceGroupsVariable) {
            if (tunnelInterfaceGroupsVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceGroupsVariable");
            }
            this.tunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloInterval(Integer tunnelInterfaceHelloInterval) {
            if (tunnelInterfaceHelloInterval == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceHelloInterval");
            }
            this.tunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloIntervalVariable(String tunnelInterfaceHelloIntervalVariable) {
            if (tunnelInterfaceHelloIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceHelloIntervalVariable");
            }
            this.tunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloTolerance(Integer tunnelInterfaceHelloTolerance) {
            if (tunnelInterfaceHelloTolerance == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceHelloTolerance");
            }
            this.tunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloToleranceVariable(String tunnelInterfaceHelloToleranceVariable) {
            if (tunnelInterfaceHelloToleranceVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceHelloToleranceVariable");
            }
            this.tunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLastResortCircuit(Boolean tunnelInterfaceLastResortCircuit) {
            if (tunnelInterfaceLastResortCircuit == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceLastResortCircuit");
            }
            this.tunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLastResortCircuitVariable(String tunnelInterfaceLastResortCircuitVariable) {
            if (tunnelInterfaceLastResortCircuitVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceLastResortCircuitVariable");
            }
            this.tunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLowBandwidthLink(Boolean tunnelInterfaceLowBandwidthLink) {
            if (tunnelInterfaceLowBandwidthLink == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceLowBandwidthLink");
            }
            this.tunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLowBandwidthLinkVariable(String tunnelInterfaceLowBandwidthLinkVariable) {
            if (tunnelInterfaceLowBandwidthLinkVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceLowBandwidthLinkVariable");
            }
            this.tunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceMaxControlConnections(Integer tunnelInterfaceMaxControlConnections) {
            if (tunnelInterfaceMaxControlConnections == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceMaxControlConnections");
            }
            this.tunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceMaxControlConnectionsVariable(String tunnelInterfaceMaxControlConnectionsVariable) {
            if (tunnelInterfaceMaxControlConnectionsVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceMaxControlConnectionsVariable");
            }
            this.tunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNatRefreshInterval(Integer tunnelInterfaceNatRefreshInterval) {
            if (tunnelInterfaceNatRefreshInterval == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceNatRefreshInterval");
            }
            this.tunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNatRefreshIntervalVariable(String tunnelInterfaceNatRefreshIntervalVariable) {
            if (tunnelInterfaceNatRefreshIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceNatRefreshIntervalVariable");
            }
            this.tunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNetworkBroadcast(Boolean tunnelInterfaceNetworkBroadcast) {
            if (tunnelInterfaceNetworkBroadcast == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceNetworkBroadcast");
            }
            this.tunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNetworkBroadcastVariable(String tunnelInterfaceNetworkBroadcastVariable) {
            if (tunnelInterfaceNetworkBroadcastVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceNetworkBroadcastVariable");
            }
            this.tunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfacePortHop(Boolean tunnelInterfacePortHop) {
            if (tunnelInterfacePortHop == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfacePortHop");
            }
            this.tunnelInterfacePortHop = tunnelInterfacePortHop;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfacePortHopVariable(String tunnelInterfacePortHopVariable) {
            if (tunnelInterfacePortHopVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfacePortHopVariable");
            }
            this.tunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceTunnelTcpMss(Integer tunnelInterfaceTunnelTcpMss) {
            if (tunnelInterfaceTunnelTcpMss == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceTunnelTcpMss");
            }
            this.tunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceTunnelTcpMssVariable(String tunnelInterfaceTunnelTcpMssVariable) {
            if (tunnelInterfaceTunnelTcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceTunnelTcpMssVariable");
            }
            this.tunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVbondAsStunServer(Boolean tunnelInterfaceVbondAsStunServer) {
            if (tunnelInterfaceVbondAsStunServer == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceVbondAsStunServer");
            }
            this.tunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVbondAsStunServerVariable(String tunnelInterfaceVbondAsStunServerVariable) {
            if (tunnelInterfaceVbondAsStunServerVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceVbondAsStunServerVariable");
            }
            this.tunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVmanageConnectionPreference(Integer tunnelInterfaceVmanageConnectionPreference) {
            if (tunnelInterfaceVmanageConnectionPreference == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceVmanageConnectionPreference");
            }
            this.tunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVmanageConnectionPreferenceVariable(String tunnelInterfaceVmanageConnectionPreferenceVariable) {
            if (tunnelInterfaceVmanageConnectionPreferenceVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelInterfaceVmanageConnectionPreferenceVariable");
            }
            this.tunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelQosMode(String tunnelQosMode) {
            if (tunnelQosMode == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelQosMode");
            }
            this.tunnelQosMode = tunnelQosMode;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelQosModeVariable(String tunnelQosModeVariable) {
            if (tunnelQosModeVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "tunnelQosModeVariable");
            }
            this.tunnelQosModeVariable = tunnelQosModeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder unnumberedLoopbackInterface(String unnumberedLoopbackInterface) {
            if (unnumberedLoopbackInterface == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "unnumberedLoopbackInterface");
            }
            this.unnumberedLoopbackInterface = unnumberedLoopbackInterface;
            return this;
        }
        @CustomType.Setter
        public Builder unnumberedLoopbackInterfaceVariable(String unnumberedLoopbackInterfaceVariable) {
            if (unnumberedLoopbackInterfaceVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "unnumberedLoopbackInterfaceVariable");
            }
            this.unnumberedLoopbackInterfaceVariable = unnumberedLoopbackInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder vdslConfigurations(List<GetVpnInterfaceDslIpoeFeatureTemplateVdslConfiguration> vdslConfigurations) {
            if (vdslConfigurations == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "vdslConfigurations");
            }
            this.vdslConfigurations = vdslConfigurations;
            return this;
        }
        public Builder vdslConfigurations(GetVpnInterfaceDslIpoeFeatureTemplateVdslConfiguration... vdslConfigurations) {
            return vdslConfigurations(List.of(vdslConfigurations));
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder writeRule(String writeRule) {
            if (writeRule == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "writeRule");
            }
            this.writeRule = writeRule;
            return this;
        }
        @CustomType.Setter
        public Builder writeRuleVariable(String writeRuleVariable) {
            if (writeRuleVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslIpoeFeatureTemplateResult", "writeRuleVariable");
            }
            this.writeRuleVariable = writeRuleVariable;
            return this;
        }
        public GetVpnInterfaceDslIpoeFeatureTemplateResult build() {
            final var _resultValue = new GetVpnInterfaceDslIpoeFeatureTemplateResult();
            _resultValue.accessLists = accessLists;
            _resultValue.bandwidthDownstream = bandwidthDownstream;
            _resultValue.bandwidthDownstreamVariable = bandwidthDownstreamVariable;
            _resultValue.bandwidthUpstream = bandwidthUpstream;
            _resultValue.bandwidthUpstreamVariable = bandwidthUpstreamVariable;
            _resultValue.chapHostname = chapHostname;
            _resultValue.chapHostnameVariable = chapHostnameVariable;
            _resultValue.chapPppAuthPassword = chapPppAuthPassword;
            _resultValue.chapPppAuthPasswordVariable = chapPppAuthPasswordVariable;
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.dialerAddressNegotiated = dialerAddressNegotiated;
            _resultValue.dialerAddressNegotiatedVariable = dialerAddressNegotiatedVariable;
            _resultValue.dialerPoolNumber = dialerPoolNumber;
            _resultValue.dialerPoolNumberVariable = dialerPoolNumberVariable;
            _resultValue.encap = encap;
            _resultValue.encapVariable = encapVariable;
            _resultValue.ethernetDescription = ethernetDescription;
            _resultValue.ethernetDescriptionVariable = ethernetDescriptionVariable;
            _resultValue.ethernetDhcpDistance = ethernetDhcpDistance;
            _resultValue.ethernetDhcpDistanceVariable = ethernetDhcpDistanceVariable;
            _resultValue.ethernetDhcpHelperVariable = ethernetDhcpHelperVariable;
            _resultValue.ethernetDhcpHelpers = ethernetDhcpHelpers;
            _resultValue.ethernetEnableDhcp = ethernetEnableDhcp;
            _resultValue.ethernetEnableDhcpVariable = ethernetEnableDhcpVariable;
            _resultValue.ethernetInterfaceName = ethernetInterfaceName;
            _resultValue.ethernetInterfaceNameVariable = ethernetInterfaceNameVariable;
            _resultValue.ethernetIpv4Address = ethernetIpv4Address;
            _resultValue.ethernetIpv4AddressVariable = ethernetIpv4AddressVariable;
            _resultValue.id = id;
            _resultValue.internalControllerType = internalControllerType;
            _resultValue.ipDirectedBroadcast = ipDirectedBroadcast;
            _resultValue.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            _resultValue.ipMtu = ipMtu;
            _resultValue.ipMtuVariable = ipMtuVariable;
            _resultValue.name = name;
            _resultValue.nat = nat;
            _resultValue.natBlockIcmpError = natBlockIcmpError;
            _resultValue.natBlockIcmpErrorVariable = natBlockIcmpErrorVariable;
            _resultValue.natPortForwards = natPortForwards;
            _resultValue.natRefreshMode = natRefreshMode;
            _resultValue.natRefreshModeVariable = natRefreshModeVariable;
            _resultValue.natResponseToPing = natResponseToPing;
            _resultValue.natResponseToPingVariable = natResponseToPingVariable;
            _resultValue.natTcpTimeout = natTcpTimeout;
            _resultValue.natTcpTimeoutVariable = natTcpTimeoutVariable;
            _resultValue.natUdpTimeout = natUdpTimeout;
            _resultValue.natUdpTimeoutVariable = natUdpTimeoutVariable;
            _resultValue.papPassword = papPassword;
            _resultValue.papPppAuthPassword = papPppAuthPassword;
            _resultValue.papPppAuthPasswordVariable = papPppAuthPasswordVariable;
            _resultValue.papUsername = papUsername;
            _resultValue.papUsernameVariable = papUsernameVariable;
            _resultValue.perTunnelQos = perTunnelQos;
            _resultValue.perTunnelQosAggregator = perTunnelQosAggregator;
            _resultValue.perTunnelQosAggregatorVariable = perTunnelQosAggregatorVariable;
            _resultValue.perTunnelQosVariable = perTunnelQosVariable;
            _resultValue.policers = policers;
            _resultValue.pppAuthenticationProtocol = pppAuthenticationProtocol;
            _resultValue.pppAuthenticationProtocolPap = pppAuthenticationProtocolPap;
            _resultValue.pppAuthenticationProtocolVariable = pppAuthenticationProtocolVariable;
            _resultValue.pppMaximumPayload = pppMaximumPayload;
            _resultValue.pppMaximumPayloadVariable = pppMaximumPayloadVariable;
            _resultValue.qosAdaptiveBandwidthDownstream = qosAdaptiveBandwidthDownstream;
            _resultValue.qosAdaptiveBandwidthDownstreamVariable = qosAdaptiveBandwidthDownstreamVariable;
            _resultValue.qosAdaptiveBandwidthUpstream = qosAdaptiveBandwidthUpstream;
            _resultValue.qosAdaptiveBandwidthUpstreamVariable = qosAdaptiveBandwidthUpstreamVariable;
            _resultValue.qosAdaptiveMaxDownstream = qosAdaptiveMaxDownstream;
            _resultValue.qosAdaptiveMaxDownstreamVariable = qosAdaptiveMaxDownstreamVariable;
            _resultValue.qosAdaptiveMaxUpstream = qosAdaptiveMaxUpstream;
            _resultValue.qosAdaptiveMaxUpstreamVariable = qosAdaptiveMaxUpstreamVariable;
            _resultValue.qosAdaptiveMinDownstream = qosAdaptiveMinDownstream;
            _resultValue.qosAdaptiveMinDownstreamVariable = qosAdaptiveMinDownstreamVariable;
            _resultValue.qosAdaptiveMinUpstream = qosAdaptiveMinUpstream;
            _resultValue.qosAdaptiveMinUpstreamVariable = qosAdaptiveMinUpstreamVariable;
            _resultValue.qosAdaptivePeriod = qosAdaptivePeriod;
            _resultValue.qosAdaptivePeriodVariable = qosAdaptivePeriodVariable;
            _resultValue.qosMap = qosMap;
            _resultValue.qosMapVariable = qosMapVariable;
            _resultValue.qosMapVpn = qosMapVpn;
            _resultValue.qosMapVpnVariable = qosMapVpnVariable;
            _resultValue.shapingRate = shapingRate;
            _resultValue.shapingRateVariable = shapingRateVariable;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.tcpMss = tcpMss;
            _resultValue.tcpMssVariable = tcpMssVariable;
            _resultValue.templateType = templateType;
            _resultValue.tlocExtension = tlocExtension;
            _resultValue.tlocExtensionVariable = tlocExtensionVariable;
            _resultValue.trackerVariable = trackerVariable;
            _resultValue.trackers = trackers;
            _resultValue.tunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            _resultValue.tunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            _resultValue.tunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            _resultValue.tunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            _resultValue.tunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            _resultValue.tunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            _resultValue.tunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            _resultValue.tunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            _resultValue.tunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            _resultValue.tunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            _resultValue.tunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            _resultValue.tunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            _resultValue.tunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            _resultValue.tunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            _resultValue.tunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            _resultValue.tunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            _resultValue.tunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            _resultValue.tunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            _resultValue.tunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            _resultValue.tunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            _resultValue.tunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            _resultValue.tunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            _resultValue.tunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            _resultValue.tunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            _resultValue.tunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            _resultValue.tunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            _resultValue.tunnelInterfaceBorder = tunnelInterfaceBorder;
            _resultValue.tunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            _resultValue.tunnelInterfaceCarrier = tunnelInterfaceCarrier;
            _resultValue.tunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            _resultValue.tunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            _resultValue.tunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            _resultValue.tunnelInterfaceColor = tunnelInterfaceColor;
            _resultValue.tunnelInterfaceColorRestrict = tunnelInterfaceColorRestrict;
            _resultValue.tunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            _resultValue.tunnelInterfaceControlConnections = tunnelInterfaceControlConnections;
            _resultValue.tunnelInterfaceControlConnectionsVariable = tunnelInterfaceControlConnectionsVariable;
            _resultValue.tunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            _resultValue.tunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            _resultValue.tunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            _resultValue.tunnelInterfaceGroups = tunnelInterfaceGroups;
            _resultValue.tunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            _resultValue.tunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            _resultValue.tunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            _resultValue.tunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            _resultValue.tunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            _resultValue.tunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            _resultValue.tunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            _resultValue.tunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            _resultValue.tunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            _resultValue.tunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            _resultValue.tunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            _resultValue.tunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            _resultValue.tunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            _resultValue.tunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            _resultValue.tunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            _resultValue.tunnelInterfacePortHop = tunnelInterfacePortHop;
            _resultValue.tunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            _resultValue.tunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            _resultValue.tunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            _resultValue.tunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            _resultValue.tunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            _resultValue.tunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            _resultValue.tunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            _resultValue.tunnelQosMode = tunnelQosMode;
            _resultValue.tunnelQosModeVariable = tunnelQosModeVariable;
            _resultValue.unnumberedLoopbackInterface = unnumberedLoopbackInterface;
            _resultValue.unnumberedLoopbackInterfaceVariable = unnumberedLoopbackInterfaceVariable;
            _resultValue.vdslConfigurations = vdslConfigurations;
            _resultValue.version = version;
            _resultValue.writeRule = writeRule;
            _resultValue.writeRuleVariable = writeRuleVariable;
            return _resultValue;
        }
    }
}
