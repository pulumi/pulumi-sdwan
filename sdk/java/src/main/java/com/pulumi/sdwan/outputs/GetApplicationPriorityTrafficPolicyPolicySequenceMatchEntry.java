// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry {
    private String applicationListId;
    private String destinationDataIpv4PrefixListId;
    private String destinationDataIpv6PrefixListId;
    /**
     * @return Destination Data IP Prefix
     * 
     */
    private String destinationIpv4Prefix;
    /**
     * @return Destination Data IP Prefix
     * 
     */
    private String destinationIpv6Prefix;
    /**
     * @return Destination Port (0-65535) range or individual number separated by space
     * 
     */
    private List<String> destinationPorts;
    /**
     * @return Destination Region
     * 
     */
    private String destinationRegion;
    /**
     * @return Dns
     * 
     */
    private String dns;
    private String dnsApplicationListId;
    /**
     * @return DSCP number
     * 
     */
    private Integer dscp;
    /**
     * @return ICMP6 Message
     * 
     */
    private List<String> icmp6Messages;
    /**
     * @return ICMP Message
     * 
     */
    private List<String> icmpMessages;
    /**
     * @return Packet Length
     * 
     */
    private String packetLength;
    /**
     * @return protocol (0-255) range or individual number separated by space
     * 
     */
    private List<String> protocols;
    private String saasApplicationListId;
    /**
     * @return M365 Service Area
     * 
     */
    private List<String> serviceAreas;
    private String sourceDataIpv4PrefxListId;
    private String sourceDataIpv6PrefxListId;
    /**
     * @return Source Data IP Prefix
     * 
     */
    private String sourceIpv4Prefix;
    /**
     * @return Source Data IP Prefix
     * 
     */
    private String sourceIpv6Prefix;
    /**
     * @return Source Port (0-65535) range or individual number separated by space
     * 
     */
    private List<String> sourcePorts;
    /**
     * @return TCP States
     * 
     */
    private String tcp;
    /**
     * @return M365 Traffic Category
     * 
     */
    private String trafficCategory;
    /**
     * @return Traffic Class
     * 
     */
    private String trafficClass;
    /**
     * @return Traffic to
     * 
     */
    private String trafficTo;

    private GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry() {}
    public String applicationListId() {
        return this.applicationListId;
    }
    public String destinationDataIpv4PrefixListId() {
        return this.destinationDataIpv4PrefixListId;
    }
    public String destinationDataIpv6PrefixListId() {
        return this.destinationDataIpv6PrefixListId;
    }
    /**
     * @return Destination Data IP Prefix
     * 
     */
    public String destinationIpv4Prefix() {
        return this.destinationIpv4Prefix;
    }
    /**
     * @return Destination Data IP Prefix
     * 
     */
    public String destinationIpv6Prefix() {
        return this.destinationIpv6Prefix;
    }
    /**
     * @return Destination Port (0-65535) range or individual number separated by space
     * 
     */
    public List<String> destinationPorts() {
        return this.destinationPorts;
    }
    /**
     * @return Destination Region
     * 
     */
    public String destinationRegion() {
        return this.destinationRegion;
    }
    /**
     * @return Dns
     * 
     */
    public String dns() {
        return this.dns;
    }
    public String dnsApplicationListId() {
        return this.dnsApplicationListId;
    }
    /**
     * @return DSCP number
     * 
     */
    public Integer dscp() {
        return this.dscp;
    }
    /**
     * @return ICMP6 Message
     * 
     */
    public List<String> icmp6Messages() {
        return this.icmp6Messages;
    }
    /**
     * @return ICMP Message
     * 
     */
    public List<String> icmpMessages() {
        return this.icmpMessages;
    }
    /**
     * @return Packet Length
     * 
     */
    public String packetLength() {
        return this.packetLength;
    }
    /**
     * @return protocol (0-255) range or individual number separated by space
     * 
     */
    public List<String> protocols() {
        return this.protocols;
    }
    public String saasApplicationListId() {
        return this.saasApplicationListId;
    }
    /**
     * @return M365 Service Area
     * 
     */
    public List<String> serviceAreas() {
        return this.serviceAreas;
    }
    public String sourceDataIpv4PrefxListId() {
        return this.sourceDataIpv4PrefxListId;
    }
    public String sourceDataIpv6PrefxListId() {
        return this.sourceDataIpv6PrefxListId;
    }
    /**
     * @return Source Data IP Prefix
     * 
     */
    public String sourceIpv4Prefix() {
        return this.sourceIpv4Prefix;
    }
    /**
     * @return Source Data IP Prefix
     * 
     */
    public String sourceIpv6Prefix() {
        return this.sourceIpv6Prefix;
    }
    /**
     * @return Source Port (0-65535) range or individual number separated by space
     * 
     */
    public List<String> sourcePorts() {
        return this.sourcePorts;
    }
    /**
     * @return TCP States
     * 
     */
    public String tcp() {
        return this.tcp;
    }
    /**
     * @return M365 Traffic Category
     * 
     */
    public String trafficCategory() {
        return this.trafficCategory;
    }
    /**
     * @return Traffic Class
     * 
     */
    public String trafficClass() {
        return this.trafficClass;
    }
    /**
     * @return Traffic to
     * 
     */
    public String trafficTo() {
        return this.trafficTo;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationListId;
        private String destinationDataIpv4PrefixListId;
        private String destinationDataIpv6PrefixListId;
        private String destinationIpv4Prefix;
        private String destinationIpv6Prefix;
        private List<String> destinationPorts;
        private String destinationRegion;
        private String dns;
        private String dnsApplicationListId;
        private Integer dscp;
        private List<String> icmp6Messages;
        private List<String> icmpMessages;
        private String packetLength;
        private List<String> protocols;
        private String saasApplicationListId;
        private List<String> serviceAreas;
        private String sourceDataIpv4PrefxListId;
        private String sourceDataIpv6PrefxListId;
        private String sourceIpv4Prefix;
        private String sourceIpv6Prefix;
        private List<String> sourcePorts;
        private String tcp;
        private String trafficCategory;
        private String trafficClass;
        private String trafficTo;
        public Builder() {}
        public Builder(GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationListId = defaults.applicationListId;
    	      this.destinationDataIpv4PrefixListId = defaults.destinationDataIpv4PrefixListId;
    	      this.destinationDataIpv6PrefixListId = defaults.destinationDataIpv6PrefixListId;
    	      this.destinationIpv4Prefix = defaults.destinationIpv4Prefix;
    	      this.destinationIpv6Prefix = defaults.destinationIpv6Prefix;
    	      this.destinationPorts = defaults.destinationPorts;
    	      this.destinationRegion = defaults.destinationRegion;
    	      this.dns = defaults.dns;
    	      this.dnsApplicationListId = defaults.dnsApplicationListId;
    	      this.dscp = defaults.dscp;
    	      this.icmp6Messages = defaults.icmp6Messages;
    	      this.icmpMessages = defaults.icmpMessages;
    	      this.packetLength = defaults.packetLength;
    	      this.protocols = defaults.protocols;
    	      this.saasApplicationListId = defaults.saasApplicationListId;
    	      this.serviceAreas = defaults.serviceAreas;
    	      this.sourceDataIpv4PrefxListId = defaults.sourceDataIpv4PrefxListId;
    	      this.sourceDataIpv6PrefxListId = defaults.sourceDataIpv6PrefxListId;
    	      this.sourceIpv4Prefix = defaults.sourceIpv4Prefix;
    	      this.sourceIpv6Prefix = defaults.sourceIpv6Prefix;
    	      this.sourcePorts = defaults.sourcePorts;
    	      this.tcp = defaults.tcp;
    	      this.trafficCategory = defaults.trafficCategory;
    	      this.trafficClass = defaults.trafficClass;
    	      this.trafficTo = defaults.trafficTo;
        }

        @CustomType.Setter
        public Builder applicationListId(String applicationListId) {
            if (applicationListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "applicationListId");
            }
            this.applicationListId = applicationListId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataIpv4PrefixListId(String destinationDataIpv4PrefixListId) {
            if (destinationDataIpv4PrefixListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "destinationDataIpv4PrefixListId");
            }
            this.destinationDataIpv4PrefixListId = destinationDataIpv4PrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataIpv6PrefixListId(String destinationDataIpv6PrefixListId) {
            if (destinationDataIpv6PrefixListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "destinationDataIpv6PrefixListId");
            }
            this.destinationDataIpv6PrefixListId = destinationDataIpv6PrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationIpv4Prefix(String destinationIpv4Prefix) {
            if (destinationIpv4Prefix == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "destinationIpv4Prefix");
            }
            this.destinationIpv4Prefix = destinationIpv4Prefix;
            return this;
        }
        @CustomType.Setter
        public Builder destinationIpv6Prefix(String destinationIpv6Prefix) {
            if (destinationIpv6Prefix == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "destinationIpv6Prefix");
            }
            this.destinationIpv6Prefix = destinationIpv6Prefix;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPorts(List<String> destinationPorts) {
            if (destinationPorts == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "destinationPorts");
            }
            this.destinationPorts = destinationPorts;
            return this;
        }
        public Builder destinationPorts(String... destinationPorts) {
            return destinationPorts(List.of(destinationPorts));
        }
        @CustomType.Setter
        public Builder destinationRegion(String destinationRegion) {
            if (destinationRegion == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "destinationRegion");
            }
            this.destinationRegion = destinationRegion;
            return this;
        }
        @CustomType.Setter
        public Builder dns(String dns) {
            if (dns == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "dns");
            }
            this.dns = dns;
            return this;
        }
        @CustomType.Setter
        public Builder dnsApplicationListId(String dnsApplicationListId) {
            if (dnsApplicationListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "dnsApplicationListId");
            }
            this.dnsApplicationListId = dnsApplicationListId;
            return this;
        }
        @CustomType.Setter
        public Builder dscp(Integer dscp) {
            if (dscp == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "dscp");
            }
            this.dscp = dscp;
            return this;
        }
        @CustomType.Setter
        public Builder icmp6Messages(List<String> icmp6Messages) {
            if (icmp6Messages == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "icmp6Messages");
            }
            this.icmp6Messages = icmp6Messages;
            return this;
        }
        public Builder icmp6Messages(String... icmp6Messages) {
            return icmp6Messages(List.of(icmp6Messages));
        }
        @CustomType.Setter
        public Builder icmpMessages(List<String> icmpMessages) {
            if (icmpMessages == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "icmpMessages");
            }
            this.icmpMessages = icmpMessages;
            return this;
        }
        public Builder icmpMessages(String... icmpMessages) {
            return icmpMessages(List.of(icmpMessages));
        }
        @CustomType.Setter
        public Builder packetLength(String packetLength) {
            if (packetLength == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "packetLength");
            }
            this.packetLength = packetLength;
            return this;
        }
        @CustomType.Setter
        public Builder protocols(List<String> protocols) {
            if (protocols == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "protocols");
            }
            this.protocols = protocols;
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder saasApplicationListId(String saasApplicationListId) {
            if (saasApplicationListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "saasApplicationListId");
            }
            this.saasApplicationListId = saasApplicationListId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAreas(List<String> serviceAreas) {
            if (serviceAreas == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "serviceAreas");
            }
            this.serviceAreas = serviceAreas;
            return this;
        }
        public Builder serviceAreas(String... serviceAreas) {
            return serviceAreas(List.of(serviceAreas));
        }
        @CustomType.Setter
        public Builder sourceDataIpv4PrefxListId(String sourceDataIpv4PrefxListId) {
            if (sourceDataIpv4PrefxListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "sourceDataIpv4PrefxListId");
            }
            this.sourceDataIpv4PrefxListId = sourceDataIpv4PrefxListId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataIpv6PrefxListId(String sourceDataIpv6PrefxListId) {
            if (sourceDataIpv6PrefxListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "sourceDataIpv6PrefxListId");
            }
            this.sourceDataIpv6PrefxListId = sourceDataIpv6PrefxListId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpv4Prefix(String sourceIpv4Prefix) {
            if (sourceIpv4Prefix == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "sourceIpv4Prefix");
            }
            this.sourceIpv4Prefix = sourceIpv4Prefix;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpv6Prefix(String sourceIpv6Prefix) {
            if (sourceIpv6Prefix == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "sourceIpv6Prefix");
            }
            this.sourceIpv6Prefix = sourceIpv6Prefix;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePorts(List<String> sourcePorts) {
            if (sourcePorts == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "sourcePorts");
            }
            this.sourcePorts = sourcePorts;
            return this;
        }
        public Builder sourcePorts(String... sourcePorts) {
            return sourcePorts(List.of(sourcePorts));
        }
        @CustomType.Setter
        public Builder tcp(String tcp) {
            if (tcp == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "tcp");
            }
            this.tcp = tcp;
            return this;
        }
        @CustomType.Setter
        public Builder trafficCategory(String trafficCategory) {
            if (trafficCategory == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "trafficCategory");
            }
            this.trafficCategory = trafficCategory;
            return this;
        }
        @CustomType.Setter
        public Builder trafficClass(String trafficClass) {
            if (trafficClass == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "trafficClass");
            }
            this.trafficClass = trafficClass;
            return this;
        }
        @CustomType.Setter
        public Builder trafficTo(String trafficTo) {
            if (trafficTo == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry", "trafficTo");
            }
            this.trafficTo = trafficTo;
            return this;
        }
        public GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry build() {
            final var _resultValue = new GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry();
            _resultValue.applicationListId = applicationListId;
            _resultValue.destinationDataIpv4PrefixListId = destinationDataIpv4PrefixListId;
            _resultValue.destinationDataIpv6PrefixListId = destinationDataIpv6PrefixListId;
            _resultValue.destinationIpv4Prefix = destinationIpv4Prefix;
            _resultValue.destinationIpv6Prefix = destinationIpv6Prefix;
            _resultValue.destinationPorts = destinationPorts;
            _resultValue.destinationRegion = destinationRegion;
            _resultValue.dns = dns;
            _resultValue.dnsApplicationListId = dnsApplicationListId;
            _resultValue.dscp = dscp;
            _resultValue.icmp6Messages = icmp6Messages;
            _resultValue.icmpMessages = icmpMessages;
            _resultValue.packetLength = packetLength;
            _resultValue.protocols = protocols;
            _resultValue.saasApplicationListId = saasApplicationListId;
            _resultValue.serviceAreas = serviceAreas;
            _resultValue.sourceDataIpv4PrefxListId = sourceDataIpv4PrefxListId;
            _resultValue.sourceDataIpv6PrefxListId = sourceDataIpv6PrefxListId;
            _resultValue.sourceIpv4Prefix = sourceIpv4Prefix;
            _resultValue.sourceIpv6Prefix = sourceIpv6Prefix;
            _resultValue.sourcePorts = sourcePorts;
            _resultValue.tcp = tcp;
            _resultValue.trafficCategory = trafficCategory;
            _resultValue.trafficClass = trafficClass;
            _resultValue.trafficTo = trafficTo;
            return _resultValue;
        }
    }
}
