// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetServiceMulticastFeatureAutoRpAnnounce;
import com.pulumi.sdwan.outputs.GetServiceMulticastFeatureAutoRpDiscovery;
import com.pulumi.sdwan.outputs.GetServiceMulticastFeatureIgmpInterface;
import com.pulumi.sdwan.outputs.GetServiceMulticastFeatureMsdpGroup;
import com.pulumi.sdwan.outputs.GetServiceMulticastFeaturePimBsrCandidate;
import com.pulumi.sdwan.outputs.GetServiceMulticastFeaturePimBsrRpCandidate;
import com.pulumi.sdwan.outputs.GetServiceMulticastFeaturePimInterface;
import com.pulumi.sdwan.outputs.GetServiceMulticastFeatureStaticRpAddress;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceMulticastFeatureResult {
    /**
     * @return Enable or disable RP Announce
     * 
     */
    private List<GetServiceMulticastFeatureAutoRpAnnounce> autoRpAnnounces;
    /**
     * @return Enable or disable RP Discovery
     * 
     */
    private List<GetServiceMulticastFeatureAutoRpDiscovery> autoRpDiscoveries;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Enable or disable auto-RP
     * 
     */
    private Boolean enableAutoRp;
    /**
     * @return Variable name
     * 
     */
    private String enableAutoRpVariable;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return Set IGMP interface parameters
     * 
     */
    private List<GetServiceMulticastFeatureIgmpInterface> igmpInterfaces;
    /**
     * @return Replicator is local to this device
     * 
     */
    private Boolean localReplicator;
    /**
     * @return Set number of joins per group the router supports
     * 
     */
    private Integer localReplicatorThreshold;
    /**
     * @return Variable name
     * 
     */
    private String localReplicatorThresholdVariable;
    /**
     * @return Variable name
     * 
     */
    private String localReplicatorVariable;
    /**
     * @return Set MSDP refresh timer
     * 
     */
    private Integer msdpConnectionRetryInterval;
    /**
     * @return Variable name
     * 
     */
    private String msdpConnectionRetryIntervalVariable;
    /**
     * @return multicast MSDP peer
     * 
     */
    private List<GetServiceMulticastFeatureMsdpGroup> msdpGroups;
    /**
     * @return Set MSDP originator ID
     * 
     */
    private String msdpOriginatorId;
    /**
     * @return Variable name
     * 
     */
    private String msdpOriginatorIdVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return bsr candidate Attributes
     * 
     */
    private List<GetServiceMulticastFeaturePimBsrCandidate> pimBsrCandidates;
    /**
     * @return Set RP Discovery Scope
     * 
     */
    private List<GetServiceMulticastFeaturePimBsrRpCandidate> pimBsrRpCandidates;
    /**
     * @return Set PIM interface parameters
     * 
     */
    private List<GetServiceMulticastFeaturePimInterface> pimInterfaces;
    /**
     * @return Set Access List for PIM SSM
     * 
     */
    private String pimSourceSpecificMulticastAccessList;
    /**
     * @return Variable name
     * 
     */
    private String pimSourceSpecificMulticastAccessListVariable;
    /**
     * @return turn SSM on/off
     * 
     */
    private Boolean pimSourceSpecificMulticastEnable;
    /**
     * @return Set when PIM router joins the SPT (kbps)
     * 
     */
    private String pimSptThreshold;
    /**
     * @return Variable name
     * 
     */
    private String pimSptThresholdVariable;
    /**
     * @return Shortest Path Tree (SPT) Only Mode
     * 
     */
    private Boolean sptOnly;
    /**
     * @return Variable name
     * 
     */
    private String sptOnlyVariable;
    /**
     * @return Set Static RP Address(es)
     * 
     */
    private List<GetServiceMulticastFeatureStaticRpAddress> staticRpAddresses;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetServiceMulticastFeatureResult() {}
    /**
     * @return Enable or disable RP Announce
     * 
     */
    public List<GetServiceMulticastFeatureAutoRpAnnounce> autoRpAnnounces() {
        return this.autoRpAnnounces;
    }
    /**
     * @return Enable or disable RP Discovery
     * 
     */
    public List<GetServiceMulticastFeatureAutoRpDiscovery> autoRpDiscoveries() {
        return this.autoRpDiscoveries;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Enable or disable auto-RP
     * 
     */
    public Boolean enableAutoRp() {
        return this.enableAutoRp;
    }
    /**
     * @return Variable name
     * 
     */
    public String enableAutoRpVariable() {
        return this.enableAutoRpVariable;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set IGMP interface parameters
     * 
     */
    public List<GetServiceMulticastFeatureIgmpInterface> igmpInterfaces() {
        return this.igmpInterfaces;
    }
    /**
     * @return Replicator is local to this device
     * 
     */
    public Boolean localReplicator() {
        return this.localReplicator;
    }
    /**
     * @return Set number of joins per group the router supports
     * 
     */
    public Integer localReplicatorThreshold() {
        return this.localReplicatorThreshold;
    }
    /**
     * @return Variable name
     * 
     */
    public String localReplicatorThresholdVariable() {
        return this.localReplicatorThresholdVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String localReplicatorVariable() {
        return this.localReplicatorVariable;
    }
    /**
     * @return Set MSDP refresh timer
     * 
     */
    public Integer msdpConnectionRetryInterval() {
        return this.msdpConnectionRetryInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String msdpConnectionRetryIntervalVariable() {
        return this.msdpConnectionRetryIntervalVariable;
    }
    /**
     * @return multicast MSDP peer
     * 
     */
    public List<GetServiceMulticastFeatureMsdpGroup> msdpGroups() {
        return this.msdpGroups;
    }
    /**
     * @return Set MSDP originator ID
     * 
     */
    public String msdpOriginatorId() {
        return this.msdpOriginatorId;
    }
    /**
     * @return Variable name
     * 
     */
    public String msdpOriginatorIdVariable() {
        return this.msdpOriginatorIdVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return bsr candidate Attributes
     * 
     */
    public List<GetServiceMulticastFeaturePimBsrCandidate> pimBsrCandidates() {
        return this.pimBsrCandidates;
    }
    /**
     * @return Set RP Discovery Scope
     * 
     */
    public List<GetServiceMulticastFeaturePimBsrRpCandidate> pimBsrRpCandidates() {
        return this.pimBsrRpCandidates;
    }
    /**
     * @return Set PIM interface parameters
     * 
     */
    public List<GetServiceMulticastFeaturePimInterface> pimInterfaces() {
        return this.pimInterfaces;
    }
    /**
     * @return Set Access List for PIM SSM
     * 
     */
    public String pimSourceSpecificMulticastAccessList() {
        return this.pimSourceSpecificMulticastAccessList;
    }
    /**
     * @return Variable name
     * 
     */
    public String pimSourceSpecificMulticastAccessListVariable() {
        return this.pimSourceSpecificMulticastAccessListVariable;
    }
    /**
     * @return turn SSM on/off
     * 
     */
    public Boolean pimSourceSpecificMulticastEnable() {
        return this.pimSourceSpecificMulticastEnable;
    }
    /**
     * @return Set when PIM router joins the SPT (kbps)
     * 
     */
    public String pimSptThreshold() {
        return this.pimSptThreshold;
    }
    /**
     * @return Variable name
     * 
     */
    public String pimSptThresholdVariable() {
        return this.pimSptThresholdVariable;
    }
    /**
     * @return Shortest Path Tree (SPT) Only Mode
     * 
     */
    public Boolean sptOnly() {
        return this.sptOnly;
    }
    /**
     * @return Variable name
     * 
     */
    public String sptOnlyVariable() {
        return this.sptOnlyVariable;
    }
    /**
     * @return Set Static RP Address(es)
     * 
     */
    public List<GetServiceMulticastFeatureStaticRpAddress> staticRpAddresses() {
        return this.staticRpAddresses;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceMulticastFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetServiceMulticastFeatureAutoRpAnnounce> autoRpAnnounces;
        private List<GetServiceMulticastFeatureAutoRpDiscovery> autoRpDiscoveries;
        private String description;
        private Boolean enableAutoRp;
        private String enableAutoRpVariable;
        private String featureProfileId;
        private String id;
        private List<GetServiceMulticastFeatureIgmpInterface> igmpInterfaces;
        private Boolean localReplicator;
        private Integer localReplicatorThreshold;
        private String localReplicatorThresholdVariable;
        private String localReplicatorVariable;
        private Integer msdpConnectionRetryInterval;
        private String msdpConnectionRetryIntervalVariable;
        private List<GetServiceMulticastFeatureMsdpGroup> msdpGroups;
        private String msdpOriginatorId;
        private String msdpOriginatorIdVariable;
        private String name;
        private List<GetServiceMulticastFeaturePimBsrCandidate> pimBsrCandidates;
        private List<GetServiceMulticastFeaturePimBsrRpCandidate> pimBsrRpCandidates;
        private List<GetServiceMulticastFeaturePimInterface> pimInterfaces;
        private String pimSourceSpecificMulticastAccessList;
        private String pimSourceSpecificMulticastAccessListVariable;
        private Boolean pimSourceSpecificMulticastEnable;
        private String pimSptThreshold;
        private String pimSptThresholdVariable;
        private Boolean sptOnly;
        private String sptOnlyVariable;
        private List<GetServiceMulticastFeatureStaticRpAddress> staticRpAddresses;
        private Integer version;
        public Builder() {}
        public Builder(GetServiceMulticastFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoRpAnnounces = defaults.autoRpAnnounces;
    	      this.autoRpDiscoveries = defaults.autoRpDiscoveries;
    	      this.description = defaults.description;
    	      this.enableAutoRp = defaults.enableAutoRp;
    	      this.enableAutoRpVariable = defaults.enableAutoRpVariable;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.igmpInterfaces = defaults.igmpInterfaces;
    	      this.localReplicator = defaults.localReplicator;
    	      this.localReplicatorThreshold = defaults.localReplicatorThreshold;
    	      this.localReplicatorThresholdVariable = defaults.localReplicatorThresholdVariable;
    	      this.localReplicatorVariable = defaults.localReplicatorVariable;
    	      this.msdpConnectionRetryInterval = defaults.msdpConnectionRetryInterval;
    	      this.msdpConnectionRetryIntervalVariable = defaults.msdpConnectionRetryIntervalVariable;
    	      this.msdpGroups = defaults.msdpGroups;
    	      this.msdpOriginatorId = defaults.msdpOriginatorId;
    	      this.msdpOriginatorIdVariable = defaults.msdpOriginatorIdVariable;
    	      this.name = defaults.name;
    	      this.pimBsrCandidates = defaults.pimBsrCandidates;
    	      this.pimBsrRpCandidates = defaults.pimBsrRpCandidates;
    	      this.pimInterfaces = defaults.pimInterfaces;
    	      this.pimSourceSpecificMulticastAccessList = defaults.pimSourceSpecificMulticastAccessList;
    	      this.pimSourceSpecificMulticastAccessListVariable = defaults.pimSourceSpecificMulticastAccessListVariable;
    	      this.pimSourceSpecificMulticastEnable = defaults.pimSourceSpecificMulticastEnable;
    	      this.pimSptThreshold = defaults.pimSptThreshold;
    	      this.pimSptThresholdVariable = defaults.pimSptThresholdVariable;
    	      this.sptOnly = defaults.sptOnly;
    	      this.sptOnlyVariable = defaults.sptOnlyVariable;
    	      this.staticRpAddresses = defaults.staticRpAddresses;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder autoRpAnnounces(List<GetServiceMulticastFeatureAutoRpAnnounce> autoRpAnnounces) {
            if (autoRpAnnounces == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "autoRpAnnounces");
            }
            this.autoRpAnnounces = autoRpAnnounces;
            return this;
        }
        public Builder autoRpAnnounces(GetServiceMulticastFeatureAutoRpAnnounce... autoRpAnnounces) {
            return autoRpAnnounces(List.of(autoRpAnnounces));
        }
        @CustomType.Setter
        public Builder autoRpDiscoveries(List<GetServiceMulticastFeatureAutoRpDiscovery> autoRpDiscoveries) {
            if (autoRpDiscoveries == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "autoRpDiscoveries");
            }
            this.autoRpDiscoveries = autoRpDiscoveries;
            return this;
        }
        public Builder autoRpDiscoveries(GetServiceMulticastFeatureAutoRpDiscovery... autoRpDiscoveries) {
            return autoRpDiscoveries(List.of(autoRpDiscoveries));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enableAutoRp(Boolean enableAutoRp) {
            if (enableAutoRp == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "enableAutoRp");
            }
            this.enableAutoRp = enableAutoRp;
            return this;
        }
        @CustomType.Setter
        public Builder enableAutoRpVariable(String enableAutoRpVariable) {
            if (enableAutoRpVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "enableAutoRpVariable");
            }
            this.enableAutoRpVariable = enableAutoRpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder igmpInterfaces(List<GetServiceMulticastFeatureIgmpInterface> igmpInterfaces) {
            if (igmpInterfaces == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "igmpInterfaces");
            }
            this.igmpInterfaces = igmpInterfaces;
            return this;
        }
        public Builder igmpInterfaces(GetServiceMulticastFeatureIgmpInterface... igmpInterfaces) {
            return igmpInterfaces(List.of(igmpInterfaces));
        }
        @CustomType.Setter
        public Builder localReplicator(Boolean localReplicator) {
            if (localReplicator == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "localReplicator");
            }
            this.localReplicator = localReplicator;
            return this;
        }
        @CustomType.Setter
        public Builder localReplicatorThreshold(Integer localReplicatorThreshold) {
            if (localReplicatorThreshold == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "localReplicatorThreshold");
            }
            this.localReplicatorThreshold = localReplicatorThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder localReplicatorThresholdVariable(String localReplicatorThresholdVariable) {
            if (localReplicatorThresholdVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "localReplicatorThresholdVariable");
            }
            this.localReplicatorThresholdVariable = localReplicatorThresholdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder localReplicatorVariable(String localReplicatorVariable) {
            if (localReplicatorVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "localReplicatorVariable");
            }
            this.localReplicatorVariable = localReplicatorVariable;
            return this;
        }
        @CustomType.Setter
        public Builder msdpConnectionRetryInterval(Integer msdpConnectionRetryInterval) {
            if (msdpConnectionRetryInterval == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "msdpConnectionRetryInterval");
            }
            this.msdpConnectionRetryInterval = msdpConnectionRetryInterval;
            return this;
        }
        @CustomType.Setter
        public Builder msdpConnectionRetryIntervalVariable(String msdpConnectionRetryIntervalVariable) {
            if (msdpConnectionRetryIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "msdpConnectionRetryIntervalVariable");
            }
            this.msdpConnectionRetryIntervalVariable = msdpConnectionRetryIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder msdpGroups(List<GetServiceMulticastFeatureMsdpGroup> msdpGroups) {
            if (msdpGroups == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "msdpGroups");
            }
            this.msdpGroups = msdpGroups;
            return this;
        }
        public Builder msdpGroups(GetServiceMulticastFeatureMsdpGroup... msdpGroups) {
            return msdpGroups(List.of(msdpGroups));
        }
        @CustomType.Setter
        public Builder msdpOriginatorId(String msdpOriginatorId) {
            if (msdpOriginatorId == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "msdpOriginatorId");
            }
            this.msdpOriginatorId = msdpOriginatorId;
            return this;
        }
        @CustomType.Setter
        public Builder msdpOriginatorIdVariable(String msdpOriginatorIdVariable) {
            if (msdpOriginatorIdVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "msdpOriginatorIdVariable");
            }
            this.msdpOriginatorIdVariable = msdpOriginatorIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pimBsrCandidates(List<GetServiceMulticastFeaturePimBsrCandidate> pimBsrCandidates) {
            if (pimBsrCandidates == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "pimBsrCandidates");
            }
            this.pimBsrCandidates = pimBsrCandidates;
            return this;
        }
        public Builder pimBsrCandidates(GetServiceMulticastFeaturePimBsrCandidate... pimBsrCandidates) {
            return pimBsrCandidates(List.of(pimBsrCandidates));
        }
        @CustomType.Setter
        public Builder pimBsrRpCandidates(List<GetServiceMulticastFeaturePimBsrRpCandidate> pimBsrRpCandidates) {
            if (pimBsrRpCandidates == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "pimBsrRpCandidates");
            }
            this.pimBsrRpCandidates = pimBsrRpCandidates;
            return this;
        }
        public Builder pimBsrRpCandidates(GetServiceMulticastFeaturePimBsrRpCandidate... pimBsrRpCandidates) {
            return pimBsrRpCandidates(List.of(pimBsrRpCandidates));
        }
        @CustomType.Setter
        public Builder pimInterfaces(List<GetServiceMulticastFeaturePimInterface> pimInterfaces) {
            if (pimInterfaces == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "pimInterfaces");
            }
            this.pimInterfaces = pimInterfaces;
            return this;
        }
        public Builder pimInterfaces(GetServiceMulticastFeaturePimInterface... pimInterfaces) {
            return pimInterfaces(List.of(pimInterfaces));
        }
        @CustomType.Setter
        public Builder pimSourceSpecificMulticastAccessList(String pimSourceSpecificMulticastAccessList) {
            if (pimSourceSpecificMulticastAccessList == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "pimSourceSpecificMulticastAccessList");
            }
            this.pimSourceSpecificMulticastAccessList = pimSourceSpecificMulticastAccessList;
            return this;
        }
        @CustomType.Setter
        public Builder pimSourceSpecificMulticastAccessListVariable(String pimSourceSpecificMulticastAccessListVariable) {
            if (pimSourceSpecificMulticastAccessListVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "pimSourceSpecificMulticastAccessListVariable");
            }
            this.pimSourceSpecificMulticastAccessListVariable = pimSourceSpecificMulticastAccessListVariable;
            return this;
        }
        @CustomType.Setter
        public Builder pimSourceSpecificMulticastEnable(Boolean pimSourceSpecificMulticastEnable) {
            if (pimSourceSpecificMulticastEnable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "pimSourceSpecificMulticastEnable");
            }
            this.pimSourceSpecificMulticastEnable = pimSourceSpecificMulticastEnable;
            return this;
        }
        @CustomType.Setter
        public Builder pimSptThreshold(String pimSptThreshold) {
            if (pimSptThreshold == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "pimSptThreshold");
            }
            this.pimSptThreshold = pimSptThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder pimSptThresholdVariable(String pimSptThresholdVariable) {
            if (pimSptThresholdVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "pimSptThresholdVariable");
            }
            this.pimSptThresholdVariable = pimSptThresholdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sptOnly(Boolean sptOnly) {
            if (sptOnly == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "sptOnly");
            }
            this.sptOnly = sptOnly;
            return this;
        }
        @CustomType.Setter
        public Builder sptOnlyVariable(String sptOnlyVariable) {
            if (sptOnlyVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "sptOnlyVariable");
            }
            this.sptOnlyVariable = sptOnlyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder staticRpAddresses(List<GetServiceMulticastFeatureStaticRpAddress> staticRpAddresses) {
            if (staticRpAddresses == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "staticRpAddresses");
            }
            this.staticRpAddresses = staticRpAddresses;
            return this;
        }
        public Builder staticRpAddresses(GetServiceMulticastFeatureStaticRpAddress... staticRpAddresses) {
            return staticRpAddresses(List.of(staticRpAddresses));
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetServiceMulticastFeatureResult build() {
            final var _resultValue = new GetServiceMulticastFeatureResult();
            _resultValue.autoRpAnnounces = autoRpAnnounces;
            _resultValue.autoRpDiscoveries = autoRpDiscoveries;
            _resultValue.description = description;
            _resultValue.enableAutoRp = enableAutoRp;
            _resultValue.enableAutoRpVariable = enableAutoRpVariable;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.igmpInterfaces = igmpInterfaces;
            _resultValue.localReplicator = localReplicator;
            _resultValue.localReplicatorThreshold = localReplicatorThreshold;
            _resultValue.localReplicatorThresholdVariable = localReplicatorThresholdVariable;
            _resultValue.localReplicatorVariable = localReplicatorVariable;
            _resultValue.msdpConnectionRetryInterval = msdpConnectionRetryInterval;
            _resultValue.msdpConnectionRetryIntervalVariable = msdpConnectionRetryIntervalVariable;
            _resultValue.msdpGroups = msdpGroups;
            _resultValue.msdpOriginatorId = msdpOriginatorId;
            _resultValue.msdpOriginatorIdVariable = msdpOriginatorIdVariable;
            _resultValue.name = name;
            _resultValue.pimBsrCandidates = pimBsrCandidates;
            _resultValue.pimBsrRpCandidates = pimBsrRpCandidates;
            _resultValue.pimInterfaces = pimInterfaces;
            _resultValue.pimSourceSpecificMulticastAccessList = pimSourceSpecificMulticastAccessList;
            _resultValue.pimSourceSpecificMulticastAccessListVariable = pimSourceSpecificMulticastAccessListVariable;
            _resultValue.pimSourceSpecificMulticastEnable = pimSourceSpecificMulticastEnable;
            _resultValue.pimSptThreshold = pimSptThreshold;
            _resultValue.pimSptThresholdVariable = pimSptThresholdVariable;
            _resultValue.sptOnly = sptOnly;
            _resultValue.sptOnlyVariable = sptOnlyVariable;
            _resultValue.staticRpAddresses = staticRpAddresses;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
