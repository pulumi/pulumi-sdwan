// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs Empty = new CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs();

    /**
     * Carrier, Attribute conditional on `type` being equal to `carrier`
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     * 
     */
    @Import(name="carrier")
    private @Nullable Output<String> carrier;

    /**
     * @return Carrier, Attribute conditional on `type` being equal to `carrier`
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     * 
     */
    public Optional<Output<String>> carrier() {
        return Optional.ofNullable(this.carrier);
    }

    /**
     * Color list ID, Attribute conditional on `type` being equal to `colorList`
     * 
     */
    @Import(name="colorListId")
    private @Nullable Output<String> colorListId;

    /**
     * @return Color list ID, Attribute conditional on `type` being equal to `colorList`
     * 
     */
    public Optional<Output<String>> colorListId() {
        return Optional.ofNullable(this.colorListId);
    }

    /**
     * Color list version
     * 
     */
    @Import(name="colorListVersion")
    private @Nullable Output<Integer> colorListVersion;

    /**
     * @return Color list version
     * 
     */
    public Optional<Output<Integer>> colorListVersion() {
        return Optional.ofNullable(this.colorListVersion);
    }

    /**
     * Community list ID, Attribute conditional on `type` being equal to `community`
     * 
     */
    @Import(name="communityListId")
    private @Nullable Output<String> communityListId;

    /**
     * @return Community list ID, Attribute conditional on `type` being equal to `community`
     * 
     */
    public Optional<Output<String>> communityListId() {
        return Optional.ofNullable(this.communityListId);
    }

    /**
     * Community list version
     * 
     */
    @Import(name="communityListVersion")
    private @Nullable Output<Integer> communityListVersion;

    /**
     * @return Community list version
     * 
     */
    public Optional<Output<Integer>> communityListVersion() {
        return Optional.ofNullable(this.communityListVersion);
    }

    /**
     * Domain ID, Attribute conditional on `type` being equal to `domainId`
     *   - Range: `0`-`4294967295`
     * 
     */
    @Import(name="domainId")
    private @Nullable Output<Integer> domainId;

    /**
     * @return Domain ID, Attribute conditional on `type` being equal to `domainId`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> domainId() {
        return Optional.ofNullable(this.domainId);
    }

    /**
     * Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
     * 
     */
    @Import(name="expandedCommunityListId")
    private @Nullable Output<String> expandedCommunityListId;

    /**
     * @return Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
     * 
     */
    public Optional<Output<String>> expandedCommunityListId() {
        return Optional.ofNullable(this.expandedCommunityListId);
    }

    /**
     * Expanded community list version
     * 
     */
    @Import(name="expandedCommunityListVersion")
    private @Nullable Output<Integer> expandedCommunityListVersion;

    /**
     * @return Expanded community list version
     * 
     */
    public Optional<Output<Integer>> expandedCommunityListVersion() {
        return Optional.ofNullable(this.expandedCommunityListVersion);
    }

    /**
     * Group ID, Attribute conditional on `type` being equal to `groupId`
     *   - Range: `0`-`4294967295`
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<Integer> groupId;

    /**
     * @return Group ID, Attribute conditional on `type` being equal to `groupId`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * OMP tag, Attribute conditional on `type` being equal to `ompTag`
     *   - Range: `0`-`4294967295`
     * 
     */
    @Import(name="ompTag")
    private @Nullable Output<Integer> ompTag;

    /**
     * @return OMP tag, Attribute conditional on `type` being equal to `ompTag`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> ompTag() {
        return Optional.ofNullable(this.ompTag);
    }

    /**
     * Origin, Attribute conditional on `type` being equal to `origin`
     *   - Choices: `igp`, `egp`, `incomplete`, `aggregrate`, `bgp`, `bgp-external`, `bgp-internal`, `connected`, `eigrp`, `ospf`, `ospf-inter-area`, `ospf-intra-area`, `ospf-external1`, `ospf-external2`, `rip`, `static`, `eigrp-summary`, `eigrp-internal`, `eigrp-external`, `lisp`, `nat-dia`, `natpool`, `isis`, `isis-level1`, `isis-level2`
     * 
     */
    @Import(name="origin")
    private @Nullable Output<String> origin;

    /**
     * @return Origin, Attribute conditional on `type` being equal to `origin`
     *   - Choices: `igp`, `egp`, `incomplete`, `aggregrate`, `bgp`, `bgp-external`, `bgp-internal`, `connected`, `eigrp`, `ospf`, `ospf-inter-area`, `ospf-intra-area`, `ospf-external1`, `ospf-external2`, `rip`, `static`, `eigrp-summary`, `eigrp-internal`, `eigrp-external`, `lisp`, `nat-dia`, `natpool`, `isis`, `isis-level1`, `isis-level2`
     * 
     */
    public Optional<Output<String>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * Originator IP, Attribute conditional on `type` being equal to `originator`
     * 
     */
    @Import(name="originator")
    private @Nullable Output<String> originator;

    /**
     * @return Originator IP, Attribute conditional on `type` being equal to `originator`
     * 
     */
    public Optional<Output<String>> originator() {
        return Optional.ofNullable(this.originator);
    }

    /**
     * Path type, Attribute conditional on `type` being equal to `pathType`
     *   - Choices: `hierarchical-path`, `direct-path`, `transport-gateway-path`
     * 
     */
    @Import(name="pathType")
    private @Nullable Output<String> pathType;

    /**
     * @return Path type, Attribute conditional on `type` being equal to `pathType`
     *   - Choices: `hierarchical-path`, `direct-path`, `transport-gateway-path`
     * 
     */
    public Optional<Output<String>> pathType() {
        return Optional.ofNullable(this.pathType);
    }

    /**
     * Preference, Attribute conditional on `type` being equal to `preference`
     *   - Range: `0`-`4294967295`
     * 
     */
    @Import(name="preference")
    private @Nullable Output<Integer> preference;

    /**
     * @return Preference, Attribute conditional on `type` being equal to `preference`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> preference() {
        return Optional.ofNullable(this.preference);
    }

    /**
     * Prefix list ID, Attribute conditional on `type` being equal to `prefixList`
     * 
     */
    @Import(name="prefixListId")
    private @Nullable Output<String> prefixListId;

    /**
     * @return Prefix list ID, Attribute conditional on `type` being equal to `prefixList`
     * 
     */
    public Optional<Output<String>> prefixListId() {
        return Optional.ofNullable(this.prefixListId);
    }

    /**
     * Prefix list version
     * 
     */
    @Import(name="prefixListVersion")
    private @Nullable Output<Integer> prefixListVersion;

    /**
     * @return Prefix list version
     * 
     */
    public Optional<Output<Integer>> prefixListVersion() {
        return Optional.ofNullable(this.prefixListVersion);
    }

    /**
     * Site ID, Attribute conditional on `type` being equal to `siteId`
     *   - Range: `0`-`4294967295`
     * 
     */
    @Import(name="siteId")
    private @Nullable Output<Integer> siteId;

    /**
     * @return Site ID, Attribute conditional on `type` being equal to `siteId`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    /**
     * Site list ID, Attribute conditional on `type` being equal to `siteList`
     * 
     */
    @Import(name="siteListId")
    private @Nullable Output<String> siteListId;

    /**
     * @return Site list ID, Attribute conditional on `type` being equal to `siteList`
     * 
     */
    public Optional<Output<String>> siteListId() {
        return Optional.ofNullable(this.siteListId);
    }

    /**
     * Site list version
     * 
     */
    @Import(name="siteListVersion")
    private @Nullable Output<Integer> siteListVersion;

    /**
     * @return Site list version
     * 
     */
    public Optional<Output<Integer>> siteListVersion() {
        return Optional.ofNullable(this.siteListVersion);
    }

    /**
     * TLOC color, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    @Import(name="tlocColor")
    private @Nullable Output<String> tlocColor;

    /**
     * @return TLOC color, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    public Optional<Output<String>> tlocColor() {
        return Optional.ofNullable(this.tlocColor);
    }

    /**
     * TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`
     * 
     */
    @Import(name="tlocEncapsulation")
    private @Nullable Output<String> tlocEncapsulation;

    /**
     * @return TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`
     * 
     */
    public Optional<Output<String>> tlocEncapsulation() {
        return Optional.ofNullable(this.tlocEncapsulation);
    }

    /**
     * TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    @Import(name="tlocIp")
    private @Nullable Output<String> tlocIp;

    /**
     * @return TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    public Optional<Output<String>> tlocIp() {
        return Optional.ofNullable(this.tlocIp);
    }

    /**
     * TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     * 
     */
    @Import(name="tlocListId")
    private @Nullable Output<String> tlocListId;

    /**
     * @return TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     * 
     */
    public Optional<Output<String>> tlocListId() {
        return Optional.ofNullable(this.tlocListId);
    }

    /**
     * TLOC list version
     * 
     */
    @Import(name="tlocListVersion")
    private @Nullable Output<Integer> tlocListVersion;

    /**
     * @return TLOC list version
     * 
     */
    public Optional<Output<Integer>> tlocListVersion() {
        return Optional.ofNullable(this.tlocListVersion);
    }

    /**
     * Type of match entry
     *   - Choices: `colorList`, `community`, `expandedCommunity`, `ompTag`, `origin`, `originator`, `preference`, `siteList`, `pathType`, `tlocList`, `vpnList`, `prefixList`, `vpn`, `tloc`, `siteId`, `carrier`, `domainId`, `groupId`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of match entry
     *   - Choices: `colorList`, `community`, `expandedCommunity`, `ompTag`, `origin`, `originator`, `preference`, `siteList`, `pathType`, `tlocList`, `vpnList`, `prefixList`, `vpn`, `tloc`, `siteId`, `carrier`, `domainId`, `groupId`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * VPN ID, Attribute conditional on `type` being equal to `vpn`
     *   - Range: `0`-`65536`
     * 
     */
    @Import(name="vpnId")
    private @Nullable Output<Integer> vpnId;

    /**
     * @return VPN ID, Attribute conditional on `type` being equal to `vpn`
     *   - Range: `0`-`65536`
     * 
     */
    public Optional<Output<Integer>> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }

    /**
     * VPN list ID, Attribute conditional on `type` being equal to `vpnList`
     * 
     */
    @Import(name="vpnListId")
    private @Nullable Output<String> vpnListId;

    /**
     * @return VPN list ID, Attribute conditional on `type` being equal to `vpnList`
     * 
     */
    public Optional<Output<String>> vpnListId() {
        return Optional.ofNullable(this.vpnListId);
    }

    /**
     * VPN list version
     * 
     */
    @Import(name="vpnListVersion")
    private @Nullable Output<Integer> vpnListVersion;

    /**
     * @return VPN list version
     * 
     */
    public Optional<Output<Integer>> vpnListVersion() {
        return Optional.ofNullable(this.vpnListVersion);
    }

    private CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs() {}

    private CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs(CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs $) {
        this.carrier = $.carrier;
        this.colorListId = $.colorListId;
        this.colorListVersion = $.colorListVersion;
        this.communityListId = $.communityListId;
        this.communityListVersion = $.communityListVersion;
        this.domainId = $.domainId;
        this.expandedCommunityListId = $.expandedCommunityListId;
        this.expandedCommunityListVersion = $.expandedCommunityListVersion;
        this.groupId = $.groupId;
        this.ompTag = $.ompTag;
        this.origin = $.origin;
        this.originator = $.originator;
        this.pathType = $.pathType;
        this.preference = $.preference;
        this.prefixListId = $.prefixListId;
        this.prefixListVersion = $.prefixListVersion;
        this.siteId = $.siteId;
        this.siteListId = $.siteListId;
        this.siteListVersion = $.siteListVersion;
        this.tlocColor = $.tlocColor;
        this.tlocEncapsulation = $.tlocEncapsulation;
        this.tlocIp = $.tlocIp;
        this.tlocListId = $.tlocListId;
        this.tlocListVersion = $.tlocListVersion;
        this.type = $.type;
        this.vpnId = $.vpnId;
        this.vpnListId = $.vpnListId;
        this.vpnListVersion = $.vpnListVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs $;

        public Builder() {
            $ = new CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs();
        }

        public Builder(CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs defaults) {
            $ = new CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param carrier Carrier, Attribute conditional on `type` being equal to `carrier`
         *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
         * 
         * @return builder
         * 
         */
        public Builder carrier(@Nullable Output<String> carrier) {
            $.carrier = carrier;
            return this;
        }

        /**
         * @param carrier Carrier, Attribute conditional on `type` being equal to `carrier`
         *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
         * 
         * @return builder
         * 
         */
        public Builder carrier(String carrier) {
            return carrier(Output.of(carrier));
        }

        /**
         * @param colorListId Color list ID, Attribute conditional on `type` being equal to `colorList`
         * 
         * @return builder
         * 
         */
        public Builder colorListId(@Nullable Output<String> colorListId) {
            $.colorListId = colorListId;
            return this;
        }

        /**
         * @param colorListId Color list ID, Attribute conditional on `type` being equal to `colorList`
         * 
         * @return builder
         * 
         */
        public Builder colorListId(String colorListId) {
            return colorListId(Output.of(colorListId));
        }

        /**
         * @param colorListVersion Color list version
         * 
         * @return builder
         * 
         */
        public Builder colorListVersion(@Nullable Output<Integer> colorListVersion) {
            $.colorListVersion = colorListVersion;
            return this;
        }

        /**
         * @param colorListVersion Color list version
         * 
         * @return builder
         * 
         */
        public Builder colorListVersion(Integer colorListVersion) {
            return colorListVersion(Output.of(colorListVersion));
        }

        /**
         * @param communityListId Community list ID, Attribute conditional on `type` being equal to `community`
         * 
         * @return builder
         * 
         */
        public Builder communityListId(@Nullable Output<String> communityListId) {
            $.communityListId = communityListId;
            return this;
        }

        /**
         * @param communityListId Community list ID, Attribute conditional on `type` being equal to `community`
         * 
         * @return builder
         * 
         */
        public Builder communityListId(String communityListId) {
            return communityListId(Output.of(communityListId));
        }

        /**
         * @param communityListVersion Community list version
         * 
         * @return builder
         * 
         */
        public Builder communityListVersion(@Nullable Output<Integer> communityListVersion) {
            $.communityListVersion = communityListVersion;
            return this;
        }

        /**
         * @param communityListVersion Community list version
         * 
         * @return builder
         * 
         */
        public Builder communityListVersion(Integer communityListVersion) {
            return communityListVersion(Output.of(communityListVersion));
        }

        /**
         * @param domainId Domain ID, Attribute conditional on `type` being equal to `domainId`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder domainId(@Nullable Output<Integer> domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param domainId Domain ID, Attribute conditional on `type` being equal to `domainId`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder domainId(Integer domainId) {
            return domainId(Output.of(domainId));
        }

        /**
         * @param expandedCommunityListId Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
         * 
         * @return builder
         * 
         */
        public Builder expandedCommunityListId(@Nullable Output<String> expandedCommunityListId) {
            $.expandedCommunityListId = expandedCommunityListId;
            return this;
        }

        /**
         * @param expandedCommunityListId Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
         * 
         * @return builder
         * 
         */
        public Builder expandedCommunityListId(String expandedCommunityListId) {
            return expandedCommunityListId(Output.of(expandedCommunityListId));
        }

        /**
         * @param expandedCommunityListVersion Expanded community list version
         * 
         * @return builder
         * 
         */
        public Builder expandedCommunityListVersion(@Nullable Output<Integer> expandedCommunityListVersion) {
            $.expandedCommunityListVersion = expandedCommunityListVersion;
            return this;
        }

        /**
         * @param expandedCommunityListVersion Expanded community list version
         * 
         * @return builder
         * 
         */
        public Builder expandedCommunityListVersion(Integer expandedCommunityListVersion) {
            return expandedCommunityListVersion(Output.of(expandedCommunityListVersion));
        }

        /**
         * @param groupId Group ID, Attribute conditional on `type` being equal to `groupId`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId Group ID, Attribute conditional on `type` being equal to `groupId`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param ompTag OMP tag, Attribute conditional on `type` being equal to `ompTag`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder ompTag(@Nullable Output<Integer> ompTag) {
            $.ompTag = ompTag;
            return this;
        }

        /**
         * @param ompTag OMP tag, Attribute conditional on `type` being equal to `ompTag`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder ompTag(Integer ompTag) {
            return ompTag(Output.of(ompTag));
        }

        /**
         * @param origin Origin, Attribute conditional on `type` being equal to `origin`
         *   - Choices: `igp`, `egp`, `incomplete`, `aggregrate`, `bgp`, `bgp-external`, `bgp-internal`, `connected`, `eigrp`, `ospf`, `ospf-inter-area`, `ospf-intra-area`, `ospf-external1`, `ospf-external2`, `rip`, `static`, `eigrp-summary`, `eigrp-internal`, `eigrp-external`, `lisp`, `nat-dia`, `natpool`, `isis`, `isis-level1`, `isis-level2`
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<String> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin Origin, Attribute conditional on `type` being equal to `origin`
         *   - Choices: `igp`, `egp`, `incomplete`, `aggregrate`, `bgp`, `bgp-external`, `bgp-internal`, `connected`, `eigrp`, `ospf`, `ospf-inter-area`, `ospf-intra-area`, `ospf-external1`, `ospf-external2`, `rip`, `static`, `eigrp-summary`, `eigrp-internal`, `eigrp-external`, `lisp`, `nat-dia`, `natpool`, `isis`, `isis-level1`, `isis-level2`
         * 
         * @return builder
         * 
         */
        public Builder origin(String origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param originator Originator IP, Attribute conditional on `type` being equal to `originator`
         * 
         * @return builder
         * 
         */
        public Builder originator(@Nullable Output<String> originator) {
            $.originator = originator;
            return this;
        }

        /**
         * @param originator Originator IP, Attribute conditional on `type` being equal to `originator`
         * 
         * @return builder
         * 
         */
        public Builder originator(String originator) {
            return originator(Output.of(originator));
        }

        /**
         * @param pathType Path type, Attribute conditional on `type` being equal to `pathType`
         *   - Choices: `hierarchical-path`, `direct-path`, `transport-gateway-path`
         * 
         * @return builder
         * 
         */
        public Builder pathType(@Nullable Output<String> pathType) {
            $.pathType = pathType;
            return this;
        }

        /**
         * @param pathType Path type, Attribute conditional on `type` being equal to `pathType`
         *   - Choices: `hierarchical-path`, `direct-path`, `transport-gateway-path`
         * 
         * @return builder
         * 
         */
        public Builder pathType(String pathType) {
            return pathType(Output.of(pathType));
        }

        /**
         * @param preference Preference, Attribute conditional on `type` being equal to `preference`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder preference(@Nullable Output<Integer> preference) {
            $.preference = preference;
            return this;
        }

        /**
         * @param preference Preference, Attribute conditional on `type` being equal to `preference`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder preference(Integer preference) {
            return preference(Output.of(preference));
        }

        /**
         * @param prefixListId Prefix list ID, Attribute conditional on `type` being equal to `prefixList`
         * 
         * @return builder
         * 
         */
        public Builder prefixListId(@Nullable Output<String> prefixListId) {
            $.prefixListId = prefixListId;
            return this;
        }

        /**
         * @param prefixListId Prefix list ID, Attribute conditional on `type` being equal to `prefixList`
         * 
         * @return builder
         * 
         */
        public Builder prefixListId(String prefixListId) {
            return prefixListId(Output.of(prefixListId));
        }

        /**
         * @param prefixListVersion Prefix list version
         * 
         * @return builder
         * 
         */
        public Builder prefixListVersion(@Nullable Output<Integer> prefixListVersion) {
            $.prefixListVersion = prefixListVersion;
            return this;
        }

        /**
         * @param prefixListVersion Prefix list version
         * 
         * @return builder
         * 
         */
        public Builder prefixListVersion(Integer prefixListVersion) {
            return prefixListVersion(Output.of(prefixListVersion));
        }

        /**
         * @param siteId Site ID, Attribute conditional on `type` being equal to `siteId`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder siteId(@Nullable Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId Site ID, Attribute conditional on `type` being equal to `siteId`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param siteListId Site list ID, Attribute conditional on `type` being equal to `siteList`
         * 
         * @return builder
         * 
         */
        public Builder siteListId(@Nullable Output<String> siteListId) {
            $.siteListId = siteListId;
            return this;
        }

        /**
         * @param siteListId Site list ID, Attribute conditional on `type` being equal to `siteList`
         * 
         * @return builder
         * 
         */
        public Builder siteListId(String siteListId) {
            return siteListId(Output.of(siteListId));
        }

        /**
         * @param siteListVersion Site list version
         * 
         * @return builder
         * 
         */
        public Builder siteListVersion(@Nullable Output<Integer> siteListVersion) {
            $.siteListVersion = siteListVersion;
            return this;
        }

        /**
         * @param siteListVersion Site list version
         * 
         * @return builder
         * 
         */
        public Builder siteListVersion(Integer siteListVersion) {
            return siteListVersion(Output.of(siteListVersion));
        }

        /**
         * @param tlocColor TLOC color, Attribute conditional on `type` being equal to `tloc`
         * 
         * @return builder
         * 
         */
        public Builder tlocColor(@Nullable Output<String> tlocColor) {
            $.tlocColor = tlocColor;
            return this;
        }

        /**
         * @param tlocColor TLOC color, Attribute conditional on `type` being equal to `tloc`
         * 
         * @return builder
         * 
         */
        public Builder tlocColor(String tlocColor) {
            return tlocColor(Output.of(tlocColor));
        }

        /**
         * @param tlocEncapsulation TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
         *   - Choices: `ipsec`, `gre`
         * 
         * @return builder
         * 
         */
        public Builder tlocEncapsulation(@Nullable Output<String> tlocEncapsulation) {
            $.tlocEncapsulation = tlocEncapsulation;
            return this;
        }

        /**
         * @param tlocEncapsulation TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
         *   - Choices: `ipsec`, `gre`
         * 
         * @return builder
         * 
         */
        public Builder tlocEncapsulation(String tlocEncapsulation) {
            return tlocEncapsulation(Output.of(tlocEncapsulation));
        }

        /**
         * @param tlocIp TLOC IP address, Attribute conditional on `type` being equal to `tloc`
         * 
         * @return builder
         * 
         */
        public Builder tlocIp(@Nullable Output<String> tlocIp) {
            $.tlocIp = tlocIp;
            return this;
        }

        /**
         * @param tlocIp TLOC IP address, Attribute conditional on `type` being equal to `tloc`
         * 
         * @return builder
         * 
         */
        public Builder tlocIp(String tlocIp) {
            return tlocIp(Output.of(tlocIp));
        }

        /**
         * @param tlocListId TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
         * 
         * @return builder
         * 
         */
        public Builder tlocListId(@Nullable Output<String> tlocListId) {
            $.tlocListId = tlocListId;
            return this;
        }

        /**
         * @param tlocListId TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
         * 
         * @return builder
         * 
         */
        public Builder tlocListId(String tlocListId) {
            return tlocListId(Output.of(tlocListId));
        }

        /**
         * @param tlocListVersion TLOC list version
         * 
         * @return builder
         * 
         */
        public Builder tlocListVersion(@Nullable Output<Integer> tlocListVersion) {
            $.tlocListVersion = tlocListVersion;
            return this;
        }

        /**
         * @param tlocListVersion TLOC list version
         * 
         * @return builder
         * 
         */
        public Builder tlocListVersion(Integer tlocListVersion) {
            return tlocListVersion(Output.of(tlocListVersion));
        }

        /**
         * @param type Type of match entry
         *   - Choices: `colorList`, `community`, `expandedCommunity`, `ompTag`, `origin`, `originator`, `preference`, `siteList`, `pathType`, `tlocList`, `vpnList`, `prefixList`, `vpn`, `tloc`, `siteId`, `carrier`, `domainId`, `groupId`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of match entry
         *   - Choices: `colorList`, `community`, `expandedCommunity`, `ompTag`, `origin`, `originator`, `preference`, `siteList`, `pathType`, `tlocList`, `vpnList`, `prefixList`, `vpn`, `tloc`, `siteId`, `carrier`, `domainId`, `groupId`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vpnId VPN ID, Attribute conditional on `type` being equal to `vpn`
         *   - Range: `0`-`65536`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(@Nullable Output<Integer> vpnId) {
            $.vpnId = vpnId;
            return this;
        }

        /**
         * @param vpnId VPN ID, Attribute conditional on `type` being equal to `vpn`
         *   - Range: `0`-`65536`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(Integer vpnId) {
            return vpnId(Output.of(vpnId));
        }

        /**
         * @param vpnListId VPN list ID, Attribute conditional on `type` being equal to `vpnList`
         * 
         * @return builder
         * 
         */
        public Builder vpnListId(@Nullable Output<String> vpnListId) {
            $.vpnListId = vpnListId;
            return this;
        }

        /**
         * @param vpnListId VPN list ID, Attribute conditional on `type` being equal to `vpnList`
         * 
         * @return builder
         * 
         */
        public Builder vpnListId(String vpnListId) {
            return vpnListId(Output.of(vpnListId));
        }

        /**
         * @param vpnListVersion VPN list version
         * 
         * @return builder
         * 
         */
        public Builder vpnListVersion(@Nullable Output<Integer> vpnListVersion) {
            $.vpnListVersion = vpnListVersion;
            return this;
        }

        /**
         * @param vpnListVersion VPN list version
         * 
         * @return builder
         * 
         */
        public Builder vpnListVersion(Integer vpnListVersion) {
            return vpnListVersion(Output.of(vpnListVersion));
        }

        public CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs", "type");
            }
            return $;
        }
    }

}
