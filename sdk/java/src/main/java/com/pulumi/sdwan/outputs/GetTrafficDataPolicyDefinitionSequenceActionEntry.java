// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameter;
import com.pulumi.sdwan.outputs.GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTrafficDataPolicyDefinitionSequenceActionEntry {
    /**
     * @return Enable cflowd
     * 
     */
    private Boolean cflowd;
    /**
     * @return Counter name
     * 
     */
    private String counter;
    /**
     * @return Enable DRE optimization
     * 
     */
    private Boolean dreOptimization;
    /**
     * @return Enable fallback to routing
     * 
     */
    private Boolean fallbackToRouting;
    /**
     * @return Enable logging
     * 
     */
    private Boolean log;
    /**
     * @return Loss correction
     * 
     */
    private String lossCorrection;
    /**
     * @return Loss correction FEC
     * 
     */
    private String lossCorrectionFec;
    /**
     * @return Loss correction FEC threshold
     * 
     */
    private String lossCorrectionFecThreshold;
    /**
     * @return Loss correction packet duplication
     * 
     */
    private String lossCorrectionPacketDuplication;
    /**
     * @return List of NAT parameters
     * 
     */
    private List<GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameter> natParameters;
    /**
     * @return NAT pool
     * 
     */
    private String natPool;
    /**
     * @return NAT pool ID
     * 
     */
    private Integer natPoolId;
    /**
     * @return Redirect DNS
     * 
     */
    private String redirectDns;
    /**
     * @return Redirect DNS IP address
     * 
     */
    private String redirectDnsAddress;
    /**
     * @return Redirect DNS type
     * 
     */
    private String redirectDnsType;
    /**
     * @return Enable secure internet gateway
     * 
     */
    private Boolean secureInternetGateway;
    /**
     * @return Service node group
     * 
     */
    private String serviceNodeGroup;
    /**
     * @return List of set parameters
     * 
     */
    private List<GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter> setParameters;
    /**
     * @return Enable TCP optimization
     * 
     */
    private Boolean tcpOptimization;
    /**
     * @return Type of action entry
     * 
     */
    private String type;

    private GetTrafficDataPolicyDefinitionSequenceActionEntry() {}
    /**
     * @return Enable cflowd
     * 
     */
    public Boolean cflowd() {
        return this.cflowd;
    }
    /**
     * @return Counter name
     * 
     */
    public String counter() {
        return this.counter;
    }
    /**
     * @return Enable DRE optimization
     * 
     */
    public Boolean dreOptimization() {
        return this.dreOptimization;
    }
    /**
     * @return Enable fallback to routing
     * 
     */
    public Boolean fallbackToRouting() {
        return this.fallbackToRouting;
    }
    /**
     * @return Enable logging
     * 
     */
    public Boolean log() {
        return this.log;
    }
    /**
     * @return Loss correction
     * 
     */
    public String lossCorrection() {
        return this.lossCorrection;
    }
    /**
     * @return Loss correction FEC
     * 
     */
    public String lossCorrectionFec() {
        return this.lossCorrectionFec;
    }
    /**
     * @return Loss correction FEC threshold
     * 
     */
    public String lossCorrectionFecThreshold() {
        return this.lossCorrectionFecThreshold;
    }
    /**
     * @return Loss correction packet duplication
     * 
     */
    public String lossCorrectionPacketDuplication() {
        return this.lossCorrectionPacketDuplication;
    }
    /**
     * @return List of NAT parameters
     * 
     */
    public List<GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameter> natParameters() {
        return this.natParameters;
    }
    /**
     * @return NAT pool
     * 
     */
    public String natPool() {
        return this.natPool;
    }
    /**
     * @return NAT pool ID
     * 
     */
    public Integer natPoolId() {
        return this.natPoolId;
    }
    /**
     * @return Redirect DNS
     * 
     */
    public String redirectDns() {
        return this.redirectDns;
    }
    /**
     * @return Redirect DNS IP address
     * 
     */
    public String redirectDnsAddress() {
        return this.redirectDnsAddress;
    }
    /**
     * @return Redirect DNS type
     * 
     */
    public String redirectDnsType() {
        return this.redirectDnsType;
    }
    /**
     * @return Enable secure internet gateway
     * 
     */
    public Boolean secureInternetGateway() {
        return this.secureInternetGateway;
    }
    /**
     * @return Service node group
     * 
     */
    public String serviceNodeGroup() {
        return this.serviceNodeGroup;
    }
    /**
     * @return List of set parameters
     * 
     */
    public List<GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter> setParameters() {
        return this.setParameters;
    }
    /**
     * @return Enable TCP optimization
     * 
     */
    public Boolean tcpOptimization() {
        return this.tcpOptimization;
    }
    /**
     * @return Type of action entry
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTrafficDataPolicyDefinitionSequenceActionEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean cflowd;
        private String counter;
        private Boolean dreOptimization;
        private Boolean fallbackToRouting;
        private Boolean log;
        private String lossCorrection;
        private String lossCorrectionFec;
        private String lossCorrectionFecThreshold;
        private String lossCorrectionPacketDuplication;
        private List<GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameter> natParameters;
        private String natPool;
        private Integer natPoolId;
        private String redirectDns;
        private String redirectDnsAddress;
        private String redirectDnsType;
        private Boolean secureInternetGateway;
        private String serviceNodeGroup;
        private List<GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter> setParameters;
        private Boolean tcpOptimization;
        private String type;
        public Builder() {}
        public Builder(GetTrafficDataPolicyDefinitionSequenceActionEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cflowd = defaults.cflowd;
    	      this.counter = defaults.counter;
    	      this.dreOptimization = defaults.dreOptimization;
    	      this.fallbackToRouting = defaults.fallbackToRouting;
    	      this.log = defaults.log;
    	      this.lossCorrection = defaults.lossCorrection;
    	      this.lossCorrectionFec = defaults.lossCorrectionFec;
    	      this.lossCorrectionFecThreshold = defaults.lossCorrectionFecThreshold;
    	      this.lossCorrectionPacketDuplication = defaults.lossCorrectionPacketDuplication;
    	      this.natParameters = defaults.natParameters;
    	      this.natPool = defaults.natPool;
    	      this.natPoolId = defaults.natPoolId;
    	      this.redirectDns = defaults.redirectDns;
    	      this.redirectDnsAddress = defaults.redirectDnsAddress;
    	      this.redirectDnsType = defaults.redirectDnsType;
    	      this.secureInternetGateway = defaults.secureInternetGateway;
    	      this.serviceNodeGroup = defaults.serviceNodeGroup;
    	      this.setParameters = defaults.setParameters;
    	      this.tcpOptimization = defaults.tcpOptimization;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder cflowd(Boolean cflowd) {
            if (cflowd == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "cflowd");
            }
            this.cflowd = cflowd;
            return this;
        }
        @CustomType.Setter
        public Builder counter(String counter) {
            if (counter == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "counter");
            }
            this.counter = counter;
            return this;
        }
        @CustomType.Setter
        public Builder dreOptimization(Boolean dreOptimization) {
            if (dreOptimization == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "dreOptimization");
            }
            this.dreOptimization = dreOptimization;
            return this;
        }
        @CustomType.Setter
        public Builder fallbackToRouting(Boolean fallbackToRouting) {
            if (fallbackToRouting == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "fallbackToRouting");
            }
            this.fallbackToRouting = fallbackToRouting;
            return this;
        }
        @CustomType.Setter
        public Builder log(Boolean log) {
            if (log == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "log");
            }
            this.log = log;
            return this;
        }
        @CustomType.Setter
        public Builder lossCorrection(String lossCorrection) {
            if (lossCorrection == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "lossCorrection");
            }
            this.lossCorrection = lossCorrection;
            return this;
        }
        @CustomType.Setter
        public Builder lossCorrectionFec(String lossCorrectionFec) {
            if (lossCorrectionFec == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "lossCorrectionFec");
            }
            this.lossCorrectionFec = lossCorrectionFec;
            return this;
        }
        @CustomType.Setter
        public Builder lossCorrectionFecThreshold(String lossCorrectionFecThreshold) {
            if (lossCorrectionFecThreshold == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "lossCorrectionFecThreshold");
            }
            this.lossCorrectionFecThreshold = lossCorrectionFecThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder lossCorrectionPacketDuplication(String lossCorrectionPacketDuplication) {
            if (lossCorrectionPacketDuplication == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "lossCorrectionPacketDuplication");
            }
            this.lossCorrectionPacketDuplication = lossCorrectionPacketDuplication;
            return this;
        }
        @CustomType.Setter
        public Builder natParameters(List<GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameter> natParameters) {
            if (natParameters == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "natParameters");
            }
            this.natParameters = natParameters;
            return this;
        }
        public Builder natParameters(GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameter... natParameters) {
            return natParameters(List.of(natParameters));
        }
        @CustomType.Setter
        public Builder natPool(String natPool) {
            if (natPool == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "natPool");
            }
            this.natPool = natPool;
            return this;
        }
        @CustomType.Setter
        public Builder natPoolId(Integer natPoolId) {
            if (natPoolId == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "natPoolId");
            }
            this.natPoolId = natPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder redirectDns(String redirectDns) {
            if (redirectDns == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "redirectDns");
            }
            this.redirectDns = redirectDns;
            return this;
        }
        @CustomType.Setter
        public Builder redirectDnsAddress(String redirectDnsAddress) {
            if (redirectDnsAddress == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "redirectDnsAddress");
            }
            this.redirectDnsAddress = redirectDnsAddress;
            return this;
        }
        @CustomType.Setter
        public Builder redirectDnsType(String redirectDnsType) {
            if (redirectDnsType == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "redirectDnsType");
            }
            this.redirectDnsType = redirectDnsType;
            return this;
        }
        @CustomType.Setter
        public Builder secureInternetGateway(Boolean secureInternetGateway) {
            if (secureInternetGateway == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "secureInternetGateway");
            }
            this.secureInternetGateway = secureInternetGateway;
            return this;
        }
        @CustomType.Setter
        public Builder serviceNodeGroup(String serviceNodeGroup) {
            if (serviceNodeGroup == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "serviceNodeGroup");
            }
            this.serviceNodeGroup = serviceNodeGroup;
            return this;
        }
        @CustomType.Setter
        public Builder setParameters(List<GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter> setParameters) {
            if (setParameters == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "setParameters");
            }
            this.setParameters = setParameters;
            return this;
        }
        public Builder setParameters(GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter... setParameters) {
            return setParameters(List.of(setParameters));
        }
        @CustomType.Setter
        public Builder tcpOptimization(Boolean tcpOptimization) {
            if (tcpOptimization == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "tcpOptimization");
            }
            this.tcpOptimization = tcpOptimization;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntry", "type");
            }
            this.type = type;
            return this;
        }
        public GetTrafficDataPolicyDefinitionSequenceActionEntry build() {
            final var _resultValue = new GetTrafficDataPolicyDefinitionSequenceActionEntry();
            _resultValue.cflowd = cflowd;
            _resultValue.counter = counter;
            _resultValue.dreOptimization = dreOptimization;
            _resultValue.fallbackToRouting = fallbackToRouting;
            _resultValue.log = log;
            _resultValue.lossCorrection = lossCorrection;
            _resultValue.lossCorrectionFec = lossCorrectionFec;
            _resultValue.lossCorrectionFecThreshold = lossCorrectionFecThreshold;
            _resultValue.lossCorrectionPacketDuplication = lossCorrectionPacketDuplication;
            _resultValue.natParameters = natParameters;
            _resultValue.natPool = natPool;
            _resultValue.natPoolId = natPoolId;
            _resultValue.redirectDns = redirectDns;
            _resultValue.redirectDnsAddress = redirectDnsAddress;
            _resultValue.redirectDnsType = redirectDnsType;
            _resultValue.secureInternetGateway = secureInternetGateway;
            _resultValue.serviceNodeGroup = serviceNodeGroup;
            _resultValue.setParameters = setParameters;
            _resultValue.tcpOptimization = tcpOptimization;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
