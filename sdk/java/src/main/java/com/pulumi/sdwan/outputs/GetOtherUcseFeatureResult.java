// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetOtherUcseFeatureInterface;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetOtherUcseFeatureResult {
    /**
     * @return Dedicated
     * 
     */
    private Boolean accessPortDedicated;
    private String accessPortSharedFailoverType;
    private String accessPortSharedType;
    /**
     * @return Assign priority
     * 
     */
    private Integer assignPriority;
    /**
     * @return Variable name
     * 
     */
    private String assignPriorityVariable;
    /**
     * @return Bay
     * 
     */
    private Integer bay;
    /**
     * @return Assign default gateway
     * 
     */
    private String defaultGateway;
    /**
     * @return Variable name
     * 
     */
    private String defaultGatewayVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return Interface name: GigabitEthernet0/&lt;&gt;/&lt;&gt; when present
     * 
     */
    private List<GetOtherUcseFeatureInterface> interfaces;
    /**
     * @return Assign IPv4 address
     * 
     */
    private String ipv4Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv4AddressVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Slot
     * 
     */
    private Integer slot;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;
    /**
     * @return Assign Vlan Id
     * 
     */
    private Integer vlanId;
    /**
     * @return Variable name
     * 
     */
    private String vlanIdVariable;

    private GetOtherUcseFeatureResult() {}
    /**
     * @return Dedicated
     * 
     */
    public Boolean accessPortDedicated() {
        return this.accessPortDedicated;
    }
    public String accessPortSharedFailoverType() {
        return this.accessPortSharedFailoverType;
    }
    public String accessPortSharedType() {
        return this.accessPortSharedType;
    }
    /**
     * @return Assign priority
     * 
     */
    public Integer assignPriority() {
        return this.assignPriority;
    }
    /**
     * @return Variable name
     * 
     */
    public String assignPriorityVariable() {
        return this.assignPriorityVariable;
    }
    /**
     * @return Bay
     * 
     */
    public Integer bay() {
        return this.bay;
    }
    /**
     * @return Assign default gateway
     * 
     */
    public String defaultGateway() {
        return this.defaultGateway;
    }
    /**
     * @return Variable name
     * 
     */
    public String defaultGatewayVariable() {
        return this.defaultGatewayVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Interface name: GigabitEthernet0/&lt;&gt;/&lt;&gt; when present
     * 
     */
    public List<GetOtherUcseFeatureInterface> interfaces() {
        return this.interfaces;
    }
    /**
     * @return Assign IPv4 address
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4AddressVariable() {
        return this.ipv4AddressVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Slot
     * 
     */
    public Integer slot() {
        return this.slot;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return Assign Vlan Id
     * 
     */
    public Integer vlanId() {
        return this.vlanId;
    }
    /**
     * @return Variable name
     * 
     */
    public String vlanIdVariable() {
        return this.vlanIdVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOtherUcseFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean accessPortDedicated;
        private String accessPortSharedFailoverType;
        private String accessPortSharedType;
        private Integer assignPriority;
        private String assignPriorityVariable;
        private Integer bay;
        private String defaultGateway;
        private String defaultGatewayVariable;
        private String description;
        private String featureProfileId;
        private String id;
        private List<GetOtherUcseFeatureInterface> interfaces;
        private String ipv4Address;
        private String ipv4AddressVariable;
        private String name;
        private Integer slot;
        private Integer version;
        private Integer vlanId;
        private String vlanIdVariable;
        public Builder() {}
        public Builder(GetOtherUcseFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPortDedicated = defaults.accessPortDedicated;
    	      this.accessPortSharedFailoverType = defaults.accessPortSharedFailoverType;
    	      this.accessPortSharedType = defaults.accessPortSharedType;
    	      this.assignPriority = defaults.assignPriority;
    	      this.assignPriorityVariable = defaults.assignPriorityVariable;
    	      this.bay = defaults.bay;
    	      this.defaultGateway = defaults.defaultGateway;
    	      this.defaultGatewayVariable = defaults.defaultGatewayVariable;
    	      this.description = defaults.description;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.interfaces = defaults.interfaces;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressVariable = defaults.ipv4AddressVariable;
    	      this.name = defaults.name;
    	      this.slot = defaults.slot;
    	      this.version = defaults.version;
    	      this.vlanId = defaults.vlanId;
    	      this.vlanIdVariable = defaults.vlanIdVariable;
        }

        @CustomType.Setter
        public Builder accessPortDedicated(Boolean accessPortDedicated) {
            if (accessPortDedicated == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "accessPortDedicated");
            }
            this.accessPortDedicated = accessPortDedicated;
            return this;
        }
        @CustomType.Setter
        public Builder accessPortSharedFailoverType(String accessPortSharedFailoverType) {
            if (accessPortSharedFailoverType == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "accessPortSharedFailoverType");
            }
            this.accessPortSharedFailoverType = accessPortSharedFailoverType;
            return this;
        }
        @CustomType.Setter
        public Builder accessPortSharedType(String accessPortSharedType) {
            if (accessPortSharedType == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "accessPortSharedType");
            }
            this.accessPortSharedType = accessPortSharedType;
            return this;
        }
        @CustomType.Setter
        public Builder assignPriority(Integer assignPriority) {
            if (assignPriority == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "assignPriority");
            }
            this.assignPriority = assignPriority;
            return this;
        }
        @CustomType.Setter
        public Builder assignPriorityVariable(String assignPriorityVariable) {
            if (assignPriorityVariable == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "assignPriorityVariable");
            }
            this.assignPriorityVariable = assignPriorityVariable;
            return this;
        }
        @CustomType.Setter
        public Builder bay(Integer bay) {
            if (bay == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "bay");
            }
            this.bay = bay;
            return this;
        }
        @CustomType.Setter
        public Builder defaultGateway(String defaultGateway) {
            if (defaultGateway == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "defaultGateway");
            }
            this.defaultGateway = defaultGateway;
            return this;
        }
        @CustomType.Setter
        public Builder defaultGatewayVariable(String defaultGatewayVariable) {
            if (defaultGatewayVariable == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "defaultGatewayVariable");
            }
            this.defaultGatewayVariable = defaultGatewayVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaces(List<GetOtherUcseFeatureInterface> interfaces) {
            if (interfaces == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "interfaces");
            }
            this.interfaces = interfaces;
            return this;
        }
        public Builder interfaces(GetOtherUcseFeatureInterface... interfaces) {
            return interfaces(List.of(interfaces));
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            if (ipv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "ipv4AddressVariable");
            }
            this.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder slot(Integer slot) {
            if (slot == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "slot");
            }
            this.slot = slot;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(Integer vlanId) {
            if (vlanId == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "vlanId");
            }
            this.vlanId = vlanId;
            return this;
        }
        @CustomType.Setter
        public Builder vlanIdVariable(String vlanIdVariable) {
            if (vlanIdVariable == null) {
              throw new MissingRequiredPropertyException("GetOtherUcseFeatureResult", "vlanIdVariable");
            }
            this.vlanIdVariable = vlanIdVariable;
            return this;
        }
        public GetOtherUcseFeatureResult build() {
            final var _resultValue = new GetOtherUcseFeatureResult();
            _resultValue.accessPortDedicated = accessPortDedicated;
            _resultValue.accessPortSharedFailoverType = accessPortSharedFailoverType;
            _resultValue.accessPortSharedType = accessPortSharedType;
            _resultValue.assignPriority = assignPriority;
            _resultValue.assignPriorityVariable = assignPriorityVariable;
            _resultValue.bay = bay;
            _resultValue.defaultGateway = defaultGateway;
            _resultValue.defaultGatewayVariable = defaultGatewayVariable;
            _resultValue.description = description;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.interfaces = interfaces;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4AddressVariable = ipv4AddressVariable;
            _resultValue.name = name;
            _resultValue.slot = slot;
            _resultValue.version = version;
            _resultValue.vlanId = vlanId;
            _resultValue.vlanIdVariable = vlanIdVariable;
            return _resultValue;
        }
    }
}
