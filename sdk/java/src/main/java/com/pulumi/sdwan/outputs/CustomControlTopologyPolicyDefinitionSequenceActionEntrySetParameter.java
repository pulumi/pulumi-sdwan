// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter {
    /**
     * @return Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
     * 
     */
    private @Nullable String community;
    /**
     * @return Community additive, Attribute conditional on `type` being equal to `communityAdditive`
     * 
     */
    private @Nullable Boolean communityAdditive;
    /**
     * @return OMP tag, Attribute conditional on `type` being equal to `ompTag`
     *   - Range: `0`-`4294967295`
     * 
     */
    private @Nullable Integer ompTag;
    /**
     * @return Preference, Attribute conditional on `type` being equal to `preference`
     *   - Range: `0`-`4294967295`
     * 
     */
    private @Nullable Integer preference;
    /**
     * @return Service TLOC color, Attribute conditional on `type` being equal to `service`
     * 
     */
    private @Nullable String serviceTlocColor;
    /**
     * @return Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
     *   - Choices: `ipsec`, `gre`
     * 
     */
    private @Nullable String serviceTlocEncapsulation;
    /**
     * @return Service TLOC IP address, Attribute conditional on `type` being equal to `service`
     * 
     */
    private @Nullable String serviceTlocIp;
    /**
     * @return Service TLOC list ID, Attribute conditional on `type` being equal to `service`
     * 
     */
    private @Nullable String serviceTlocListId;
    /**
     * @return Service TLOC list version
     * 
     */
    private @Nullable Integer serviceTlocListVersion;
    /**
     * @return Service type, Attribute conditional on `type` being equal to `service`
     *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
     * 
     */
    private @Nullable String serviceType;
    /**
     * @return Service VPN ID, Attribute conditional on `type` being equal to `service`
     *   - Range: `0`-`65536`
     * 
     */
    private @Nullable Integer serviceVpnId;
    /**
     * @return TLOC action, Attribute conditional on `type` being equal to `tlocAction`
     *   - Choices: `strict`, `primary`, `backup`, `ecmp`
     * 
     */
    private @Nullable String tlocAction;
    /**
     * @return TLOC color, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    private @Nullable String tlocColor;
    /**
     * @return TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`
     * 
     */
    private @Nullable String tlocEncapsulation;
    /**
     * @return TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    private @Nullable String tlocIp;
    /**
     * @return TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     * 
     */
    private @Nullable String tlocListId;
    /**
     * @return TLOC list version
     * 
     */
    private @Nullable Integer tlocListVersion;
    /**
     * @return Type of set parameter
     *   - Choices: `tlocList`, `tloc`, `tlocAction`, `preference`, `ompTag`, `community`, `communityAdditive`, `service`
     * 
     */
    private String type;

    private CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter() {}
    /**
     * @return Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
     * 
     */
    public Optional<String> community() {
        return Optional.ofNullable(this.community);
    }
    /**
     * @return Community additive, Attribute conditional on `type` being equal to `communityAdditive`
     * 
     */
    public Optional<Boolean> communityAdditive() {
        return Optional.ofNullable(this.communityAdditive);
    }
    /**
     * @return OMP tag, Attribute conditional on `type` being equal to `ompTag`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Integer> ompTag() {
        return Optional.ofNullable(this.ompTag);
    }
    /**
     * @return Preference, Attribute conditional on `type` being equal to `preference`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Integer> preference() {
        return Optional.ofNullable(this.preference);
    }
    /**
     * @return Service TLOC color, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<String> serviceTlocColor() {
        return Optional.ofNullable(this.serviceTlocColor);
    }
    /**
     * @return Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
     *   - Choices: `ipsec`, `gre`
     * 
     */
    public Optional<String> serviceTlocEncapsulation() {
        return Optional.ofNullable(this.serviceTlocEncapsulation);
    }
    /**
     * @return Service TLOC IP address, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<String> serviceTlocIp() {
        return Optional.ofNullable(this.serviceTlocIp);
    }
    /**
     * @return Service TLOC list ID, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<String> serviceTlocListId() {
        return Optional.ofNullable(this.serviceTlocListId);
    }
    /**
     * @return Service TLOC list version
     * 
     */
    public Optional<Integer> serviceTlocListVersion() {
        return Optional.ofNullable(this.serviceTlocListVersion);
    }
    /**
     * @return Service type, Attribute conditional on `type` being equal to `service`
     *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
     * 
     */
    public Optional<String> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }
    /**
     * @return Service VPN ID, Attribute conditional on `type` being equal to `service`
     *   - Range: `0`-`65536`
     * 
     */
    public Optional<Integer> serviceVpnId() {
        return Optional.ofNullable(this.serviceVpnId);
    }
    /**
     * @return TLOC action, Attribute conditional on `type` being equal to `tlocAction`
     *   - Choices: `strict`, `primary`, `backup`, `ecmp`
     * 
     */
    public Optional<String> tlocAction() {
        return Optional.ofNullable(this.tlocAction);
    }
    /**
     * @return TLOC color, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    public Optional<String> tlocColor() {
        return Optional.ofNullable(this.tlocColor);
    }
    /**
     * @return TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`
     * 
     */
    public Optional<String> tlocEncapsulation() {
        return Optional.ofNullable(this.tlocEncapsulation);
    }
    /**
     * @return TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    public Optional<String> tlocIp() {
        return Optional.ofNullable(this.tlocIp);
    }
    /**
     * @return TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     * 
     */
    public Optional<String> tlocListId() {
        return Optional.ofNullable(this.tlocListId);
    }
    /**
     * @return TLOC list version
     * 
     */
    public Optional<Integer> tlocListVersion() {
        return Optional.ofNullable(this.tlocListVersion);
    }
    /**
     * @return Type of set parameter
     *   - Choices: `tlocList`, `tloc`, `tlocAction`, `preference`, `ompTag`, `community`, `communityAdditive`, `service`
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String community;
        private @Nullable Boolean communityAdditive;
        private @Nullable Integer ompTag;
        private @Nullable Integer preference;
        private @Nullable String serviceTlocColor;
        private @Nullable String serviceTlocEncapsulation;
        private @Nullable String serviceTlocIp;
        private @Nullable String serviceTlocListId;
        private @Nullable Integer serviceTlocListVersion;
        private @Nullable String serviceType;
        private @Nullable Integer serviceVpnId;
        private @Nullable String tlocAction;
        private @Nullable String tlocColor;
        private @Nullable String tlocEncapsulation;
        private @Nullable String tlocIp;
        private @Nullable String tlocListId;
        private @Nullable Integer tlocListVersion;
        private String type;
        public Builder() {}
        public Builder(CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.community = defaults.community;
    	      this.communityAdditive = defaults.communityAdditive;
    	      this.ompTag = defaults.ompTag;
    	      this.preference = defaults.preference;
    	      this.serviceTlocColor = defaults.serviceTlocColor;
    	      this.serviceTlocEncapsulation = defaults.serviceTlocEncapsulation;
    	      this.serviceTlocIp = defaults.serviceTlocIp;
    	      this.serviceTlocListId = defaults.serviceTlocListId;
    	      this.serviceTlocListVersion = defaults.serviceTlocListVersion;
    	      this.serviceType = defaults.serviceType;
    	      this.serviceVpnId = defaults.serviceVpnId;
    	      this.tlocAction = defaults.tlocAction;
    	      this.tlocColor = defaults.tlocColor;
    	      this.tlocEncapsulation = defaults.tlocEncapsulation;
    	      this.tlocIp = defaults.tlocIp;
    	      this.tlocListId = defaults.tlocListId;
    	      this.tlocListVersion = defaults.tlocListVersion;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder community(@Nullable String community) {

            this.community = community;
            return this;
        }
        @CustomType.Setter
        public Builder communityAdditive(@Nullable Boolean communityAdditive) {

            this.communityAdditive = communityAdditive;
            return this;
        }
        @CustomType.Setter
        public Builder ompTag(@Nullable Integer ompTag) {

            this.ompTag = ompTag;
            return this;
        }
        @CustomType.Setter
        public Builder preference(@Nullable Integer preference) {

            this.preference = preference;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocColor(@Nullable String serviceTlocColor) {

            this.serviceTlocColor = serviceTlocColor;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocEncapsulation(@Nullable String serviceTlocEncapsulation) {

            this.serviceTlocEncapsulation = serviceTlocEncapsulation;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocIp(@Nullable String serviceTlocIp) {

            this.serviceTlocIp = serviceTlocIp;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocListId(@Nullable String serviceTlocListId) {

            this.serviceTlocListId = serviceTlocListId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocListVersion(@Nullable Integer serviceTlocListVersion) {

            this.serviceTlocListVersion = serviceTlocListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(@Nullable String serviceType) {

            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder serviceVpnId(@Nullable Integer serviceVpnId) {

            this.serviceVpnId = serviceVpnId;
            return this;
        }
        @CustomType.Setter
        public Builder tlocAction(@Nullable String tlocAction) {

            this.tlocAction = tlocAction;
            return this;
        }
        @CustomType.Setter
        public Builder tlocColor(@Nullable String tlocColor) {

            this.tlocColor = tlocColor;
            return this;
        }
        @CustomType.Setter
        public Builder tlocEncapsulation(@Nullable String tlocEncapsulation) {

            this.tlocEncapsulation = tlocEncapsulation;
            return this;
        }
        @CustomType.Setter
        public Builder tlocIp(@Nullable String tlocIp) {

            this.tlocIp = tlocIp;
            return this;
        }
        @CustomType.Setter
        public Builder tlocListId(@Nullable String tlocListId) {

            this.tlocListId = tlocListId;
            return this;
        }
        @CustomType.Setter
        public Builder tlocListVersion(@Nullable Integer tlocListVersion) {

            this.tlocListVersion = tlocListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter", "type");
            }
            this.type = type;
            return this;
        }
        public CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter build() {
            final var _resultValue = new CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter();
            _resultValue.community = community;
            _resultValue.communityAdditive = communityAdditive;
            _resultValue.ompTag = ompTag;
            _resultValue.preference = preference;
            _resultValue.serviceTlocColor = serviceTlocColor;
            _resultValue.serviceTlocEncapsulation = serviceTlocEncapsulation;
            _resultValue.serviceTlocIp = serviceTlocIp;
            _resultValue.serviceTlocListId = serviceTlocListId;
            _resultValue.serviceTlocListVersion = serviceTlocListVersion;
            _resultValue.serviceType = serviceType;
            _resultValue.serviceVpnId = serviceVpnId;
            _resultValue.tlocAction = tlocAction;
            _resultValue.tlocColor = tlocColor;
            _resultValue.tlocEncapsulation = tlocEncapsulation;
            _resultValue.tlocIp = tlocIp;
            _resultValue.tlocListId = tlocListId;
            _resultValue.tlocListVersion = tlocListVersion;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
