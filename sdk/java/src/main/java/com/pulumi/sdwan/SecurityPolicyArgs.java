// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.SecurityPolicyDefinitionArgs;
import com.pulumi.sdwan.inputs.SecurityPolicyLoggingArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityPolicyArgs Empty = new SecurityPolicyArgs();

    /**
     * Audit trail - Choices: `on`, `off`
     * 
     */
    @Import(name="auditTrail")
    private @Nullable Output<String> auditTrail;

    /**
     * @return Audit trail - Choices: `on`, `off`
     * 
     */
    public Optional<Output<String>> auditTrail() {
        return Optional.ofNullable(this.auditTrail);
    }

    /**
     * List of policy definitions
     * 
     */
    @Import(name="definitions", required=true)
    private Output<List<SecurityPolicyDefinitionArgs>> definitions;

    /**
     * @return List of policy definitions
     * 
     */
    public Output<List<SecurityPolicyDefinitionArgs>> definitions() {
        return this.definitions;
    }

    /**
     * The description of the security policy
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the security policy
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Bypass firewall policy and allow all Internet traffic to/from VPN 0 - Choices: `allow`, `deny`
     * 
     */
    @Import(name="directInternetApplications")
    private @Nullable Output<String> directInternetApplications;

    /**
     * @return Bypass firewall policy and allow all Internet traffic to/from VPN 0 - Choices: `allow`, `deny`
     * 
     */
    public Optional<Output<String>> directInternetApplications() {
        return Optional.ofNullable(this.directInternetApplications);
    }

    /**
     * Failure mode - Choices: `open`, `close` - Default value: `open`
     * 
     */
    @Import(name="failureMode")
    private @Nullable Output<String> failureMode;

    /**
     * @return Failure mode - Choices: `open`, `close` - Default value: `open`
     * 
     */
    public Optional<Output<String>> failureMode() {
        return Optional.ofNullable(this.failureMode);
    }

    /**
     * High Speed Logging Server IP
     * 
     */
    @Import(name="highSpeedLoggingServerIp")
    private @Nullable Output<String> highSpeedLoggingServerIp;

    /**
     * @return High Speed Logging Server IP
     * 
     */
    public Optional<Output<String>> highSpeedLoggingServerIp() {
        return Optional.ofNullable(this.highSpeedLoggingServerIp);
    }

    /**
     * High Speed Logging Port
     * 
     */
    @Import(name="highSpeedLoggingServerPort")
    private @Nullable Output<String> highSpeedLoggingServerPort;

    /**
     * @return High Speed Logging Port
     * 
     */
    public Optional<Output<String>> highSpeedLoggingServerPort() {
        return Optional.ofNullable(this.highSpeedLoggingServerPort);
    }

    /**
     * High Speed Logging VPN
     * 
     */
    @Import(name="highSpeedLoggingVpn")
    private @Nullable Output<String> highSpeedLoggingVpn;

    /**
     * @return High Speed Logging VPN
     * 
     */
    public Optional<Output<String>> highSpeedLoggingVpn() {
        return Optional.ofNullable(this.highSpeedLoggingVpn);
    }

    @Import(name="loggings")
    private @Nullable Output<List<SecurityPolicyLoggingArgs>> loggings;

    public Optional<Output<List<SecurityPolicyLoggingArgs>>> loggings() {
        return Optional.ofNullable(this.loggings);
    }

    /**
     * Match Statistics per-filter - Choices: `on`, `off`
     * 
     */
    @Import(name="matchStatisticsPerFilter")
    private @Nullable Output<String> matchStatisticsPerFilter;

    /**
     * @return Match Statistics per-filter - Choices: `on`, `off`
     * 
     */
    public Optional<Output<String>> matchStatisticsPerFilter() {
        return Optional.ofNullable(this.matchStatisticsPerFilter);
    }

    /**
     * The policy mode - Choices: `security`, `unified` - Default value: `security`
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The policy mode - Choices: `security`, `unified` - Default value: `security`
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name of the security policy
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the security policy
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * TCP SYN Flood Limit, value from 1 to 4294967295
     * 
     */
    @Import(name="tcpSynFloodLimit")
    private @Nullable Output<String> tcpSynFloodLimit;

    /**
     * @return TCP SYN Flood Limit, value from 1 to 4294967295
     * 
     */
    public Optional<Output<String>> tcpSynFloodLimit() {
        return Optional.ofNullable(this.tcpSynFloodLimit);
    }

    /**
     * The use case of the security policy - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`,
     * `directInternetAccess`, `directCloudAccess` - Default value: `custom`
     * 
     */
    @Import(name="useCase")
    private @Nullable Output<String> useCase;

    /**
     * @return The use case of the security policy - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`,
     * `directInternetAccess`, `directCloudAccess` - Default value: `custom`
     * 
     */
    public Optional<Output<String>> useCase() {
        return Optional.ofNullable(this.useCase);
    }

    private SecurityPolicyArgs() {}

    private SecurityPolicyArgs(SecurityPolicyArgs $) {
        this.auditTrail = $.auditTrail;
        this.definitions = $.definitions;
        this.description = $.description;
        this.directInternetApplications = $.directInternetApplications;
        this.failureMode = $.failureMode;
        this.highSpeedLoggingServerIp = $.highSpeedLoggingServerIp;
        this.highSpeedLoggingServerPort = $.highSpeedLoggingServerPort;
        this.highSpeedLoggingVpn = $.highSpeedLoggingVpn;
        this.loggings = $.loggings;
        this.matchStatisticsPerFilter = $.matchStatisticsPerFilter;
        this.mode = $.mode;
        this.name = $.name;
        this.tcpSynFloodLimit = $.tcpSynFloodLimit;
        this.useCase = $.useCase;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityPolicyArgs $;

        public Builder() {
            $ = new SecurityPolicyArgs();
        }

        public Builder(SecurityPolicyArgs defaults) {
            $ = new SecurityPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auditTrail Audit trail - Choices: `on`, `off`
         * 
         * @return builder
         * 
         */
        public Builder auditTrail(@Nullable Output<String> auditTrail) {
            $.auditTrail = auditTrail;
            return this;
        }

        /**
         * @param auditTrail Audit trail - Choices: `on`, `off`
         * 
         * @return builder
         * 
         */
        public Builder auditTrail(String auditTrail) {
            return auditTrail(Output.of(auditTrail));
        }

        /**
         * @param definitions List of policy definitions
         * 
         * @return builder
         * 
         */
        public Builder definitions(Output<List<SecurityPolicyDefinitionArgs>> definitions) {
            $.definitions = definitions;
            return this;
        }

        /**
         * @param definitions List of policy definitions
         * 
         * @return builder
         * 
         */
        public Builder definitions(List<SecurityPolicyDefinitionArgs> definitions) {
            return definitions(Output.of(definitions));
        }

        /**
         * @param definitions List of policy definitions
         * 
         * @return builder
         * 
         */
        public Builder definitions(SecurityPolicyDefinitionArgs... definitions) {
            return definitions(List.of(definitions));
        }

        /**
         * @param description The description of the security policy
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the security policy
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param directInternetApplications Bypass firewall policy and allow all Internet traffic to/from VPN 0 - Choices: `allow`, `deny`
         * 
         * @return builder
         * 
         */
        public Builder directInternetApplications(@Nullable Output<String> directInternetApplications) {
            $.directInternetApplications = directInternetApplications;
            return this;
        }

        /**
         * @param directInternetApplications Bypass firewall policy and allow all Internet traffic to/from VPN 0 - Choices: `allow`, `deny`
         * 
         * @return builder
         * 
         */
        public Builder directInternetApplications(String directInternetApplications) {
            return directInternetApplications(Output.of(directInternetApplications));
        }

        /**
         * @param failureMode Failure mode - Choices: `open`, `close` - Default value: `open`
         * 
         * @return builder
         * 
         */
        public Builder failureMode(@Nullable Output<String> failureMode) {
            $.failureMode = failureMode;
            return this;
        }

        /**
         * @param failureMode Failure mode - Choices: `open`, `close` - Default value: `open`
         * 
         * @return builder
         * 
         */
        public Builder failureMode(String failureMode) {
            return failureMode(Output.of(failureMode));
        }

        /**
         * @param highSpeedLoggingServerIp High Speed Logging Server IP
         * 
         * @return builder
         * 
         */
        public Builder highSpeedLoggingServerIp(@Nullable Output<String> highSpeedLoggingServerIp) {
            $.highSpeedLoggingServerIp = highSpeedLoggingServerIp;
            return this;
        }

        /**
         * @param highSpeedLoggingServerIp High Speed Logging Server IP
         * 
         * @return builder
         * 
         */
        public Builder highSpeedLoggingServerIp(String highSpeedLoggingServerIp) {
            return highSpeedLoggingServerIp(Output.of(highSpeedLoggingServerIp));
        }

        /**
         * @param highSpeedLoggingServerPort High Speed Logging Port
         * 
         * @return builder
         * 
         */
        public Builder highSpeedLoggingServerPort(@Nullable Output<String> highSpeedLoggingServerPort) {
            $.highSpeedLoggingServerPort = highSpeedLoggingServerPort;
            return this;
        }

        /**
         * @param highSpeedLoggingServerPort High Speed Logging Port
         * 
         * @return builder
         * 
         */
        public Builder highSpeedLoggingServerPort(String highSpeedLoggingServerPort) {
            return highSpeedLoggingServerPort(Output.of(highSpeedLoggingServerPort));
        }

        /**
         * @param highSpeedLoggingVpn High Speed Logging VPN
         * 
         * @return builder
         * 
         */
        public Builder highSpeedLoggingVpn(@Nullable Output<String> highSpeedLoggingVpn) {
            $.highSpeedLoggingVpn = highSpeedLoggingVpn;
            return this;
        }

        /**
         * @param highSpeedLoggingVpn High Speed Logging VPN
         * 
         * @return builder
         * 
         */
        public Builder highSpeedLoggingVpn(String highSpeedLoggingVpn) {
            return highSpeedLoggingVpn(Output.of(highSpeedLoggingVpn));
        }

        public Builder loggings(@Nullable Output<List<SecurityPolicyLoggingArgs>> loggings) {
            $.loggings = loggings;
            return this;
        }

        public Builder loggings(List<SecurityPolicyLoggingArgs> loggings) {
            return loggings(Output.of(loggings));
        }

        public Builder loggings(SecurityPolicyLoggingArgs... loggings) {
            return loggings(List.of(loggings));
        }

        /**
         * @param matchStatisticsPerFilter Match Statistics per-filter - Choices: `on`, `off`
         * 
         * @return builder
         * 
         */
        public Builder matchStatisticsPerFilter(@Nullable Output<String> matchStatisticsPerFilter) {
            $.matchStatisticsPerFilter = matchStatisticsPerFilter;
            return this;
        }

        /**
         * @param matchStatisticsPerFilter Match Statistics per-filter - Choices: `on`, `off`
         * 
         * @return builder
         * 
         */
        public Builder matchStatisticsPerFilter(String matchStatisticsPerFilter) {
            return matchStatisticsPerFilter(Output.of(matchStatisticsPerFilter));
        }

        /**
         * @param mode The policy mode - Choices: `security`, `unified` - Default value: `security`
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The policy mode - Choices: `security`, `unified` - Default value: `security`
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name of the security policy
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the security policy
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tcpSynFloodLimit TCP SYN Flood Limit, value from 1 to 4294967295
         * 
         * @return builder
         * 
         */
        public Builder tcpSynFloodLimit(@Nullable Output<String> tcpSynFloodLimit) {
            $.tcpSynFloodLimit = tcpSynFloodLimit;
            return this;
        }

        /**
         * @param tcpSynFloodLimit TCP SYN Flood Limit, value from 1 to 4294967295
         * 
         * @return builder
         * 
         */
        public Builder tcpSynFloodLimit(String tcpSynFloodLimit) {
            return tcpSynFloodLimit(Output.of(tcpSynFloodLimit));
        }

        /**
         * @param useCase The use case of the security policy - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`,
         * `directInternetAccess`, `directCloudAccess` - Default value: `custom`
         * 
         * @return builder
         * 
         */
        public Builder useCase(@Nullable Output<String> useCase) {
            $.useCase = useCase;
            return this;
        }

        /**
         * @param useCase The use case of the security policy - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`,
         * `directInternetAccess`, `directCloudAccess` - Default value: `custom`
         * 
         * @return builder
         * 
         */
        public Builder useCase(String useCase) {
            return useCase(Output.of(useCase));
        }

        public SecurityPolicyArgs build() {
            if ($.definitions == null) {
                throw new MissingRequiredPropertyException("SecurityPolicyArgs", "definitions");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("SecurityPolicyArgs", "description");
            }
            return $;
        }
    }

}
