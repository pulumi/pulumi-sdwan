// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HubAndSpokeTopologyPolicyDefinitionTopologyArgs extends com.pulumi.resources.ResourceArgs {

    public static final HubAndSpokeTopologyPolicyDefinitionTopologyArgs Empty = new HubAndSpokeTopologyPolicyDefinitionTopologyArgs();

    /**
     * Advertise Hub TLOCs
     * 
     */
    @Import(name="advertiseHubTlocs")
    private @Nullable Output<Boolean> advertiseHubTlocs;

    /**
     * @return Advertise Hub TLOCs
     * 
     */
    public Optional<Output<Boolean>> advertiseHubTlocs() {
        return Optional.ofNullable(this.advertiseHubTlocs);
    }

    /**
     * All hubs are equal (All Spokes Sites connect to all Hubs)
     * 
     */
    @Import(name="allHubsAreEqual")
    private @Nullable Output<Boolean> allHubsAreEqual;

    /**
     * @return All hubs are equal (All Spokes Sites connect to all Hubs)
     * 
     */
    public Optional<Output<Boolean>> allHubsAreEqual() {
        return Optional.ofNullable(this.allHubsAreEqual);
    }

    /**
     * Topology name
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Topology name
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * List of spokes
     * 
     */
    @Import(name="spokes")
    private @Nullable Output<List<HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs>> spokes;

    /**
     * @return List of spokes
     * 
     */
    public Optional<Output<List<HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs>>> spokes() {
        return Optional.ofNullable(this.spokes);
    }

    /**
     * TLOC list ID (required when `advertise_hub_tlocs` is &#39;true&#39;)
     * 
     */
    @Import(name="tlocListId")
    private @Nullable Output<String> tlocListId;

    /**
     * @return TLOC list ID (required when `advertise_hub_tlocs` is &#39;true&#39;)
     * 
     */
    public Optional<Output<String>> tlocListId() {
        return Optional.ofNullable(this.tlocListId);
    }

    private HubAndSpokeTopologyPolicyDefinitionTopologyArgs() {}

    private HubAndSpokeTopologyPolicyDefinitionTopologyArgs(HubAndSpokeTopologyPolicyDefinitionTopologyArgs $) {
        this.advertiseHubTlocs = $.advertiseHubTlocs;
        this.allHubsAreEqual = $.allHubsAreEqual;
        this.name = $.name;
        this.spokes = $.spokes;
        this.tlocListId = $.tlocListId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HubAndSpokeTopologyPolicyDefinitionTopologyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HubAndSpokeTopologyPolicyDefinitionTopologyArgs $;

        public Builder() {
            $ = new HubAndSpokeTopologyPolicyDefinitionTopologyArgs();
        }

        public Builder(HubAndSpokeTopologyPolicyDefinitionTopologyArgs defaults) {
            $ = new HubAndSpokeTopologyPolicyDefinitionTopologyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advertiseHubTlocs Advertise Hub TLOCs
         * 
         * @return builder
         * 
         */
        public Builder advertiseHubTlocs(@Nullable Output<Boolean> advertiseHubTlocs) {
            $.advertiseHubTlocs = advertiseHubTlocs;
            return this;
        }

        /**
         * @param advertiseHubTlocs Advertise Hub TLOCs
         * 
         * @return builder
         * 
         */
        public Builder advertiseHubTlocs(Boolean advertiseHubTlocs) {
            return advertiseHubTlocs(Output.of(advertiseHubTlocs));
        }

        /**
         * @param allHubsAreEqual All hubs are equal (All Spokes Sites connect to all Hubs)
         * 
         * @return builder
         * 
         */
        public Builder allHubsAreEqual(@Nullable Output<Boolean> allHubsAreEqual) {
            $.allHubsAreEqual = allHubsAreEqual;
            return this;
        }

        /**
         * @param allHubsAreEqual All hubs are equal (All Spokes Sites connect to all Hubs)
         * 
         * @return builder
         * 
         */
        public Builder allHubsAreEqual(Boolean allHubsAreEqual) {
            return allHubsAreEqual(Output.of(allHubsAreEqual));
        }

        /**
         * @param name Topology name
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Topology name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param spokes List of spokes
         * 
         * @return builder
         * 
         */
        public Builder spokes(@Nullable Output<List<HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs>> spokes) {
            $.spokes = spokes;
            return this;
        }

        /**
         * @param spokes List of spokes
         * 
         * @return builder
         * 
         */
        public Builder spokes(List<HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs> spokes) {
            return spokes(Output.of(spokes));
        }

        /**
         * @param spokes List of spokes
         * 
         * @return builder
         * 
         */
        public Builder spokes(HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs... spokes) {
            return spokes(List.of(spokes));
        }

        /**
         * @param tlocListId TLOC list ID (required when `advertise_hub_tlocs` is &#39;true&#39;)
         * 
         * @return builder
         * 
         */
        public Builder tlocListId(@Nullable Output<String> tlocListId) {
            $.tlocListId = tlocListId;
            return this;
        }

        /**
         * @param tlocListId TLOC list ID (required when `advertise_hub_tlocs` is &#39;true&#39;)
         * 
         * @return builder
         * 
         */
        public Builder tlocListId(String tlocListId) {
            return tlocListId(Output.of(tlocListId));
        }

        public HubAndSpokeTopologyPolicyDefinitionTopologyArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("HubAndSpokeTopologyPolicyDefinitionTopologyArgs", "name");
            }
            return $;
        }
    }

}
