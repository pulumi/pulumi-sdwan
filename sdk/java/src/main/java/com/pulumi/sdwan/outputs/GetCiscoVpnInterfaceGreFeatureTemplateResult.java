// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceGreFeatureTemplateAccessList;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoVpnInterfaceGreFeatureTemplateResult {
    /**
     * @return Apply ACL
     * 
     */
    private List<GetCiscoVpnInterfaceGreFeatureTemplateAccessList> accessLists;
    /**
     * @return Enable Application Tunnel Type
     * 
     */
    private String application;
    /**
     * @return Variable name
     * 
     */
    private String applicationVariable;
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    private Boolean clearDontFragment;
    /**
     * @return Variable name
     * 
     */
    private String clearDontFragmentVariable;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Interface description
     * 
     */
    private String interfaceDescription;
    /**
     * @return Variable name
     * 
     */
    private String interfaceDescriptionVariable;
    /**
     * @return Interface name: ge0/\n\n or ge0/\n\n.vlanid or irbbridgeid:1-63 or loopback\n\n or natpool-\n\n when present
     * 
     */
    private String interfaceName;
    /**
     * @return Variable name
     * 
     */
    private String interfaceNameVariable;
    /**
     * @return Assign IPv4 address
     * 
     */
    private String ipAddress;
    /**
     * @return Variable name
     * 
     */
    private String ipAddressVariable;
    /**
     * @return Interface MTU \n\n, in bytes
     * 
     */
    private Integer ipMtu;
    /**
     * @return Variable name
     * 
     */
    private String ipMtuVariable;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Name of rewrite rule
     * 
     */
    private String rewriteRule;
    /**
     * @return Variable name
     * 
     */
    private String rewriteRuleVariable;
    /**
     * @return Administrative state
     * 
     */
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tcpMssAdjust;
    /**
     * @return Variable name
     * 
     */
    private String tcpMssAdjustVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return Variable name
     * 
     */
    private String trackerVariable;
    /**
     * @return Enable tracker for this interface
     * 
     */
    private List<String> trackers;
    /**
     * @return Tunnel destination IP Address
     * 
     */
    private String tunnelDestination;
    /**
     * @return Variable name
     * 
     */
    private String tunnelDestinationVariable;
    /**
     * @return \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     * 
     */
    private String tunnelRouteVia;
    /**
     * @return Variable name
     * 
     */
    private String tunnelRouteViaVariable;
    /**
     * @return Tunnel source IP Address
     * 
     */
    private String tunnelSource;
    /**
     * @return \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     * 
     */
    private String tunnelSourceInterface;
    /**
     * @return Variable name
     * 
     */
    private String tunnelSourceInterfaceVariable;
    /**
     * @return Variable name
     * 
     */
    private String tunnelSourceVariable;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCiscoVpnInterfaceGreFeatureTemplateResult() {}
    /**
     * @return Apply ACL
     * 
     */
    public List<GetCiscoVpnInterfaceGreFeatureTemplateAccessList> accessLists() {
        return this.accessLists;
    }
    /**
     * @return Enable Application Tunnel Type
     * 
     */
    public String application() {
        return this.application;
    }
    /**
     * @return Variable name
     * 
     */
    public String applicationVariable() {
        return this.applicationVariable;
    }
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    public Boolean clearDontFragment() {
        return this.clearDontFragment;
    }
    /**
     * @return Variable name
     * 
     */
    public String clearDontFragmentVariable() {
        return this.clearDontFragmentVariable;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Interface description
     * 
     */
    public String interfaceDescription() {
        return this.interfaceDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceDescriptionVariable() {
        return this.interfaceDescriptionVariable;
    }
    /**
     * @return Interface name: ge0/\n\n or ge0/\n\n.vlanid or irbbridgeid:1-63 or loopback\n\n or natpool-\n\n when present
     * 
     */
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceNameVariable() {
        return this.interfaceNameVariable;
    }
    /**
     * @return Assign IPv4 address
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipAddressVariable() {
        return this.ipAddressVariable;
    }
    /**
     * @return Interface MTU \n\n, in bytes
     * 
     */
    public Integer ipMtu() {
        return this.ipMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipMtuVariable() {
        return this.ipMtuVariable;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Name of rewrite rule
     * 
     */
    public String rewriteRule() {
        return this.rewriteRule;
    }
    /**
     * @return Variable name
     * 
     */
    public String rewriteRuleVariable() {
        return this.rewriteRuleVariable;
    }
    /**
     * @return Administrative state
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tcpMssAdjust() {
        return this.tcpMssAdjust;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpMssAdjustVariable() {
        return this.tcpMssAdjustVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackerVariable() {
        return this.trackerVariable;
    }
    /**
     * @return Enable tracker for this interface
     * 
     */
    public List<String> trackers() {
        return this.trackers;
    }
    /**
     * @return Tunnel destination IP Address
     * 
     */
    public String tunnelDestination() {
        return this.tunnelDestination;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelDestinationVariable() {
        return this.tunnelDestinationVariable;
    }
    /**
     * @return \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     * 
     */
    public String tunnelRouteVia() {
        return this.tunnelRouteVia;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelRouteViaVariable() {
        return this.tunnelRouteViaVariable;
    }
    /**
     * @return Tunnel source IP Address
     * 
     */
    public String tunnelSource() {
        return this.tunnelSource;
    }
    /**
     * @return \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     * 
     */
    public String tunnelSourceInterface() {
        return this.tunnelSourceInterface;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelSourceInterfaceVariable() {
        return this.tunnelSourceInterfaceVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelSourceVariable() {
        return this.tunnelSourceVariable;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoVpnInterfaceGreFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCiscoVpnInterfaceGreFeatureTemplateAccessList> accessLists;
        private String application;
        private String applicationVariable;
        private Boolean clearDontFragment;
        private String clearDontFragmentVariable;
        private String description;
        private List<String> deviceTypes;
        private String id;
        private String interfaceDescription;
        private String interfaceDescriptionVariable;
        private String interfaceName;
        private String interfaceNameVariable;
        private String ipAddress;
        private String ipAddressVariable;
        private Integer ipMtu;
        private String ipMtuVariable;
        private String name;
        private String rewriteRule;
        private String rewriteRuleVariable;
        private Boolean shutdown;
        private String shutdownVariable;
        private Integer tcpMssAdjust;
        private String tcpMssAdjustVariable;
        private String templateType;
        private String trackerVariable;
        private List<String> trackers;
        private String tunnelDestination;
        private String tunnelDestinationVariable;
        private String tunnelRouteVia;
        private String tunnelRouteViaVariable;
        private String tunnelSource;
        private String tunnelSourceInterface;
        private String tunnelSourceInterfaceVariable;
        private String tunnelSourceVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetCiscoVpnInterfaceGreFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLists = defaults.accessLists;
    	      this.application = defaults.application;
    	      this.applicationVariable = defaults.applicationVariable;
    	      this.clearDontFragment = defaults.clearDontFragment;
    	      this.clearDontFragmentVariable = defaults.clearDontFragmentVariable;
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.id = defaults.id;
    	      this.interfaceDescription = defaults.interfaceDescription;
    	      this.interfaceDescriptionVariable = defaults.interfaceDescriptionVariable;
    	      this.interfaceName = defaults.interfaceName;
    	      this.interfaceNameVariable = defaults.interfaceNameVariable;
    	      this.ipAddress = defaults.ipAddress;
    	      this.ipAddressVariable = defaults.ipAddressVariable;
    	      this.ipMtu = defaults.ipMtu;
    	      this.ipMtuVariable = defaults.ipMtuVariable;
    	      this.name = defaults.name;
    	      this.rewriteRule = defaults.rewriteRule;
    	      this.rewriteRuleVariable = defaults.rewriteRuleVariable;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.tcpMssAdjust = defaults.tcpMssAdjust;
    	      this.tcpMssAdjustVariable = defaults.tcpMssAdjustVariable;
    	      this.templateType = defaults.templateType;
    	      this.trackerVariable = defaults.trackerVariable;
    	      this.trackers = defaults.trackers;
    	      this.tunnelDestination = defaults.tunnelDestination;
    	      this.tunnelDestinationVariable = defaults.tunnelDestinationVariable;
    	      this.tunnelRouteVia = defaults.tunnelRouteVia;
    	      this.tunnelRouteViaVariable = defaults.tunnelRouteViaVariable;
    	      this.tunnelSource = defaults.tunnelSource;
    	      this.tunnelSourceInterface = defaults.tunnelSourceInterface;
    	      this.tunnelSourceInterfaceVariable = defaults.tunnelSourceInterfaceVariable;
    	      this.tunnelSourceVariable = defaults.tunnelSourceVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder accessLists(List<GetCiscoVpnInterfaceGreFeatureTemplateAccessList> accessLists) {
            if (accessLists == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "accessLists");
            }
            this.accessLists = accessLists;
            return this;
        }
        public Builder accessLists(GetCiscoVpnInterfaceGreFeatureTemplateAccessList... accessLists) {
            return accessLists(List.of(accessLists));
        }
        @CustomType.Setter
        public Builder application(String application) {
            if (application == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "application");
            }
            this.application = application;
            return this;
        }
        @CustomType.Setter
        public Builder applicationVariable(String applicationVariable) {
            if (applicationVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "applicationVariable");
            }
            this.applicationVariable = applicationVariable;
            return this;
        }
        @CustomType.Setter
        public Builder clearDontFragment(Boolean clearDontFragment) {
            if (clearDontFragment == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "clearDontFragment");
            }
            this.clearDontFragment = clearDontFragment;
            return this;
        }
        @CustomType.Setter
        public Builder clearDontFragmentVariable(String clearDontFragmentVariable) {
            if (clearDontFragmentVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "clearDontFragmentVariable");
            }
            this.clearDontFragmentVariable = clearDontFragmentVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescription(String interfaceDescription) {
            if (interfaceDescription == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "interfaceDescription");
            }
            this.interfaceDescription = interfaceDescription;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            if (interfaceDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "interfaceDescriptionVariable");
            }
            this.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(String interfaceName) {
            if (interfaceName == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "interfaceName");
            }
            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            if (interfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "interfaceNameVariable");
            }
            this.interfaceNameVariable = interfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddressVariable(String ipAddressVariable) {
            if (ipAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "ipAddressVariable");
            }
            this.ipAddressVariable = ipAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtu(Integer ipMtu) {
            if (ipMtu == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "ipMtu");
            }
            this.ipMtu = ipMtu;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtuVariable(String ipMtuVariable) {
            if (ipMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "ipMtuVariable");
            }
            this.ipMtuVariable = ipMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRule(String rewriteRule) {
            if (rewriteRule == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "rewriteRule");
            }
            this.rewriteRule = rewriteRule;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRuleVariable(String rewriteRuleVariable) {
            if (rewriteRuleVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "rewriteRuleVariable");
            }
            this.rewriteRuleVariable = rewriteRuleVariable;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssAdjust(Integer tcpMssAdjust) {
            if (tcpMssAdjust == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "tcpMssAdjust");
            }
            this.tcpMssAdjust = tcpMssAdjust;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssAdjustVariable(String tcpMssAdjustVariable) {
            if (tcpMssAdjustVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "tcpMssAdjustVariable");
            }
            this.tcpMssAdjustVariable = tcpMssAdjustVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder trackerVariable(String trackerVariable) {
            if (trackerVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "trackerVariable");
            }
            this.trackerVariable = trackerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackers(List<String> trackers) {
            if (trackers == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "trackers");
            }
            this.trackers = trackers;
            return this;
        }
        public Builder trackers(String... trackers) {
            return trackers(List.of(trackers));
        }
        @CustomType.Setter
        public Builder tunnelDestination(String tunnelDestination) {
            if (tunnelDestination == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "tunnelDestination");
            }
            this.tunnelDestination = tunnelDestination;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDestinationVariable(String tunnelDestinationVariable) {
            if (tunnelDestinationVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "tunnelDestinationVariable");
            }
            this.tunnelDestinationVariable = tunnelDestinationVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelRouteVia(String tunnelRouteVia) {
            if (tunnelRouteVia == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "tunnelRouteVia");
            }
            this.tunnelRouteVia = tunnelRouteVia;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelRouteViaVariable(String tunnelRouteViaVariable) {
            if (tunnelRouteViaVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "tunnelRouteViaVariable");
            }
            this.tunnelRouteViaVariable = tunnelRouteViaVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSource(String tunnelSource) {
            if (tunnelSource == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "tunnelSource");
            }
            this.tunnelSource = tunnelSource;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceInterface(String tunnelSourceInterface) {
            if (tunnelSourceInterface == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "tunnelSourceInterface");
            }
            this.tunnelSourceInterface = tunnelSourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceInterfaceVariable(String tunnelSourceInterfaceVariable) {
            if (tunnelSourceInterfaceVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "tunnelSourceInterfaceVariable");
            }
            this.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceVariable(String tunnelSourceVariable) {
            if (tunnelSourceVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "tunnelSourceVariable");
            }
            this.tunnelSourceVariable = tunnelSourceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceGreFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCiscoVpnInterfaceGreFeatureTemplateResult build() {
            final var _resultValue = new GetCiscoVpnInterfaceGreFeatureTemplateResult();
            _resultValue.accessLists = accessLists;
            _resultValue.application = application;
            _resultValue.applicationVariable = applicationVariable;
            _resultValue.clearDontFragment = clearDontFragment;
            _resultValue.clearDontFragmentVariable = clearDontFragmentVariable;
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.id = id;
            _resultValue.interfaceDescription = interfaceDescription;
            _resultValue.interfaceDescriptionVariable = interfaceDescriptionVariable;
            _resultValue.interfaceName = interfaceName;
            _resultValue.interfaceNameVariable = interfaceNameVariable;
            _resultValue.ipAddress = ipAddress;
            _resultValue.ipAddressVariable = ipAddressVariable;
            _resultValue.ipMtu = ipMtu;
            _resultValue.ipMtuVariable = ipMtuVariable;
            _resultValue.name = name;
            _resultValue.rewriteRule = rewriteRule;
            _resultValue.rewriteRuleVariable = rewriteRuleVariable;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.tcpMssAdjust = tcpMssAdjust;
            _resultValue.tcpMssAdjustVariable = tcpMssAdjustVariable;
            _resultValue.templateType = templateType;
            _resultValue.trackerVariable = trackerVariable;
            _resultValue.trackers = trackers;
            _resultValue.tunnelDestination = tunnelDestination;
            _resultValue.tunnelDestinationVariable = tunnelDestinationVariable;
            _resultValue.tunnelRouteVia = tunnelRouteVia;
            _resultValue.tunnelRouteViaVariable = tunnelRouteViaVariable;
            _resultValue.tunnelSource = tunnelSource;
            _resultValue.tunnelSourceInterface = tunnelSourceInterface;
            _resultValue.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            _resultValue.tunnelSourceVariable = tunnelSourceVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
