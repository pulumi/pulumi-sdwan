// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTransportIpv4AclFeatureSequenceAction {
    /**
     * @return Counter Name
     * 
     */
    private String acceptCounterName;
    /**
     * @return Enable Log
     * 
     */
    private Boolean acceptLog;
    private String acceptMirrorListId;
    private String acceptPolicerId;
    /**
     * @return DSCP number
     * 
     */
    private Integer acceptSetDscp;
    /**
     * @return Set Next Hop (IPV4 address)
     * 
     */
    private String acceptSetNextHop;
    /**
     * @return Counter Name
     * 
     */
    private String dropCounterName;
    /**
     * @return Enable Log
     * 
     */
    private Boolean dropLog;

    private GetTransportIpv4AclFeatureSequenceAction() {}
    /**
     * @return Counter Name
     * 
     */
    public String acceptCounterName() {
        return this.acceptCounterName;
    }
    /**
     * @return Enable Log
     * 
     */
    public Boolean acceptLog() {
        return this.acceptLog;
    }
    public String acceptMirrorListId() {
        return this.acceptMirrorListId;
    }
    public String acceptPolicerId() {
        return this.acceptPolicerId;
    }
    /**
     * @return DSCP number
     * 
     */
    public Integer acceptSetDscp() {
        return this.acceptSetDscp;
    }
    /**
     * @return Set Next Hop (IPV4 address)
     * 
     */
    public String acceptSetNextHop() {
        return this.acceptSetNextHop;
    }
    /**
     * @return Counter Name
     * 
     */
    public String dropCounterName() {
        return this.dropCounterName;
    }
    /**
     * @return Enable Log
     * 
     */
    public Boolean dropLog() {
        return this.dropLog;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransportIpv4AclFeatureSequenceAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acceptCounterName;
        private Boolean acceptLog;
        private String acceptMirrorListId;
        private String acceptPolicerId;
        private Integer acceptSetDscp;
        private String acceptSetNextHop;
        private String dropCounterName;
        private Boolean dropLog;
        public Builder() {}
        public Builder(GetTransportIpv4AclFeatureSequenceAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptCounterName = defaults.acceptCounterName;
    	      this.acceptLog = defaults.acceptLog;
    	      this.acceptMirrorListId = defaults.acceptMirrorListId;
    	      this.acceptPolicerId = defaults.acceptPolicerId;
    	      this.acceptSetDscp = defaults.acceptSetDscp;
    	      this.acceptSetNextHop = defaults.acceptSetNextHop;
    	      this.dropCounterName = defaults.dropCounterName;
    	      this.dropLog = defaults.dropLog;
        }

        @CustomType.Setter
        public Builder acceptCounterName(String acceptCounterName) {
            if (acceptCounterName == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceAction", "acceptCounterName");
            }
            this.acceptCounterName = acceptCounterName;
            return this;
        }
        @CustomType.Setter
        public Builder acceptLog(Boolean acceptLog) {
            if (acceptLog == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceAction", "acceptLog");
            }
            this.acceptLog = acceptLog;
            return this;
        }
        @CustomType.Setter
        public Builder acceptMirrorListId(String acceptMirrorListId) {
            if (acceptMirrorListId == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceAction", "acceptMirrorListId");
            }
            this.acceptMirrorListId = acceptMirrorListId;
            return this;
        }
        @CustomType.Setter
        public Builder acceptPolicerId(String acceptPolicerId) {
            if (acceptPolicerId == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceAction", "acceptPolicerId");
            }
            this.acceptPolicerId = acceptPolicerId;
            return this;
        }
        @CustomType.Setter
        public Builder acceptSetDscp(Integer acceptSetDscp) {
            if (acceptSetDscp == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceAction", "acceptSetDscp");
            }
            this.acceptSetDscp = acceptSetDscp;
            return this;
        }
        @CustomType.Setter
        public Builder acceptSetNextHop(String acceptSetNextHop) {
            if (acceptSetNextHop == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceAction", "acceptSetNextHop");
            }
            this.acceptSetNextHop = acceptSetNextHop;
            return this;
        }
        @CustomType.Setter
        public Builder dropCounterName(String dropCounterName) {
            if (dropCounterName == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceAction", "dropCounterName");
            }
            this.dropCounterName = dropCounterName;
            return this;
        }
        @CustomType.Setter
        public Builder dropLog(Boolean dropLog) {
            if (dropLog == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceAction", "dropLog");
            }
            this.dropLog = dropLog;
            return this;
        }
        public GetTransportIpv4AclFeatureSequenceAction build() {
            final var _resultValue = new GetTransportIpv4AclFeatureSequenceAction();
            _resultValue.acceptCounterName = acceptCounterName;
            _resultValue.acceptLog = acceptLog;
            _resultValue.acceptMirrorListId = acceptMirrorListId;
            _resultValue.acceptPolicerId = acceptPolicerId;
            _resultValue.acceptSetDscp = acceptSetDscp;
            _resultValue.acceptSetNextHop = acceptSetNextHop;
            _resultValue.dropCounterName = dropCounterName;
            _resultValue.dropLog = dropLog;
            return _resultValue;
        }
    }
}
