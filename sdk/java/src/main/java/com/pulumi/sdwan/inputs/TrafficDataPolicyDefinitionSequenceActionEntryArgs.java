// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs;
import com.pulumi.sdwan.inputs.TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrafficDataPolicyDefinitionSequenceActionEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final TrafficDataPolicyDefinitionSequenceActionEntryArgs Empty = new TrafficDataPolicyDefinitionSequenceActionEntryArgs();

    /**
     * Enable cflowd
     * 
     */
    @Import(name="cflowd")
    private @Nullable Output<Boolean> cflowd;

    /**
     * @return Enable cflowd
     * 
     */
    public Optional<Output<Boolean>> cflowd() {
        return Optional.ofNullable(this.cflowd);
    }

    /**
     * Counter name
     * 
     */
    @Import(name="counter")
    private @Nullable Output<String> counter;

    /**
     * @return Counter name
     * 
     */
    public Optional<Output<String>> counter() {
        return Optional.ofNullable(this.counter);
    }

    /**
     * Enable DRE optimization
     * 
     */
    @Import(name="dreOptimization")
    private @Nullable Output<Boolean> dreOptimization;

    /**
     * @return Enable DRE optimization
     * 
     */
    public Optional<Output<Boolean>> dreOptimization() {
        return Optional.ofNullable(this.dreOptimization);
    }

    /**
     * Enable fallback to routing
     * 
     */
    @Import(name="fallbackToRouting")
    private @Nullable Output<Boolean> fallbackToRouting;

    /**
     * @return Enable fallback to routing
     * 
     */
    public Optional<Output<Boolean>> fallbackToRouting() {
        return Optional.ofNullable(this.fallbackToRouting);
    }

    /**
     * Enable logging
     * 
     */
    @Import(name="log")
    private @Nullable Output<Boolean> log;

    /**
     * @return Enable logging
     * 
     */
    public Optional<Output<Boolean>> log() {
        return Optional.ofNullable(this.log);
    }

    /**
     * Loss correction
     *   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
     * 
     */
    @Import(name="lossCorrection")
    private @Nullable Output<String> lossCorrection;

    /**
     * @return Loss correction
     *   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
     * 
     */
    public Optional<Output<String>> lossCorrection() {
        return Optional.ofNullable(this.lossCorrection);
    }

    /**
     * Loss correction FEC
     *   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
     * 
     */
    @Import(name="lossCorrectionFec")
    private @Nullable Output<String> lossCorrectionFec;

    /**
     * @return Loss correction FEC
     *   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
     * 
     */
    public Optional<Output<String>> lossCorrectionFec() {
        return Optional.ofNullable(this.lossCorrectionFec);
    }

    /**
     * Loss correction FEC threshold
     *   - Range: `1`-`5`
     * 
     */
    @Import(name="lossCorrectionFecThreshold")
    private @Nullable Output<Integer> lossCorrectionFecThreshold;

    /**
     * @return Loss correction FEC threshold
     *   - Range: `1`-`5`
     * 
     */
    public Optional<Output<Integer>> lossCorrectionFecThreshold() {
        return Optional.ofNullable(this.lossCorrectionFecThreshold);
    }

    /**
     * List of NAT parameters
     * 
     */
    @Import(name="natParameters")
    private @Nullable Output<List<TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs>> natParameters;

    /**
     * @return List of NAT parameters
     * 
     */
    public Optional<Output<List<TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs>>> natParameters() {
        return Optional.ofNullable(this.natParameters);
    }

    /**
     * NAT pool
     *   - Choices: `pool`
     * 
     */
    @Import(name="natPool")
    private @Nullable Output<String> natPool;

    /**
     * @return NAT pool
     *   - Choices: `pool`
     * 
     */
    public Optional<Output<String>> natPool() {
        return Optional.ofNullable(this.natPool);
    }

    /**
     * NAT pool ID
     *   - Range: `1`-`31`
     * 
     */
    @Import(name="natPoolId")
    private @Nullable Output<Integer> natPoolId;

    /**
     * @return NAT pool ID
     *   - Range: `1`-`31`
     * 
     */
    public Optional<Output<Integer>> natPoolId() {
        return Optional.ofNullable(this.natPoolId);
    }

    /**
     * Redirect DNS
     *   - Choices: `dnsType`, `ipAddress`
     * 
     */
    @Import(name="redirectDns")
    private @Nullable Output<String> redirectDns;

    /**
     * @return Redirect DNS
     *   - Choices: `dnsType`, `ipAddress`
     * 
     */
    public Optional<Output<String>> redirectDns() {
        return Optional.ofNullable(this.redirectDns);
    }

    /**
     * Redirect DNS IP address
     * 
     */
    @Import(name="redirectDnsAddress")
    private @Nullable Output<String> redirectDnsAddress;

    /**
     * @return Redirect DNS IP address
     * 
     */
    public Optional<Output<String>> redirectDnsAddress() {
        return Optional.ofNullable(this.redirectDnsAddress);
    }

    /**
     * Redirect DNS type
     *   - Choices: `host`, `umbrella`
     * 
     */
    @Import(name="redirectDnsType")
    private @Nullable Output<String> redirectDnsType;

    /**
     * @return Redirect DNS type
     *   - Choices: `host`, `umbrella`
     * 
     */
    public Optional<Output<String>> redirectDnsType() {
        return Optional.ofNullable(this.redirectDnsType);
    }

    /**
     * Enable secure internet gateway
     * 
     */
    @Import(name="secureInternetGateway")
    private @Nullable Output<Boolean> secureInternetGateway;

    /**
     * @return Enable secure internet gateway
     * 
     */
    public Optional<Output<Boolean>> secureInternetGateway() {
        return Optional.ofNullable(this.secureInternetGateway);
    }

    /**
     * Service node group
     * 
     */
    @Import(name="serviceNodeGroup")
    private @Nullable Output<String> serviceNodeGroup;

    /**
     * @return Service node group
     * 
     */
    public Optional<Output<String>> serviceNodeGroup() {
        return Optional.ofNullable(this.serviceNodeGroup);
    }

    /**
     * List of set parameters
     * 
     */
    @Import(name="setParameters")
    private @Nullable Output<List<TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs>> setParameters;

    /**
     * @return List of set parameters
     * 
     */
    public Optional<Output<List<TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs>>> setParameters() {
        return Optional.ofNullable(this.setParameters);
    }

    /**
     * Enable TCP optimization
     * 
     */
    @Import(name="tcpOptimization")
    private @Nullable Output<Boolean> tcpOptimization;

    /**
     * @return Enable TCP optimization
     * 
     */
    public Optional<Output<Boolean>> tcpOptimization() {
        return Optional.ofNullable(this.tcpOptimization);
    }

    /**
     * Type of action entry
     *   - Choices: `cflowd`, `count`, `dreOptimization`, `fallbackToRouting`, `log`, `lossProtect`, `lossProtectFec`, `nat`, `redirectDns`, `serviceNodeGroup`, `set`, `sig`, `tcpOptimization`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of action entry
     *   - Choices: `cflowd`, `count`, `dreOptimization`, `fallbackToRouting`, `log`, `lossProtect`, `lossProtectFec`, `nat`, `redirectDns`, `serviceNodeGroup`, `set`, `sig`, `tcpOptimization`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private TrafficDataPolicyDefinitionSequenceActionEntryArgs() {}

    private TrafficDataPolicyDefinitionSequenceActionEntryArgs(TrafficDataPolicyDefinitionSequenceActionEntryArgs $) {
        this.cflowd = $.cflowd;
        this.counter = $.counter;
        this.dreOptimization = $.dreOptimization;
        this.fallbackToRouting = $.fallbackToRouting;
        this.log = $.log;
        this.lossCorrection = $.lossCorrection;
        this.lossCorrectionFec = $.lossCorrectionFec;
        this.lossCorrectionFecThreshold = $.lossCorrectionFecThreshold;
        this.natParameters = $.natParameters;
        this.natPool = $.natPool;
        this.natPoolId = $.natPoolId;
        this.redirectDns = $.redirectDns;
        this.redirectDnsAddress = $.redirectDnsAddress;
        this.redirectDnsType = $.redirectDnsType;
        this.secureInternetGateway = $.secureInternetGateway;
        this.serviceNodeGroup = $.serviceNodeGroup;
        this.setParameters = $.setParameters;
        this.tcpOptimization = $.tcpOptimization;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrafficDataPolicyDefinitionSequenceActionEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrafficDataPolicyDefinitionSequenceActionEntryArgs $;

        public Builder() {
            $ = new TrafficDataPolicyDefinitionSequenceActionEntryArgs();
        }

        public Builder(TrafficDataPolicyDefinitionSequenceActionEntryArgs defaults) {
            $ = new TrafficDataPolicyDefinitionSequenceActionEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cflowd Enable cflowd
         * 
         * @return builder
         * 
         */
        public Builder cflowd(@Nullable Output<Boolean> cflowd) {
            $.cflowd = cflowd;
            return this;
        }

        /**
         * @param cflowd Enable cflowd
         * 
         * @return builder
         * 
         */
        public Builder cflowd(Boolean cflowd) {
            return cflowd(Output.of(cflowd));
        }

        /**
         * @param counter Counter name
         * 
         * @return builder
         * 
         */
        public Builder counter(@Nullable Output<String> counter) {
            $.counter = counter;
            return this;
        }

        /**
         * @param counter Counter name
         * 
         * @return builder
         * 
         */
        public Builder counter(String counter) {
            return counter(Output.of(counter));
        }

        /**
         * @param dreOptimization Enable DRE optimization
         * 
         * @return builder
         * 
         */
        public Builder dreOptimization(@Nullable Output<Boolean> dreOptimization) {
            $.dreOptimization = dreOptimization;
            return this;
        }

        /**
         * @param dreOptimization Enable DRE optimization
         * 
         * @return builder
         * 
         */
        public Builder dreOptimization(Boolean dreOptimization) {
            return dreOptimization(Output.of(dreOptimization));
        }

        /**
         * @param fallbackToRouting Enable fallback to routing
         * 
         * @return builder
         * 
         */
        public Builder fallbackToRouting(@Nullable Output<Boolean> fallbackToRouting) {
            $.fallbackToRouting = fallbackToRouting;
            return this;
        }

        /**
         * @param fallbackToRouting Enable fallback to routing
         * 
         * @return builder
         * 
         */
        public Builder fallbackToRouting(Boolean fallbackToRouting) {
            return fallbackToRouting(Output.of(fallbackToRouting));
        }

        /**
         * @param log Enable logging
         * 
         * @return builder
         * 
         */
        public Builder log(@Nullable Output<Boolean> log) {
            $.log = log;
            return this;
        }

        /**
         * @param log Enable logging
         * 
         * @return builder
         * 
         */
        public Builder log(Boolean log) {
            return log(Output.of(log));
        }

        /**
         * @param lossCorrection Loss correction
         *   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
         * 
         * @return builder
         * 
         */
        public Builder lossCorrection(@Nullable Output<String> lossCorrection) {
            $.lossCorrection = lossCorrection;
            return this;
        }

        /**
         * @param lossCorrection Loss correction
         *   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
         * 
         * @return builder
         * 
         */
        public Builder lossCorrection(String lossCorrection) {
            return lossCorrection(Output.of(lossCorrection));
        }

        /**
         * @param lossCorrectionFec Loss correction FEC
         *   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
         * 
         * @return builder
         * 
         */
        public Builder lossCorrectionFec(@Nullable Output<String> lossCorrectionFec) {
            $.lossCorrectionFec = lossCorrectionFec;
            return this;
        }

        /**
         * @param lossCorrectionFec Loss correction FEC
         *   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
         * 
         * @return builder
         * 
         */
        public Builder lossCorrectionFec(String lossCorrectionFec) {
            return lossCorrectionFec(Output.of(lossCorrectionFec));
        }

        /**
         * @param lossCorrectionFecThreshold Loss correction FEC threshold
         *   - Range: `1`-`5`
         * 
         * @return builder
         * 
         */
        public Builder lossCorrectionFecThreshold(@Nullable Output<Integer> lossCorrectionFecThreshold) {
            $.lossCorrectionFecThreshold = lossCorrectionFecThreshold;
            return this;
        }

        /**
         * @param lossCorrectionFecThreshold Loss correction FEC threshold
         *   - Range: `1`-`5`
         * 
         * @return builder
         * 
         */
        public Builder lossCorrectionFecThreshold(Integer lossCorrectionFecThreshold) {
            return lossCorrectionFecThreshold(Output.of(lossCorrectionFecThreshold));
        }

        /**
         * @param natParameters List of NAT parameters
         * 
         * @return builder
         * 
         */
        public Builder natParameters(@Nullable Output<List<TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs>> natParameters) {
            $.natParameters = natParameters;
            return this;
        }

        /**
         * @param natParameters List of NAT parameters
         * 
         * @return builder
         * 
         */
        public Builder natParameters(List<TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs> natParameters) {
            return natParameters(Output.of(natParameters));
        }

        /**
         * @param natParameters List of NAT parameters
         * 
         * @return builder
         * 
         */
        public Builder natParameters(TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs... natParameters) {
            return natParameters(List.of(natParameters));
        }

        /**
         * @param natPool NAT pool
         *   - Choices: `pool`
         * 
         * @return builder
         * 
         */
        public Builder natPool(@Nullable Output<String> natPool) {
            $.natPool = natPool;
            return this;
        }

        /**
         * @param natPool NAT pool
         *   - Choices: `pool`
         * 
         * @return builder
         * 
         */
        public Builder natPool(String natPool) {
            return natPool(Output.of(natPool));
        }

        /**
         * @param natPoolId NAT pool ID
         *   - Range: `1`-`31`
         * 
         * @return builder
         * 
         */
        public Builder natPoolId(@Nullable Output<Integer> natPoolId) {
            $.natPoolId = natPoolId;
            return this;
        }

        /**
         * @param natPoolId NAT pool ID
         *   - Range: `1`-`31`
         * 
         * @return builder
         * 
         */
        public Builder natPoolId(Integer natPoolId) {
            return natPoolId(Output.of(natPoolId));
        }

        /**
         * @param redirectDns Redirect DNS
         *   - Choices: `dnsType`, `ipAddress`
         * 
         * @return builder
         * 
         */
        public Builder redirectDns(@Nullable Output<String> redirectDns) {
            $.redirectDns = redirectDns;
            return this;
        }

        /**
         * @param redirectDns Redirect DNS
         *   - Choices: `dnsType`, `ipAddress`
         * 
         * @return builder
         * 
         */
        public Builder redirectDns(String redirectDns) {
            return redirectDns(Output.of(redirectDns));
        }

        /**
         * @param redirectDnsAddress Redirect DNS IP address
         * 
         * @return builder
         * 
         */
        public Builder redirectDnsAddress(@Nullable Output<String> redirectDnsAddress) {
            $.redirectDnsAddress = redirectDnsAddress;
            return this;
        }

        /**
         * @param redirectDnsAddress Redirect DNS IP address
         * 
         * @return builder
         * 
         */
        public Builder redirectDnsAddress(String redirectDnsAddress) {
            return redirectDnsAddress(Output.of(redirectDnsAddress));
        }

        /**
         * @param redirectDnsType Redirect DNS type
         *   - Choices: `host`, `umbrella`
         * 
         * @return builder
         * 
         */
        public Builder redirectDnsType(@Nullable Output<String> redirectDnsType) {
            $.redirectDnsType = redirectDnsType;
            return this;
        }

        /**
         * @param redirectDnsType Redirect DNS type
         *   - Choices: `host`, `umbrella`
         * 
         * @return builder
         * 
         */
        public Builder redirectDnsType(String redirectDnsType) {
            return redirectDnsType(Output.of(redirectDnsType));
        }

        /**
         * @param secureInternetGateway Enable secure internet gateway
         * 
         * @return builder
         * 
         */
        public Builder secureInternetGateway(@Nullable Output<Boolean> secureInternetGateway) {
            $.secureInternetGateway = secureInternetGateway;
            return this;
        }

        /**
         * @param secureInternetGateway Enable secure internet gateway
         * 
         * @return builder
         * 
         */
        public Builder secureInternetGateway(Boolean secureInternetGateway) {
            return secureInternetGateway(Output.of(secureInternetGateway));
        }

        /**
         * @param serviceNodeGroup Service node group
         * 
         * @return builder
         * 
         */
        public Builder serviceNodeGroup(@Nullable Output<String> serviceNodeGroup) {
            $.serviceNodeGroup = serviceNodeGroup;
            return this;
        }

        /**
         * @param serviceNodeGroup Service node group
         * 
         * @return builder
         * 
         */
        public Builder serviceNodeGroup(String serviceNodeGroup) {
            return serviceNodeGroup(Output.of(serviceNodeGroup));
        }

        /**
         * @param setParameters List of set parameters
         * 
         * @return builder
         * 
         */
        public Builder setParameters(@Nullable Output<List<TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs>> setParameters) {
            $.setParameters = setParameters;
            return this;
        }

        /**
         * @param setParameters List of set parameters
         * 
         * @return builder
         * 
         */
        public Builder setParameters(List<TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs> setParameters) {
            return setParameters(Output.of(setParameters));
        }

        /**
         * @param setParameters List of set parameters
         * 
         * @return builder
         * 
         */
        public Builder setParameters(TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs... setParameters) {
            return setParameters(List.of(setParameters));
        }

        /**
         * @param tcpOptimization Enable TCP optimization
         * 
         * @return builder
         * 
         */
        public Builder tcpOptimization(@Nullable Output<Boolean> tcpOptimization) {
            $.tcpOptimization = tcpOptimization;
            return this;
        }

        /**
         * @param tcpOptimization Enable TCP optimization
         * 
         * @return builder
         * 
         */
        public Builder tcpOptimization(Boolean tcpOptimization) {
            return tcpOptimization(Output.of(tcpOptimization));
        }

        /**
         * @param type Type of action entry
         *   - Choices: `cflowd`, `count`, `dreOptimization`, `fallbackToRouting`, `log`, `lossProtect`, `lossProtectFec`, `nat`, `redirectDns`, `serviceNodeGroup`, `set`, `sig`, `tcpOptimization`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of action entry
         *   - Choices: `cflowd`, `count`, `dreOptimization`, `fallbackToRouting`, `log`, `lossProtect`, `lossProtectFec`, `nat`, `redirectDns`, `serviceNodeGroup`, `set`, `sig`, `tcpOptimization`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TrafficDataPolicyDefinitionSequenceActionEntryArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("TrafficDataPolicyDefinitionSequenceActionEntryArgs", "type");
            }
            return $;
        }
    }

}
