// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter {
    private Integer dscp;
    private String forwardingClassListId;
    private List<String> localTlocListColors;
    private String localTlocListEncapsulation;
    private String localTlocListRestrict;
    private String nextHopIpv4;
    private String nextHopIpv6;
    private Boolean nextHopLoose;
    private String policerId;
    private String preferredColorGroupId;
    private List<String> preferredRemoteColorIds;
    private String preferredRemoteColorRestrict;
    private Boolean serviceChainFallbackToRouting;
    private Boolean serviceChainLocal;
    private List<String> serviceChainTlocColors;
    private String serviceChainTlocEncapsulation;
    private String serviceChainTlocIp;
    private String serviceChainTlocListId;
    private String serviceChainType;
    private Integer serviceChainVpn;
    private List<String> serviceTlocColors;
    private String serviceTlocEncapsulation;
    private String serviceTlocIp;
    private String serviceTlocListId;
    private String serviceType;
    private String serviceVpn;
    private List<String> tlocColors;
    private String tlocEncapsulation;
    private String tlocIp;
    private String tlocListId;
    private String vpn;

    private GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter() {}
    public Integer dscp() {
        return this.dscp;
    }
    public String forwardingClassListId() {
        return this.forwardingClassListId;
    }
    public List<String> localTlocListColors() {
        return this.localTlocListColors;
    }
    public String localTlocListEncapsulation() {
        return this.localTlocListEncapsulation;
    }
    public String localTlocListRestrict() {
        return this.localTlocListRestrict;
    }
    public String nextHopIpv4() {
        return this.nextHopIpv4;
    }
    public String nextHopIpv6() {
        return this.nextHopIpv6;
    }
    public Boolean nextHopLoose() {
        return this.nextHopLoose;
    }
    public String policerId() {
        return this.policerId;
    }
    public String preferredColorGroupId() {
        return this.preferredColorGroupId;
    }
    public List<String> preferredRemoteColorIds() {
        return this.preferredRemoteColorIds;
    }
    public String preferredRemoteColorRestrict() {
        return this.preferredRemoteColorRestrict;
    }
    public Boolean serviceChainFallbackToRouting() {
        return this.serviceChainFallbackToRouting;
    }
    public Boolean serviceChainLocal() {
        return this.serviceChainLocal;
    }
    public List<String> serviceChainTlocColors() {
        return this.serviceChainTlocColors;
    }
    public String serviceChainTlocEncapsulation() {
        return this.serviceChainTlocEncapsulation;
    }
    public String serviceChainTlocIp() {
        return this.serviceChainTlocIp;
    }
    public String serviceChainTlocListId() {
        return this.serviceChainTlocListId;
    }
    public String serviceChainType() {
        return this.serviceChainType;
    }
    public Integer serviceChainVpn() {
        return this.serviceChainVpn;
    }
    public List<String> serviceTlocColors() {
        return this.serviceTlocColors;
    }
    public String serviceTlocEncapsulation() {
        return this.serviceTlocEncapsulation;
    }
    public String serviceTlocIp() {
        return this.serviceTlocIp;
    }
    public String serviceTlocListId() {
        return this.serviceTlocListId;
    }
    public String serviceType() {
        return this.serviceType;
    }
    public String serviceVpn() {
        return this.serviceVpn;
    }
    public List<String> tlocColors() {
        return this.tlocColors;
    }
    public String tlocEncapsulation() {
        return this.tlocEncapsulation;
    }
    public String tlocIp() {
        return this.tlocIp;
    }
    public String tlocListId() {
        return this.tlocListId;
    }
    public String vpn() {
        return this.vpn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer dscp;
        private String forwardingClassListId;
        private List<String> localTlocListColors;
        private String localTlocListEncapsulation;
        private String localTlocListRestrict;
        private String nextHopIpv4;
        private String nextHopIpv6;
        private Boolean nextHopLoose;
        private String policerId;
        private String preferredColorGroupId;
        private List<String> preferredRemoteColorIds;
        private String preferredRemoteColorRestrict;
        private Boolean serviceChainFallbackToRouting;
        private Boolean serviceChainLocal;
        private List<String> serviceChainTlocColors;
        private String serviceChainTlocEncapsulation;
        private String serviceChainTlocIp;
        private String serviceChainTlocListId;
        private String serviceChainType;
        private Integer serviceChainVpn;
        private List<String> serviceTlocColors;
        private String serviceTlocEncapsulation;
        private String serviceTlocIp;
        private String serviceTlocListId;
        private String serviceType;
        private String serviceVpn;
        private List<String> tlocColors;
        private String tlocEncapsulation;
        private String tlocIp;
        private String tlocListId;
        private String vpn;
        public Builder() {}
        public Builder(GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dscp = defaults.dscp;
    	      this.forwardingClassListId = defaults.forwardingClassListId;
    	      this.localTlocListColors = defaults.localTlocListColors;
    	      this.localTlocListEncapsulation = defaults.localTlocListEncapsulation;
    	      this.localTlocListRestrict = defaults.localTlocListRestrict;
    	      this.nextHopIpv4 = defaults.nextHopIpv4;
    	      this.nextHopIpv6 = defaults.nextHopIpv6;
    	      this.nextHopLoose = defaults.nextHopLoose;
    	      this.policerId = defaults.policerId;
    	      this.preferredColorGroupId = defaults.preferredColorGroupId;
    	      this.preferredRemoteColorIds = defaults.preferredRemoteColorIds;
    	      this.preferredRemoteColorRestrict = defaults.preferredRemoteColorRestrict;
    	      this.serviceChainFallbackToRouting = defaults.serviceChainFallbackToRouting;
    	      this.serviceChainLocal = defaults.serviceChainLocal;
    	      this.serviceChainTlocColors = defaults.serviceChainTlocColors;
    	      this.serviceChainTlocEncapsulation = defaults.serviceChainTlocEncapsulation;
    	      this.serviceChainTlocIp = defaults.serviceChainTlocIp;
    	      this.serviceChainTlocListId = defaults.serviceChainTlocListId;
    	      this.serviceChainType = defaults.serviceChainType;
    	      this.serviceChainVpn = defaults.serviceChainVpn;
    	      this.serviceTlocColors = defaults.serviceTlocColors;
    	      this.serviceTlocEncapsulation = defaults.serviceTlocEncapsulation;
    	      this.serviceTlocIp = defaults.serviceTlocIp;
    	      this.serviceTlocListId = defaults.serviceTlocListId;
    	      this.serviceType = defaults.serviceType;
    	      this.serviceVpn = defaults.serviceVpn;
    	      this.tlocColors = defaults.tlocColors;
    	      this.tlocEncapsulation = defaults.tlocEncapsulation;
    	      this.tlocIp = defaults.tlocIp;
    	      this.tlocListId = defaults.tlocListId;
    	      this.vpn = defaults.vpn;
        }

        @CustomType.Setter
        public Builder dscp(Integer dscp) {
            if (dscp == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "dscp");
            }
            this.dscp = dscp;
            return this;
        }
        @CustomType.Setter
        public Builder forwardingClassListId(String forwardingClassListId) {
            if (forwardingClassListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "forwardingClassListId");
            }
            this.forwardingClassListId = forwardingClassListId;
            return this;
        }
        @CustomType.Setter
        public Builder localTlocListColors(List<String> localTlocListColors) {
            if (localTlocListColors == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "localTlocListColors");
            }
            this.localTlocListColors = localTlocListColors;
            return this;
        }
        public Builder localTlocListColors(String... localTlocListColors) {
            return localTlocListColors(List.of(localTlocListColors));
        }
        @CustomType.Setter
        public Builder localTlocListEncapsulation(String localTlocListEncapsulation) {
            if (localTlocListEncapsulation == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "localTlocListEncapsulation");
            }
            this.localTlocListEncapsulation = localTlocListEncapsulation;
            return this;
        }
        @CustomType.Setter
        public Builder localTlocListRestrict(String localTlocListRestrict) {
            if (localTlocListRestrict == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "localTlocListRestrict");
            }
            this.localTlocListRestrict = localTlocListRestrict;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopIpv4(String nextHopIpv4) {
            if (nextHopIpv4 == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "nextHopIpv4");
            }
            this.nextHopIpv4 = nextHopIpv4;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopIpv6(String nextHopIpv6) {
            if (nextHopIpv6 == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "nextHopIpv6");
            }
            this.nextHopIpv6 = nextHopIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopLoose(Boolean nextHopLoose) {
            if (nextHopLoose == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "nextHopLoose");
            }
            this.nextHopLoose = nextHopLoose;
            return this;
        }
        @CustomType.Setter
        public Builder policerId(String policerId) {
            if (policerId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "policerId");
            }
            this.policerId = policerId;
            return this;
        }
        @CustomType.Setter
        public Builder preferredColorGroupId(String preferredColorGroupId) {
            if (preferredColorGroupId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "preferredColorGroupId");
            }
            this.preferredColorGroupId = preferredColorGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder preferredRemoteColorIds(List<String> preferredRemoteColorIds) {
            if (preferredRemoteColorIds == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "preferredRemoteColorIds");
            }
            this.preferredRemoteColorIds = preferredRemoteColorIds;
            return this;
        }
        public Builder preferredRemoteColorIds(String... preferredRemoteColorIds) {
            return preferredRemoteColorIds(List.of(preferredRemoteColorIds));
        }
        @CustomType.Setter
        public Builder preferredRemoteColorRestrict(String preferredRemoteColorRestrict) {
            if (preferredRemoteColorRestrict == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "preferredRemoteColorRestrict");
            }
            this.preferredRemoteColorRestrict = preferredRemoteColorRestrict;
            return this;
        }
        @CustomType.Setter
        public Builder serviceChainFallbackToRouting(Boolean serviceChainFallbackToRouting) {
            if (serviceChainFallbackToRouting == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceChainFallbackToRouting");
            }
            this.serviceChainFallbackToRouting = serviceChainFallbackToRouting;
            return this;
        }
        @CustomType.Setter
        public Builder serviceChainLocal(Boolean serviceChainLocal) {
            if (serviceChainLocal == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceChainLocal");
            }
            this.serviceChainLocal = serviceChainLocal;
            return this;
        }
        @CustomType.Setter
        public Builder serviceChainTlocColors(List<String> serviceChainTlocColors) {
            if (serviceChainTlocColors == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceChainTlocColors");
            }
            this.serviceChainTlocColors = serviceChainTlocColors;
            return this;
        }
        public Builder serviceChainTlocColors(String... serviceChainTlocColors) {
            return serviceChainTlocColors(List.of(serviceChainTlocColors));
        }
        @CustomType.Setter
        public Builder serviceChainTlocEncapsulation(String serviceChainTlocEncapsulation) {
            if (serviceChainTlocEncapsulation == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceChainTlocEncapsulation");
            }
            this.serviceChainTlocEncapsulation = serviceChainTlocEncapsulation;
            return this;
        }
        @CustomType.Setter
        public Builder serviceChainTlocIp(String serviceChainTlocIp) {
            if (serviceChainTlocIp == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceChainTlocIp");
            }
            this.serviceChainTlocIp = serviceChainTlocIp;
            return this;
        }
        @CustomType.Setter
        public Builder serviceChainTlocListId(String serviceChainTlocListId) {
            if (serviceChainTlocListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceChainTlocListId");
            }
            this.serviceChainTlocListId = serviceChainTlocListId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceChainType(String serviceChainType) {
            if (serviceChainType == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceChainType");
            }
            this.serviceChainType = serviceChainType;
            return this;
        }
        @CustomType.Setter
        public Builder serviceChainVpn(Integer serviceChainVpn) {
            if (serviceChainVpn == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceChainVpn");
            }
            this.serviceChainVpn = serviceChainVpn;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocColors(List<String> serviceTlocColors) {
            if (serviceTlocColors == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceTlocColors");
            }
            this.serviceTlocColors = serviceTlocColors;
            return this;
        }
        public Builder serviceTlocColors(String... serviceTlocColors) {
            return serviceTlocColors(List.of(serviceTlocColors));
        }
        @CustomType.Setter
        public Builder serviceTlocEncapsulation(String serviceTlocEncapsulation) {
            if (serviceTlocEncapsulation == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceTlocEncapsulation");
            }
            this.serviceTlocEncapsulation = serviceTlocEncapsulation;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocIp(String serviceTlocIp) {
            if (serviceTlocIp == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceTlocIp");
            }
            this.serviceTlocIp = serviceTlocIp;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocListId(String serviceTlocListId) {
            if (serviceTlocListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceTlocListId");
            }
            this.serviceTlocListId = serviceTlocListId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(String serviceType) {
            if (serviceType == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceType");
            }
            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder serviceVpn(String serviceVpn) {
            if (serviceVpn == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "serviceVpn");
            }
            this.serviceVpn = serviceVpn;
            return this;
        }
        @CustomType.Setter
        public Builder tlocColors(List<String> tlocColors) {
            if (tlocColors == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "tlocColors");
            }
            this.tlocColors = tlocColors;
            return this;
        }
        public Builder tlocColors(String... tlocColors) {
            return tlocColors(List.of(tlocColors));
        }
        @CustomType.Setter
        public Builder tlocEncapsulation(String tlocEncapsulation) {
            if (tlocEncapsulation == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "tlocEncapsulation");
            }
            this.tlocEncapsulation = tlocEncapsulation;
            return this;
        }
        @CustomType.Setter
        public Builder tlocIp(String tlocIp) {
            if (tlocIp == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "tlocIp");
            }
            this.tlocIp = tlocIp;
            return this;
        }
        @CustomType.Setter
        public Builder tlocListId(String tlocListId) {
            if (tlocListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "tlocListId");
            }
            this.tlocListId = tlocListId;
            return this;
        }
        @CustomType.Setter
        public Builder vpn(String vpn) {
            if (vpn == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter", "vpn");
            }
            this.vpn = vpn;
            return this;
        }
        public GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter build() {
            final var _resultValue = new GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter();
            _resultValue.dscp = dscp;
            _resultValue.forwardingClassListId = forwardingClassListId;
            _resultValue.localTlocListColors = localTlocListColors;
            _resultValue.localTlocListEncapsulation = localTlocListEncapsulation;
            _resultValue.localTlocListRestrict = localTlocListRestrict;
            _resultValue.nextHopIpv4 = nextHopIpv4;
            _resultValue.nextHopIpv6 = nextHopIpv6;
            _resultValue.nextHopLoose = nextHopLoose;
            _resultValue.policerId = policerId;
            _resultValue.preferredColorGroupId = preferredColorGroupId;
            _resultValue.preferredRemoteColorIds = preferredRemoteColorIds;
            _resultValue.preferredRemoteColorRestrict = preferredRemoteColorRestrict;
            _resultValue.serviceChainFallbackToRouting = serviceChainFallbackToRouting;
            _resultValue.serviceChainLocal = serviceChainLocal;
            _resultValue.serviceChainTlocColors = serviceChainTlocColors;
            _resultValue.serviceChainTlocEncapsulation = serviceChainTlocEncapsulation;
            _resultValue.serviceChainTlocIp = serviceChainTlocIp;
            _resultValue.serviceChainTlocListId = serviceChainTlocListId;
            _resultValue.serviceChainType = serviceChainType;
            _resultValue.serviceChainVpn = serviceChainVpn;
            _resultValue.serviceTlocColors = serviceTlocColors;
            _resultValue.serviceTlocEncapsulation = serviceTlocEncapsulation;
            _resultValue.serviceTlocIp = serviceTlocIp;
            _resultValue.serviceTlocListId = serviceTlocListId;
            _resultValue.serviceType = serviceType;
            _resultValue.serviceVpn = serviceVpn;
            _resultValue.tlocColors = tlocColors;
            _resultValue.tlocEncapsulation = tlocEncapsulation;
            _resultValue.tlocIp = tlocIp;
            _resultValue.tlocListId = tlocListId;
            _resultValue.vpn = vpn;
            return _resultValue;
        }
    }
}
