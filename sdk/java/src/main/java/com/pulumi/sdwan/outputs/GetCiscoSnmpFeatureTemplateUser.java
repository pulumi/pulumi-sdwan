// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCiscoSnmpFeatureTemplateUser {
    /**
     * @return Specify authentication protocol password
     * 
     */
    private String authenticationPassword;
    /**
     * @return Variable name
     * 
     */
    private String authenticationPasswordVariable;
    /**
     * @return Configure authentication protocol
     * 
     */
    private String authenticationProtocol;
    /**
     * @return Variable name
     * 
     */
    private String authenticationProtocolVariable;
    /**
     * @return Name of the SNMP group
     * 
     */
    private String group;
    /**
     * @return Variable name
     * 
     */
    private String groupVariable;
    /**
     * @return Name of the SNMP user
     * 
     */
    private String name;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Specify privacy protocol password
     * 
     */
    private String privacyPassword;
    /**
     * @return Variable name
     * 
     */
    private String privacyPasswordVariable;
    /**
     * @return Configure privacy protocol
     * 
     */
    private String privacyProtocol;
    /**
     * @return Variable name
     * 
     */
    private String privacyProtocolVariable;

    private GetCiscoSnmpFeatureTemplateUser() {}
    /**
     * @return Specify authentication protocol password
     * 
     */
    public String authenticationPassword() {
        return this.authenticationPassword;
    }
    /**
     * @return Variable name
     * 
     */
    public String authenticationPasswordVariable() {
        return this.authenticationPasswordVariable;
    }
    /**
     * @return Configure authentication protocol
     * 
     */
    public String authenticationProtocol() {
        return this.authenticationProtocol;
    }
    /**
     * @return Variable name
     * 
     */
    public String authenticationProtocolVariable() {
        return this.authenticationProtocolVariable;
    }
    /**
     * @return Name of the SNMP group
     * 
     */
    public String group() {
        return this.group;
    }
    /**
     * @return Variable name
     * 
     */
    public String groupVariable() {
        return this.groupVariable;
    }
    /**
     * @return Name of the SNMP user
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Specify privacy protocol password
     * 
     */
    public String privacyPassword() {
        return this.privacyPassword;
    }
    /**
     * @return Variable name
     * 
     */
    public String privacyPasswordVariable() {
        return this.privacyPasswordVariable;
    }
    /**
     * @return Configure privacy protocol
     * 
     */
    public String privacyProtocol() {
        return this.privacyProtocol;
    }
    /**
     * @return Variable name
     * 
     */
    public String privacyProtocolVariable() {
        return this.privacyProtocolVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoSnmpFeatureTemplateUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authenticationPassword;
        private String authenticationPasswordVariable;
        private String authenticationProtocol;
        private String authenticationProtocolVariable;
        private String group;
        private String groupVariable;
        private String name;
        private Boolean optional;
        private String privacyPassword;
        private String privacyPasswordVariable;
        private String privacyProtocol;
        private String privacyProtocolVariable;
        public Builder() {}
        public Builder(GetCiscoSnmpFeatureTemplateUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationPassword = defaults.authenticationPassword;
    	      this.authenticationPasswordVariable = defaults.authenticationPasswordVariable;
    	      this.authenticationProtocol = defaults.authenticationProtocol;
    	      this.authenticationProtocolVariable = defaults.authenticationProtocolVariable;
    	      this.group = defaults.group;
    	      this.groupVariable = defaults.groupVariable;
    	      this.name = defaults.name;
    	      this.optional = defaults.optional;
    	      this.privacyPassword = defaults.privacyPassword;
    	      this.privacyPasswordVariable = defaults.privacyPasswordVariable;
    	      this.privacyProtocol = defaults.privacyProtocol;
    	      this.privacyProtocolVariable = defaults.privacyProtocolVariable;
        }

        @CustomType.Setter
        public Builder authenticationPassword(String authenticationPassword) {
            if (authenticationPassword == null) {
              throw new MissingRequiredPropertyException("GetCiscoSnmpFeatureTemplateUser", "authenticationPassword");
            }
            this.authenticationPassword = authenticationPassword;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationPasswordVariable(String authenticationPasswordVariable) {
            if (authenticationPasswordVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSnmpFeatureTemplateUser", "authenticationPasswordVariable");
            }
            this.authenticationPasswordVariable = authenticationPasswordVariable;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationProtocol(String authenticationProtocol) {
            if (authenticationProtocol == null) {
              throw new MissingRequiredPropertyException("GetCiscoSnmpFeatureTemplateUser", "authenticationProtocol");
            }
            this.authenticationProtocol = authenticationProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationProtocolVariable(String authenticationProtocolVariable) {
            if (authenticationProtocolVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSnmpFeatureTemplateUser", "authenticationProtocolVariable");
            }
            this.authenticationProtocolVariable = authenticationProtocolVariable;
            return this;
        }
        @CustomType.Setter
        public Builder group(String group) {
            if (group == null) {
              throw new MissingRequiredPropertyException("GetCiscoSnmpFeatureTemplateUser", "group");
            }
            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder groupVariable(String groupVariable) {
            if (groupVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSnmpFeatureTemplateUser", "groupVariable");
            }
            this.groupVariable = groupVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoSnmpFeatureTemplateUser", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetCiscoSnmpFeatureTemplateUser", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder privacyPassword(String privacyPassword) {
            if (privacyPassword == null) {
              throw new MissingRequiredPropertyException("GetCiscoSnmpFeatureTemplateUser", "privacyPassword");
            }
            this.privacyPassword = privacyPassword;
            return this;
        }
        @CustomType.Setter
        public Builder privacyPasswordVariable(String privacyPasswordVariable) {
            if (privacyPasswordVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSnmpFeatureTemplateUser", "privacyPasswordVariable");
            }
            this.privacyPasswordVariable = privacyPasswordVariable;
            return this;
        }
        @CustomType.Setter
        public Builder privacyProtocol(String privacyProtocol) {
            if (privacyProtocol == null) {
              throw new MissingRequiredPropertyException("GetCiscoSnmpFeatureTemplateUser", "privacyProtocol");
            }
            this.privacyProtocol = privacyProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder privacyProtocolVariable(String privacyProtocolVariable) {
            if (privacyProtocolVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSnmpFeatureTemplateUser", "privacyProtocolVariable");
            }
            this.privacyProtocolVariable = privacyProtocolVariable;
            return this;
        }
        public GetCiscoSnmpFeatureTemplateUser build() {
            final var _resultValue = new GetCiscoSnmpFeatureTemplateUser();
            _resultValue.authenticationPassword = authenticationPassword;
            _resultValue.authenticationPasswordVariable = authenticationPasswordVariable;
            _resultValue.authenticationProtocol = authenticationProtocol;
            _resultValue.authenticationProtocolVariable = authenticationProtocolVariable;
            _resultValue.group = group;
            _resultValue.groupVariable = groupVariable;
            _resultValue.name = name;
            _resultValue.optional = optional;
            _resultValue.privacyPassword = privacyPassword;
            _resultValue.privacyPasswordVariable = privacyPasswordVariable;
            _resultValue.privacyProtocol = privacyProtocol;
            _resultValue.privacyProtocolVariable = privacyProtocolVariable;
            return _resultValue;
        }
    }
}
