// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sdwan.CiscoVpnInterfaceIpsecFeatureTemplateArgs;
import com.pulumi.sdwan.Utilities;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceIpsecFeatureTemplateState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage a Cisco VPN Interface IPSec feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sdwan.CiscoVpnInterfaceIpsecFeatureTemplate;
 * import com.pulumi.sdwan.CiscoVpnInterfaceIpsecFeatureTemplateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new CiscoVpnInterfaceIpsecFeatureTemplate("example", CiscoVpnInterfaceIpsecFeatureTemplateArgs.builder()
 *             .name("Example")
 *             .description("My Example")
 *             .deviceTypes("vedge-C8000V")
 *             .interfaceName("ipsec1")
 *             .shutdown(false)
 *             .interfaceDescription("My Description")
 *             .ipAddress("1.1.1.1/24")
 *             .tunnelSource("1.2.3.4")
 *             .tunnelSourceInterface("e1")
 *             .tunnelDestination("3.4.5.6")
 *             .application("sig")
 *             .tcpMssAdjust(1400)
 *             .clearDontFragment(true)
 *             .mtu(1500)
 *             .deadPeerDetectionInterval(100)
 *             .deadPeerDetectionRetries(4)
 *             .ikeVersion(2)
 *             .ikeMode("main")
 *             .ikeRekeyInterval(20000)
 *             .ikeCiphersuite("aes256-cbc-sha1")
 *             .ikeGroup("20")
 *             .ikePreSharedKey("cisco123")
 *             .ikePreSharedKeyLocalId("1")
 *             .ikePreSharedKeyRemoteId("2")
 *             .ipsecRekeyInterval(7200)
 *             .ipsecReplayWindow(128)
 *             .ipsecCiphersuite("aes256-cbc-sha256")
 *             .ipsecPerfectForwardSecrecy("group-20")
 *             .trackers("TRACKER1")
 *             .tunnelRouteVia("g0/0")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * ```sh
 * $ pulumi import sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate example &#34;f6b2c44c-693c-4763-b010-895aa3d236bd&#34;
 * ```
 * 
 */
@ResourceType(type="sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate")
public class CiscoVpnInterfaceIpsecFeatureTemplate extends com.pulumi.resources.CustomResource {
    /**
     * Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
     * 
     */
    @Export(name="application", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> application;

    /**
     * @return Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
     * 
     */
    public Output<Optional<String>> application() {
        return Codegen.optional(this.application);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="applicationVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> applicationVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> applicationVariable() {
        return Codegen.optional(this.applicationVariable);
    }
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    @Export(name="clearDontFragment", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> clearDontFragment;

    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> clearDontFragment() {
        return Codegen.optional(this.clearDontFragment);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="clearDontFragmentVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clearDontFragmentVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> clearDontFragmentVariable() {
        return Codegen.optional(this.clearDontFragmentVariable);
    }
    /**
     * IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
     * 
     */
    @Export(name="deadPeerDetectionInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> deadPeerDetectionInterval;

    /**
     * @return IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
     * 
     */
    public Output<Optional<Integer>> deadPeerDetectionInterval() {
        return Codegen.optional(this.deadPeerDetectionInterval);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="deadPeerDetectionIntervalVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deadPeerDetectionIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> deadPeerDetectionIntervalVariable() {
        return Codegen.optional(this.deadPeerDetectionIntervalVariable);
    }
    /**
     * IKE keepalive retries - Range: `2`-`60` - Default value: `3`
     * 
     */
    @Export(name="deadPeerDetectionRetries", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> deadPeerDetectionRetries;

    /**
     * @return IKE keepalive retries - Range: `2`-`60` - Default value: `3`
     * 
     */
    public Output<Optional<Integer>> deadPeerDetectionRetries() {
        return Codegen.optional(this.deadPeerDetectionRetries);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="deadPeerDetectionRetriesVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deadPeerDetectionRetriesVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> deadPeerDetectionRetriesVariable() {
        return Codegen.optional(this.deadPeerDetectionRetriesVariable);
    }
    /**
     * The description of the feature template
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Export(name="deviceTypes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
     * `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
     * 
     */
    @Export(name="ikeCiphersuite", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeCiphersuite;

    /**
     * @return IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
     * `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
     * 
     */
    public Output<Optional<String>> ikeCiphersuite() {
        return Codegen.optional(this.ikeCiphersuite);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikeCiphersuiteVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeCiphersuiteVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikeCiphersuiteVariable() {
        return Codegen.optional(this.ikeCiphersuiteVariable);
    }
    /**
     * IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
     * 
     */
    @Export(name="ikeGroup", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeGroup;

    /**
     * @return IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
     * 
     */
    public Output<Optional<String>> ikeGroup() {
        return Codegen.optional(this.ikeGroup);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikeGroupVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeGroupVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikeGroupVariable() {
        return Codegen.optional(this.ikeGroupVariable);
    }
    /**
     * IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
     * 
     */
    @Export(name="ikeMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeMode;

    /**
     * @return IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
     * 
     */
    public Output<Optional<String>> ikeMode() {
        return Codegen.optional(this.ikeMode);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikeModeVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeModeVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikeModeVariable() {
        return Codegen.optional(this.ikeModeVariable);
    }
    /**
     * Use preshared key to authenticate IKE peer
     * 
     */
    @Export(name="ikePreSharedKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikePreSharedKey;

    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    public Output<Optional<String>> ikePreSharedKey() {
        return Codegen.optional(this.ikePreSharedKey);
    }
    /**
     * IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    @Export(name="ikePreSharedKeyLocalId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikePreSharedKeyLocalId;

    /**
     * @return IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public Output<Optional<String>> ikePreSharedKeyLocalId() {
        return Codegen.optional(this.ikePreSharedKeyLocalId);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikePreSharedKeyLocalIdVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikePreSharedKeyLocalIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikePreSharedKeyLocalIdVariable() {
        return Codegen.optional(this.ikePreSharedKeyLocalIdVariable);
    }
    /**
     * IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    @Export(name="ikePreSharedKeyRemoteId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikePreSharedKeyRemoteId;

    /**
     * @return IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public Output<Optional<String>> ikePreSharedKeyRemoteId() {
        return Codegen.optional(this.ikePreSharedKeyRemoteId);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikePreSharedKeyRemoteIdVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikePreSharedKeyRemoteIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikePreSharedKeyRemoteIdVariable() {
        return Codegen.optional(this.ikePreSharedKeyRemoteIdVariable);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikePreSharedKeyVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikePreSharedKeyVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikePreSharedKeyVariable() {
        return Codegen.optional(this.ikePreSharedKeyVariable);
    }
    /**
     * IKE rekey interval &lt;60..86400&gt; seconds - Range: `60`-`86400` - Default value: `14400`
     * 
     */
    @Export(name="ikeRekeyInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ikeRekeyInterval;

    /**
     * @return IKE rekey interval &lt;60..86400&gt; seconds - Range: `60`-`86400` - Default value: `14400`
     * 
     */
    public Output<Optional<Integer>> ikeRekeyInterval() {
        return Codegen.optional(this.ikeRekeyInterval);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikeRekeyIntervalVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeRekeyIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikeRekeyIntervalVariable() {
        return Codegen.optional(this.ikeRekeyIntervalVariable);
    }
    /**
     * IKE Version &lt;1..2&gt; - Range: `1`-`2` - Default value: `1`
     * 
     */
    @Export(name="ikeVersion", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ikeVersion;

    /**
     * @return IKE Version &lt;1..2&gt; - Range: `1`-`2` - Default value: `1`
     * 
     */
    public Output<Optional<Integer>> ikeVersion() {
        return Codegen.optional(this.ikeVersion);
    }
    /**
     * Interface description
     * 
     */
    @Export(name="interfaceDescription", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceDescription;

    /**
     * @return Interface description
     * 
     */
    public Output<Optional<String>> interfaceDescription() {
        return Codegen.optional(this.interfaceDescription);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="interfaceDescriptionVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> interfaceDescriptionVariable() {
        return Codegen.optional(this.interfaceDescriptionVariable);
    }
    /**
     * Interface name: IPsec when present
     * 
     */
    @Export(name="interfaceName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceName;

    /**
     * @return Interface name: IPsec when present
     * 
     */
    public Output<Optional<String>> interfaceName() {
        return Codegen.optional(this.interfaceName);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="interfaceNameVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> interfaceNameVariable() {
        return Codegen.optional(this.interfaceNameVariable);
    }
    /**
     * Assign IPv4 address
     * 
     */
    @Export(name="ipAddress", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipAddress;

    /**
     * @return Assign IPv4 address
     * 
     */
    public Output<Optional<String>> ipAddress() {
        return Codegen.optional(this.ipAddress);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipAddressVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipAddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipAddressVariable() {
        return Codegen.optional(this.ipAddressVariable);
    }
    /**
     * IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
     * `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
     * `aes256-gcm`
     * 
     */
    @Export(name="ipsecCiphersuite", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipsecCiphersuite;

    /**
     * @return IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
     * `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
     * `aes256-gcm`
     * 
     */
    public Output<Optional<String>> ipsecCiphersuite() {
        return Codegen.optional(this.ipsecCiphersuite);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipsecCiphersuiteVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipsecCiphersuiteVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipsecCiphersuiteVariable() {
        return Codegen.optional(this.ipsecCiphersuiteVariable);
    }
    /**
     * IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
     * `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
     * 
     */
    @Export(name="ipsecPerfectForwardSecrecy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipsecPerfectForwardSecrecy;

    /**
     * @return IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
     * `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
     * 
     */
    public Output<Optional<String>> ipsecPerfectForwardSecrecy() {
        return Codegen.optional(this.ipsecPerfectForwardSecrecy);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipsecPerfectForwardSecrecyVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipsecPerfectForwardSecrecyVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipsecPerfectForwardSecrecyVariable() {
        return Codegen.optional(this.ipsecPerfectForwardSecrecyVariable);
    }
    /**
     * IPsec rekey interval &lt;300..1209600&gt; seconds - Range: `120`-`2592000` - Default value: `3600`
     * 
     */
    @Export(name="ipsecRekeyInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ipsecRekeyInterval;

    /**
     * @return IPsec rekey interval &lt;300..1209600&gt; seconds - Range: `120`-`2592000` - Default value: `3600`
     * 
     */
    public Output<Optional<Integer>> ipsecRekeyInterval() {
        return Codegen.optional(this.ipsecRekeyInterval);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipsecRekeyIntervalVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipsecRekeyIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipsecRekeyIntervalVariable() {
        return Codegen.optional(this.ipsecRekeyIntervalVariable);
    }
    /**
     * Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
     * 
     */
    @Export(name="ipsecReplayWindow", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ipsecReplayWindow;

    /**
     * @return Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
     * 
     */
    public Output<Optional<Integer>> ipsecReplayWindow() {
        return Codegen.optional(this.ipsecReplayWindow);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipsecReplayWindowVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipsecReplayWindowVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipsecReplayWindowVariable() {
        return Codegen.optional(this.ipsecReplayWindowVariable);
    }
    /**
     * Interface MTU &lt;68..9216&gt;, in bytes - Range: `68`-`9216` - Default value: `1500`
     * 
     */
    @Export(name="mtu", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> mtu;

    /**
     * @return Interface MTU &lt;68..9216&gt;, in bytes - Range: `68`-`9216` - Default value: `1500`
     * 
     */
    public Output<Optional<Integer>> mtu() {
        return Codegen.optional(this.mtu);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="mtuVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> mtuVariable() {
        return Codegen.optional(this.mtuVariable);
    }
    /**
     * The name of the feature template
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Administrative state - Default value: `true`
     * 
     */
    @Export(name="shutdown", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> shutdown;

    /**
     * @return Administrative state - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> shutdown() {
        return Codegen.optional(this.shutdown);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="shutdownVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> shutdownVariable() {
        return Codegen.optional(this.shutdownVariable);
    }
    /**
     * TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    @Export(name="tcpMssAdjust", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tcpMssAdjust;

    /**
     * @return TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    public Output<Optional<Integer>> tcpMssAdjust() {
        return Codegen.optional(this.tcpMssAdjust);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tcpMssAdjustVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tcpMssAdjustVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tcpMssAdjustVariable() {
        return Codegen.optional(this.tcpMssAdjustVariable);
    }
    /**
     * The template type
     * 
     */
    @Export(name="templateType", refs={String.class}, tree="[0]")
    private Output<String> templateType;

    /**
     * @return The template type
     * 
     */
    public Output<String> templateType() {
        return this.templateType;
    }
    /**
     * Variable name
     * 
     */
    @Export(name="trackerVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trackerVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> trackerVariable() {
        return Codegen.optional(this.trackerVariable);
    }
    /**
     * Enable tracker for this interface
     * 
     */
    @Export(name="trackers", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> trackers;

    /**
     * @return Enable tracker for this interface
     * 
     */
    public Output<Optional<List<String>>> trackers() {
        return Codegen.optional(this.trackers);
    }
    /**
     * Tunnel destination IP address
     * 
     */
    @Export(name="tunnelDestination", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelDestination;

    /**
     * @return Tunnel destination IP address
     * 
     */
    public Output<Optional<String>> tunnelDestination() {
        return Codegen.optional(this.tunnelDestination);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelDestinationVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelDestinationVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelDestinationVariable() {
        return Codegen.optional(this.tunnelDestinationVariable);
    }
    /**
     * &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    @Export(name="tunnelRouteVia", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelRouteVia;

    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Output<Optional<String>> tunnelRouteVia() {
        return Codegen.optional(this.tunnelRouteVia);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelRouteViaVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelRouteViaVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelRouteViaVariable() {
        return Codegen.optional(this.tunnelRouteViaVariable);
    }
    /**
     * Tunnel source IP Address
     * 
     */
    @Export(name="tunnelSource", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSource;

    /**
     * @return Tunnel source IP Address
     * 
     */
    public Output<Optional<String>> tunnelSource() {
        return Codegen.optional(this.tunnelSource);
    }
    /**
     * &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    @Export(name="tunnelSourceInterface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceInterface;

    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Output<Optional<String>> tunnelSourceInterface() {
        return Codegen.optional(this.tunnelSourceInterface);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelSourceInterfaceVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelSourceInterfaceVariable() {
        return Codegen.optional(this.tunnelSourceInterfaceVariable);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelSourceVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelSourceVariable() {
        return Codegen.optional(this.tunnelSourceVariable);
    }
    /**
     * The version of the feature template
     * 
     */
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output<Integer> version;

    /**
     * @return The version of the feature template
     * 
     */
    public Output<Integer> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CiscoVpnInterfaceIpsecFeatureTemplate(java.lang.String name) {
        this(name, CiscoVpnInterfaceIpsecFeatureTemplateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CiscoVpnInterfaceIpsecFeatureTemplate(java.lang.String name, CiscoVpnInterfaceIpsecFeatureTemplateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CiscoVpnInterfaceIpsecFeatureTemplate(java.lang.String name, CiscoVpnInterfaceIpsecFeatureTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CiscoVpnInterfaceIpsecFeatureTemplate(java.lang.String name, Output<java.lang.String> id, @Nullable CiscoVpnInterfaceIpsecFeatureTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate", name, state, makeResourceOptions(options, id), false);
    }

    private static CiscoVpnInterfaceIpsecFeatureTemplateArgs makeArgs(CiscoVpnInterfaceIpsecFeatureTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CiscoVpnInterfaceIpsecFeatureTemplateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CiscoVpnInterfaceIpsecFeatureTemplate get(java.lang.String name, Output<java.lang.String> id, @Nullable CiscoVpnInterfaceIpsecFeatureTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CiscoVpnInterfaceIpsecFeatureTemplate(name, id, state, options);
    }
}
