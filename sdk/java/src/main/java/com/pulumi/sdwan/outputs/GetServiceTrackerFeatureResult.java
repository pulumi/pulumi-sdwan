// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceTrackerFeatureResult {
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return API url of endpoint
     * 
     */
    private String endpointApiUrl;
    /**
     * @return Variable name
     * 
     */
    private String endpointApiUrlVariable;
    /**
     * @return Endpoint DNS Name
     * 
     */
    private String endpointDnsName;
    /**
     * @return Variable name
     * 
     */
    private String endpointDnsNameVariable;
    /**
     * @return Endpoint IP
     * 
     */
    private String endpointIp;
    /**
     * @return Variable name
     * 
     */
    private String endpointIpVariable;
    /**
     * @return Endpoint Tracker Type
     * 
     */
    private String endpointTrackerType;
    /**
     * @return Variable name
     * 
     */
    private String endpointTrackerTypeVariable;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return Interval
     * 
     */
    private Integer interval;
    /**
     * @return Variable name
     * 
     */
    private String intervalVariable;
    /**
     * @return Multiplier
     * 
     */
    private Integer multiplier;
    /**
     * @return Variable name
     * 
     */
    private String multiplierVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    private Integer port;
    /**
     * @return Variable name
     * 
     */
    private String portVariable;
    private String protocol;
    /**
     * @return Variable name
     * 
     */
    private String protocolVariable;
    /**
     * @return Threshold
     * 
     */
    private Integer threshold;
    /**
     * @return Variable name
     * 
     */
    private String thresholdVariable;
    /**
     * @return Tracker Name
     * 
     */
    private String trackerName;
    /**
     * @return Variable name
     * 
     */
    private String trackerNameVariable;
    /**
     * @return Tracker Type
     * 
     */
    private String trackerType;
    /**
     * @return Variable name
     * 
     */
    private String trackerTypeVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetServiceTrackerFeatureResult() {}
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return API url of endpoint
     * 
     */
    public String endpointApiUrl() {
        return this.endpointApiUrl;
    }
    /**
     * @return Variable name
     * 
     */
    public String endpointApiUrlVariable() {
        return this.endpointApiUrlVariable;
    }
    /**
     * @return Endpoint DNS Name
     * 
     */
    public String endpointDnsName() {
        return this.endpointDnsName;
    }
    /**
     * @return Variable name
     * 
     */
    public String endpointDnsNameVariable() {
        return this.endpointDnsNameVariable;
    }
    /**
     * @return Endpoint IP
     * 
     */
    public String endpointIp() {
        return this.endpointIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String endpointIpVariable() {
        return this.endpointIpVariable;
    }
    /**
     * @return Endpoint Tracker Type
     * 
     */
    public String endpointTrackerType() {
        return this.endpointTrackerType;
    }
    /**
     * @return Variable name
     * 
     */
    public String endpointTrackerTypeVariable() {
        return this.endpointTrackerTypeVariable;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Interval
     * 
     */
    public Integer interval() {
        return this.interval;
    }
    /**
     * @return Variable name
     * 
     */
    public String intervalVariable() {
        return this.intervalVariable;
    }
    /**
     * @return Multiplier
     * 
     */
    public Integer multiplier() {
        return this.multiplier;
    }
    /**
     * @return Variable name
     * 
     */
    public String multiplierVariable() {
        return this.multiplierVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    public Integer port() {
        return this.port;
    }
    /**
     * @return Variable name
     * 
     */
    public String portVariable() {
        return this.portVariable;
    }
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Variable name
     * 
     */
    public String protocolVariable() {
        return this.protocolVariable;
    }
    /**
     * @return Threshold
     * 
     */
    public Integer threshold() {
        return this.threshold;
    }
    /**
     * @return Variable name
     * 
     */
    public String thresholdVariable() {
        return this.thresholdVariable;
    }
    /**
     * @return Tracker Name
     * 
     */
    public String trackerName() {
        return this.trackerName;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackerNameVariable() {
        return this.trackerNameVariable;
    }
    /**
     * @return Tracker Type
     * 
     */
    public String trackerType() {
        return this.trackerType;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackerTypeVariable() {
        return this.trackerTypeVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceTrackerFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String endpointApiUrl;
        private String endpointApiUrlVariable;
        private String endpointDnsName;
        private String endpointDnsNameVariable;
        private String endpointIp;
        private String endpointIpVariable;
        private String endpointTrackerType;
        private String endpointTrackerTypeVariable;
        private String featureProfileId;
        private String id;
        private Integer interval;
        private String intervalVariable;
        private Integer multiplier;
        private String multiplierVariable;
        private String name;
        private Integer port;
        private String portVariable;
        private String protocol;
        private String protocolVariable;
        private Integer threshold;
        private String thresholdVariable;
        private String trackerName;
        private String trackerNameVariable;
        private String trackerType;
        private String trackerTypeVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetServiceTrackerFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.endpointApiUrl = defaults.endpointApiUrl;
    	      this.endpointApiUrlVariable = defaults.endpointApiUrlVariable;
    	      this.endpointDnsName = defaults.endpointDnsName;
    	      this.endpointDnsNameVariable = defaults.endpointDnsNameVariable;
    	      this.endpointIp = defaults.endpointIp;
    	      this.endpointIpVariable = defaults.endpointIpVariable;
    	      this.endpointTrackerType = defaults.endpointTrackerType;
    	      this.endpointTrackerTypeVariable = defaults.endpointTrackerTypeVariable;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.interval = defaults.interval;
    	      this.intervalVariable = defaults.intervalVariable;
    	      this.multiplier = defaults.multiplier;
    	      this.multiplierVariable = defaults.multiplierVariable;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.portVariable = defaults.portVariable;
    	      this.protocol = defaults.protocol;
    	      this.protocolVariable = defaults.protocolVariable;
    	      this.threshold = defaults.threshold;
    	      this.thresholdVariable = defaults.thresholdVariable;
    	      this.trackerName = defaults.trackerName;
    	      this.trackerNameVariable = defaults.trackerNameVariable;
    	      this.trackerType = defaults.trackerType;
    	      this.trackerTypeVariable = defaults.trackerTypeVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder endpointApiUrl(String endpointApiUrl) {
            if (endpointApiUrl == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "endpointApiUrl");
            }
            this.endpointApiUrl = endpointApiUrl;
            return this;
        }
        @CustomType.Setter
        public Builder endpointApiUrlVariable(String endpointApiUrlVariable) {
            if (endpointApiUrlVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "endpointApiUrlVariable");
            }
            this.endpointApiUrlVariable = endpointApiUrlVariable;
            return this;
        }
        @CustomType.Setter
        public Builder endpointDnsName(String endpointDnsName) {
            if (endpointDnsName == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "endpointDnsName");
            }
            this.endpointDnsName = endpointDnsName;
            return this;
        }
        @CustomType.Setter
        public Builder endpointDnsNameVariable(String endpointDnsNameVariable) {
            if (endpointDnsNameVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "endpointDnsNameVariable");
            }
            this.endpointDnsNameVariable = endpointDnsNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder endpointIp(String endpointIp) {
            if (endpointIp == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "endpointIp");
            }
            this.endpointIp = endpointIp;
            return this;
        }
        @CustomType.Setter
        public Builder endpointIpVariable(String endpointIpVariable) {
            if (endpointIpVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "endpointIpVariable");
            }
            this.endpointIpVariable = endpointIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder endpointTrackerType(String endpointTrackerType) {
            if (endpointTrackerType == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "endpointTrackerType");
            }
            this.endpointTrackerType = endpointTrackerType;
            return this;
        }
        @CustomType.Setter
        public Builder endpointTrackerTypeVariable(String endpointTrackerTypeVariable) {
            if (endpointTrackerTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "endpointTrackerTypeVariable");
            }
            this.endpointTrackerTypeVariable = endpointTrackerTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interval(Integer interval) {
            if (interval == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "interval");
            }
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder intervalVariable(String intervalVariable) {
            if (intervalVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "intervalVariable");
            }
            this.intervalVariable = intervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder multiplier(Integer multiplier) {
            if (multiplier == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "multiplier");
            }
            this.multiplier = multiplier;
            return this;
        }
        @CustomType.Setter
        public Builder multiplierVariable(String multiplierVariable) {
            if (multiplierVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "multiplierVariable");
            }
            this.multiplierVariable = multiplierVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder portVariable(String portVariable) {
            if (portVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "portVariable");
            }
            this.portVariable = portVariable;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder protocolVariable(String protocolVariable) {
            if (protocolVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "protocolVariable");
            }
            this.protocolVariable = protocolVariable;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Integer threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder thresholdVariable(String thresholdVariable) {
            if (thresholdVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "thresholdVariable");
            }
            this.thresholdVariable = thresholdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackerName(String trackerName) {
            if (trackerName == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "trackerName");
            }
            this.trackerName = trackerName;
            return this;
        }
        @CustomType.Setter
        public Builder trackerNameVariable(String trackerNameVariable) {
            if (trackerNameVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "trackerNameVariable");
            }
            this.trackerNameVariable = trackerNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackerType(String trackerType) {
            if (trackerType == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "trackerType");
            }
            this.trackerType = trackerType;
            return this;
        }
        @CustomType.Setter
        public Builder trackerTypeVariable(String trackerTypeVariable) {
            if (trackerTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "trackerTypeVariable");
            }
            this.trackerTypeVariable = trackerTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetServiceTrackerFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetServiceTrackerFeatureResult build() {
            final var _resultValue = new GetServiceTrackerFeatureResult();
            _resultValue.description = description;
            _resultValue.endpointApiUrl = endpointApiUrl;
            _resultValue.endpointApiUrlVariable = endpointApiUrlVariable;
            _resultValue.endpointDnsName = endpointDnsName;
            _resultValue.endpointDnsNameVariable = endpointDnsNameVariable;
            _resultValue.endpointIp = endpointIp;
            _resultValue.endpointIpVariable = endpointIpVariable;
            _resultValue.endpointTrackerType = endpointTrackerType;
            _resultValue.endpointTrackerTypeVariable = endpointTrackerTypeVariable;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.interval = interval;
            _resultValue.intervalVariable = intervalVariable;
            _resultValue.multiplier = multiplier;
            _resultValue.multiplierVariable = multiplierVariable;
            _resultValue.name = name;
            _resultValue.port = port;
            _resultValue.portVariable = portVariable;
            _resultValue.protocol = protocol;
            _resultValue.protocolVariable = protocolVariable;
            _resultValue.threshold = threshold;
            _resultValue.thresholdVariable = thresholdVariable;
            _resultValue.trackerName = trackerName;
            _resultValue.trackerNameVariable = trackerNameVariable;
            _resultValue.trackerType = trackerType;
            _resultValue.trackerTypeVariable = trackerTypeVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
