// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetSystemLoggingProfileParcelIpv4Server;
import com.pulumi.sdwan.outputs.GetSystemLoggingProfileParcelIpv6Server;
import com.pulumi.sdwan.outputs.GetSystemLoggingProfileParcelTlsProfile;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSystemLoggingProfileParcelResult {
    /**
     * @return The description of the profile parcel
     * 
     */
    private String description;
    /**
     * @return Enable logging to local disk
     * 
     */
    private Boolean diskEnable;
    /**
     * @return Variable name
     * 
     */
    private String diskEnableVariable;
    /**
     * @return Set number of syslog files to create before discarding oldest files
     * 
     */
    private Integer diskFileRotate;
    /**
     * @return Variable name
     * 
     */
    private String diskFileRotateVariable;
    /**
     * @return Set maximum size of file before it is rotated
     * 
     */
    private Integer diskFileSize;
    /**
     * @return Variable name
     * 
     */
    private String diskFileSizeVariable;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the profile parcel
     * 
     */
    private String id;
    /**
     * @return Enable logging to remote server
     * 
     */
    private List<GetSystemLoggingProfileParcelIpv4Server> ipv4Servers;
    /**
     * @return Enable logging to remote ipv6 server
     * 
     */
    private List<GetSystemLoggingProfileParcelIpv6Server> ipv6Servers;
    /**
     * @return The name of the profile parcel
     * 
     */
    private String name;
    /**
     * @return Configure a TLS profile
     * 
     */
    private List<GetSystemLoggingProfileParcelTlsProfile> tlsProfiles;
    /**
     * @return The version of the profile parcel
     * 
     */
    private Integer version;

    private GetSystemLoggingProfileParcelResult() {}
    /**
     * @return The description of the profile parcel
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Enable logging to local disk
     * 
     */
    public Boolean diskEnable() {
        return this.diskEnable;
    }
    /**
     * @return Variable name
     * 
     */
    public String diskEnableVariable() {
        return this.diskEnableVariable;
    }
    /**
     * @return Set number of syslog files to create before discarding oldest files
     * 
     */
    public Integer diskFileRotate() {
        return this.diskFileRotate;
    }
    /**
     * @return Variable name
     * 
     */
    public String diskFileRotateVariable() {
        return this.diskFileRotateVariable;
    }
    /**
     * @return Set maximum size of file before it is rotated
     * 
     */
    public Integer diskFileSize() {
        return this.diskFileSize;
    }
    /**
     * @return Variable name
     * 
     */
    public String diskFileSizeVariable() {
        return this.diskFileSizeVariable;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the profile parcel
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Enable logging to remote server
     * 
     */
    public List<GetSystemLoggingProfileParcelIpv4Server> ipv4Servers() {
        return this.ipv4Servers;
    }
    /**
     * @return Enable logging to remote ipv6 server
     * 
     */
    public List<GetSystemLoggingProfileParcelIpv6Server> ipv6Servers() {
        return this.ipv6Servers;
    }
    /**
     * @return The name of the profile parcel
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Configure a TLS profile
     * 
     */
    public List<GetSystemLoggingProfileParcelTlsProfile> tlsProfiles() {
        return this.tlsProfiles;
    }
    /**
     * @return The version of the profile parcel
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSystemLoggingProfileParcelResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private Boolean diskEnable;
        private String diskEnableVariable;
        private Integer diskFileRotate;
        private String diskFileRotateVariable;
        private Integer diskFileSize;
        private String diskFileSizeVariable;
        private String featureProfileId;
        private String id;
        private List<GetSystemLoggingProfileParcelIpv4Server> ipv4Servers;
        private List<GetSystemLoggingProfileParcelIpv6Server> ipv6Servers;
        private String name;
        private List<GetSystemLoggingProfileParcelTlsProfile> tlsProfiles;
        private Integer version;
        public Builder() {}
        public Builder(GetSystemLoggingProfileParcelResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.diskEnable = defaults.diskEnable;
    	      this.diskEnableVariable = defaults.diskEnableVariable;
    	      this.diskFileRotate = defaults.diskFileRotate;
    	      this.diskFileRotateVariable = defaults.diskFileRotateVariable;
    	      this.diskFileSize = defaults.diskFileSize;
    	      this.diskFileSizeVariable = defaults.diskFileSizeVariable;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.ipv4Servers = defaults.ipv4Servers;
    	      this.ipv6Servers = defaults.ipv6Servers;
    	      this.name = defaults.name;
    	      this.tlsProfiles = defaults.tlsProfiles;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder diskEnable(Boolean diskEnable) {
            if (diskEnable == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "diskEnable");
            }
            this.diskEnable = diskEnable;
            return this;
        }
        @CustomType.Setter
        public Builder diskEnableVariable(String diskEnableVariable) {
            if (diskEnableVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "diskEnableVariable");
            }
            this.diskEnableVariable = diskEnableVariable;
            return this;
        }
        @CustomType.Setter
        public Builder diskFileRotate(Integer diskFileRotate) {
            if (diskFileRotate == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "diskFileRotate");
            }
            this.diskFileRotate = diskFileRotate;
            return this;
        }
        @CustomType.Setter
        public Builder diskFileRotateVariable(String diskFileRotateVariable) {
            if (diskFileRotateVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "diskFileRotateVariable");
            }
            this.diskFileRotateVariable = diskFileRotateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder diskFileSize(Integer diskFileSize) {
            if (diskFileSize == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "diskFileSize");
            }
            this.diskFileSize = diskFileSize;
            return this;
        }
        @CustomType.Setter
        public Builder diskFileSizeVariable(String diskFileSizeVariable) {
            if (diskFileSizeVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "diskFileSizeVariable");
            }
            this.diskFileSizeVariable = diskFileSizeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Servers(List<GetSystemLoggingProfileParcelIpv4Server> ipv4Servers) {
            if (ipv4Servers == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "ipv4Servers");
            }
            this.ipv4Servers = ipv4Servers;
            return this;
        }
        public Builder ipv4Servers(GetSystemLoggingProfileParcelIpv4Server... ipv4Servers) {
            return ipv4Servers(List.of(ipv4Servers));
        }
        @CustomType.Setter
        public Builder ipv6Servers(List<GetSystemLoggingProfileParcelIpv6Server> ipv6Servers) {
            if (ipv6Servers == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "ipv6Servers");
            }
            this.ipv6Servers = ipv6Servers;
            return this;
        }
        public Builder ipv6Servers(GetSystemLoggingProfileParcelIpv6Server... ipv6Servers) {
            return ipv6Servers(List.of(ipv6Servers));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder tlsProfiles(List<GetSystemLoggingProfileParcelTlsProfile> tlsProfiles) {
            if (tlsProfiles == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "tlsProfiles");
            }
            this.tlsProfiles = tlsProfiles;
            return this;
        }
        public Builder tlsProfiles(GetSystemLoggingProfileParcelTlsProfile... tlsProfiles) {
            return tlsProfiles(List.of(tlsProfiles));
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetSystemLoggingProfileParcelResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetSystemLoggingProfileParcelResult build() {
            final var _resultValue = new GetSystemLoggingProfileParcelResult();
            _resultValue.description = description;
            _resultValue.diskEnable = diskEnable;
            _resultValue.diskEnableVariable = diskEnableVariable;
            _resultValue.diskFileRotate = diskFileRotate;
            _resultValue.diskFileRotateVariable = diskFileRotateVariable;
            _resultValue.diskFileSize = diskFileSize;
            _resultValue.diskFileSizeVariable = diskFileSizeVariable;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.ipv4Servers = ipv4Servers;
            _resultValue.ipv6Servers = ipv6Servers;
            _resultValue.name = name;
            _resultValue.tlsProfiles = tlsProfiles;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
