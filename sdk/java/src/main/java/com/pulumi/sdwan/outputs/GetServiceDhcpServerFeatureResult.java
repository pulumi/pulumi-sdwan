// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetServiceDhcpServerFeatureOptionCode;
import com.pulumi.sdwan.outputs.GetServiceDhcpServerFeatureStaticLease;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceDhcpServerFeatureResult {
    /**
     * @return Set IP address of default gateway
     * 
     */
    private String defaultGateway;
    /**
     * @return Variable name
     * 
     */
    private String defaultGatewayVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Configure one or more DNS server IP addresses
     * 
     */
    private List<String> dnsServers;
    /**
     * @return Variable name
     * 
     */
    private String dnsServersVariable;
    /**
     * @return Set domain name client uses to resolve hostnames
     * 
     */
    private String domainName;
    /**
     * @return Variable name
     * 
     */
    private String domainNameVariable;
    /**
     * @return Variable name
     * 
     */
    private String excludeVariable;
    /**
     * @return Configure IPv4 address to exclude from DHCP address pool
     * 
     */
    private List<String> excludes;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return Set MTU on interface to DHCP client
     * 
     */
    private Integer interfaceMtu;
    /**
     * @return Variable name
     * 
     */
    private String interfaceMtuVariable;
    /**
     * @return Configure how long a DHCP-assigned IP address is valid
     * 
     */
    private Integer leaseTime;
    /**
     * @return Variable name
     * 
     */
    private String leaseTimeVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Network Address
     * 
     */
    private String networkAddress;
    /**
     * @return Variable name
     * 
     */
    private String networkAddressVariable;
    /**
     * @return Configure Options Code
     * 
     */
    private List<GetServiceDhcpServerFeatureOptionCode> optionCodes;
    /**
     * @return Configure static IP addresses
     * 
     */
    private List<GetServiceDhcpServerFeatureStaticLease> staticLeases;
    /**
     * @return Subnet Mask
     * 
     */
    private String subnetMask;
    /**
     * @return Variable name
     * 
     */
    private String subnetMaskVariable;
    /**
     * @return Configure TFTP server IP addresses
     * 
     */
    private List<String> tftpServers;
    /**
     * @return Variable name
     * 
     */
    private String tftpServersVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetServiceDhcpServerFeatureResult() {}
    /**
     * @return Set IP address of default gateway
     * 
     */
    public String defaultGateway() {
        return this.defaultGateway;
    }
    /**
     * @return Variable name
     * 
     */
    public String defaultGatewayVariable() {
        return this.defaultGatewayVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Configure one or more DNS server IP addresses
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    /**
     * @return Variable name
     * 
     */
    public String dnsServersVariable() {
        return this.dnsServersVariable;
    }
    /**
     * @return Set domain name client uses to resolve hostnames
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return Variable name
     * 
     */
    public String domainNameVariable() {
        return this.domainNameVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String excludeVariable() {
        return this.excludeVariable;
    }
    /**
     * @return Configure IPv4 address to exclude from DHCP address pool
     * 
     */
    public List<String> excludes() {
        return this.excludes;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set MTU on interface to DHCP client
     * 
     */
    public Integer interfaceMtu() {
        return this.interfaceMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceMtuVariable() {
        return this.interfaceMtuVariable;
    }
    /**
     * @return Configure how long a DHCP-assigned IP address is valid
     * 
     */
    public Integer leaseTime() {
        return this.leaseTime;
    }
    /**
     * @return Variable name
     * 
     */
    public String leaseTimeVariable() {
        return this.leaseTimeVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Network Address
     * 
     */
    public String networkAddress() {
        return this.networkAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String networkAddressVariable() {
        return this.networkAddressVariable;
    }
    /**
     * @return Configure Options Code
     * 
     */
    public List<GetServiceDhcpServerFeatureOptionCode> optionCodes() {
        return this.optionCodes;
    }
    /**
     * @return Configure static IP addresses
     * 
     */
    public List<GetServiceDhcpServerFeatureStaticLease> staticLeases() {
        return this.staticLeases;
    }
    /**
     * @return Subnet Mask
     * 
     */
    public String subnetMask() {
        return this.subnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String subnetMaskVariable() {
        return this.subnetMaskVariable;
    }
    /**
     * @return Configure TFTP server IP addresses
     * 
     */
    public List<String> tftpServers() {
        return this.tftpServers;
    }
    /**
     * @return Variable name
     * 
     */
    public String tftpServersVariable() {
        return this.tftpServersVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceDhcpServerFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String defaultGateway;
        private String defaultGatewayVariable;
        private String description;
        private List<String> dnsServers;
        private String dnsServersVariable;
        private String domainName;
        private String domainNameVariable;
        private String excludeVariable;
        private List<String> excludes;
        private String featureProfileId;
        private String id;
        private Integer interfaceMtu;
        private String interfaceMtuVariable;
        private Integer leaseTime;
        private String leaseTimeVariable;
        private String name;
        private String networkAddress;
        private String networkAddressVariable;
        private List<GetServiceDhcpServerFeatureOptionCode> optionCodes;
        private List<GetServiceDhcpServerFeatureStaticLease> staticLeases;
        private String subnetMask;
        private String subnetMaskVariable;
        private List<String> tftpServers;
        private String tftpServersVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetServiceDhcpServerFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultGateway = defaults.defaultGateway;
    	      this.defaultGatewayVariable = defaults.defaultGatewayVariable;
    	      this.description = defaults.description;
    	      this.dnsServers = defaults.dnsServers;
    	      this.dnsServersVariable = defaults.dnsServersVariable;
    	      this.domainName = defaults.domainName;
    	      this.domainNameVariable = defaults.domainNameVariable;
    	      this.excludeVariable = defaults.excludeVariable;
    	      this.excludes = defaults.excludes;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.interfaceMtu = defaults.interfaceMtu;
    	      this.interfaceMtuVariable = defaults.interfaceMtuVariable;
    	      this.leaseTime = defaults.leaseTime;
    	      this.leaseTimeVariable = defaults.leaseTimeVariable;
    	      this.name = defaults.name;
    	      this.networkAddress = defaults.networkAddress;
    	      this.networkAddressVariable = defaults.networkAddressVariable;
    	      this.optionCodes = defaults.optionCodes;
    	      this.staticLeases = defaults.staticLeases;
    	      this.subnetMask = defaults.subnetMask;
    	      this.subnetMaskVariable = defaults.subnetMaskVariable;
    	      this.tftpServers = defaults.tftpServers;
    	      this.tftpServersVariable = defaults.tftpServersVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder defaultGateway(String defaultGateway) {
            if (defaultGateway == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "defaultGateway");
            }
            this.defaultGateway = defaultGateway;
            return this;
        }
        @CustomType.Setter
        public Builder defaultGatewayVariable(String defaultGatewayVariable) {
            if (defaultGatewayVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "defaultGatewayVariable");
            }
            this.defaultGatewayVariable = defaultGatewayVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServers(List<String> dnsServers) {
            if (dnsServers == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "dnsServers");
            }
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder dnsServersVariable(String dnsServersVariable) {
            if (dnsServersVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "dnsServersVariable");
            }
            this.dnsServersVariable = dnsServersVariable;
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            if (domainName == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "domainName");
            }
            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder domainNameVariable(String domainNameVariable) {
            if (domainNameVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "domainNameVariable");
            }
            this.domainNameVariable = domainNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder excludeVariable(String excludeVariable) {
            if (excludeVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "excludeVariable");
            }
            this.excludeVariable = excludeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder excludes(List<String> excludes) {
            if (excludes == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "excludes");
            }
            this.excludes = excludes;
            return this;
        }
        public Builder excludes(String... excludes) {
            return excludes(List.of(excludes));
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtu(Integer interfaceMtu) {
            if (interfaceMtu == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "interfaceMtu");
            }
            this.interfaceMtu = interfaceMtu;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtuVariable(String interfaceMtuVariable) {
            if (interfaceMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "interfaceMtuVariable");
            }
            this.interfaceMtuVariable = interfaceMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder leaseTime(Integer leaseTime) {
            if (leaseTime == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "leaseTime");
            }
            this.leaseTime = leaseTime;
            return this;
        }
        @CustomType.Setter
        public Builder leaseTimeVariable(String leaseTimeVariable) {
            if (leaseTimeVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "leaseTimeVariable");
            }
            this.leaseTimeVariable = leaseTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkAddress(String networkAddress) {
            if (networkAddress == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "networkAddress");
            }
            this.networkAddress = networkAddress;
            return this;
        }
        @CustomType.Setter
        public Builder networkAddressVariable(String networkAddressVariable) {
            if (networkAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "networkAddressVariable");
            }
            this.networkAddressVariable = networkAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optionCodes(List<GetServiceDhcpServerFeatureOptionCode> optionCodes) {
            if (optionCodes == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "optionCodes");
            }
            this.optionCodes = optionCodes;
            return this;
        }
        public Builder optionCodes(GetServiceDhcpServerFeatureOptionCode... optionCodes) {
            return optionCodes(List.of(optionCodes));
        }
        @CustomType.Setter
        public Builder staticLeases(List<GetServiceDhcpServerFeatureStaticLease> staticLeases) {
            if (staticLeases == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "staticLeases");
            }
            this.staticLeases = staticLeases;
            return this;
        }
        public Builder staticLeases(GetServiceDhcpServerFeatureStaticLease... staticLeases) {
            return staticLeases(List.of(staticLeases));
        }
        @CustomType.Setter
        public Builder subnetMask(String subnetMask) {
            if (subnetMask == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "subnetMask");
            }
            this.subnetMask = subnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder subnetMaskVariable(String subnetMaskVariable) {
            if (subnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "subnetMaskVariable");
            }
            this.subnetMaskVariable = subnetMaskVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tftpServers(List<String> tftpServers) {
            if (tftpServers == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "tftpServers");
            }
            this.tftpServers = tftpServers;
            return this;
        }
        public Builder tftpServers(String... tftpServers) {
            return tftpServers(List.of(tftpServers));
        }
        @CustomType.Setter
        public Builder tftpServersVariable(String tftpServersVariable) {
            if (tftpServersVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "tftpServersVariable");
            }
            this.tftpServersVariable = tftpServersVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetServiceDhcpServerFeatureResult build() {
            final var _resultValue = new GetServiceDhcpServerFeatureResult();
            _resultValue.defaultGateway = defaultGateway;
            _resultValue.defaultGatewayVariable = defaultGatewayVariable;
            _resultValue.description = description;
            _resultValue.dnsServers = dnsServers;
            _resultValue.dnsServersVariable = dnsServersVariable;
            _resultValue.domainName = domainName;
            _resultValue.domainNameVariable = domainNameVariable;
            _resultValue.excludeVariable = excludeVariable;
            _resultValue.excludes = excludes;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.interfaceMtu = interfaceMtu;
            _resultValue.interfaceMtuVariable = interfaceMtuVariable;
            _resultValue.leaseTime = leaseTime;
            _resultValue.leaseTimeVariable = leaseTimeVariable;
            _resultValue.name = name;
            _resultValue.networkAddress = networkAddress;
            _resultValue.networkAddressVariable = networkAddressVariable;
            _resultValue.optionCodes = optionCodes;
            _resultValue.staticLeases = staticLeases;
            _resultValue.subnetMask = subnetMask;
            _resultValue.subnetMaskVariable = subnetMaskVariable;
            _resultValue.tftpServers = tftpServers;
            _resultValue.tftpServersVariable = tftpServersVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
