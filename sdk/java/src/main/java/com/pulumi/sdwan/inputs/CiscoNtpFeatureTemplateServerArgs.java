// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoNtpFeatureTemplateServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoNtpFeatureTemplateServerArgs Empty = new CiscoNtpFeatureTemplateServerArgs();

    /**
     * Set authentication key for the server
     *   - Range: `1`-`65535`
     * 
     */
    @Import(name="authenticationKeyId")
    private @Nullable Output<Integer> authenticationKeyId;

    /**
     * @return Set authentication key for the server
     *   - Range: `1`-`65535`
     * 
     */
    public Optional<Output<Integer>> authenticationKeyId() {
        return Optional.ofNullable(this.authenticationKeyId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="authenticationKeyIdVariable")
    private @Nullable Output<String> authenticationKeyIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> authenticationKeyIdVariable() {
        return Optional.ofNullable(this.authenticationKeyIdVariable);
    }

    /**
     * Set hostname or IP address of server
     * 
     */
    @Import(name="hostnameIp")
    private @Nullable Output<String> hostnameIp;

    /**
     * @return Set hostname or IP address of server
     * 
     */
    public Optional<Output<String>> hostnameIp() {
        return Optional.ofNullable(this.hostnameIp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="hostnameIpVariable")
    private @Nullable Output<String> hostnameIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> hostnameIpVariable() {
        return Optional.ofNullable(this.hostnameIpVariable);
    }

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * Prefer this NTP server
     *   - Default value: `false`
     * 
     */
    @Import(name="prefer")
    private @Nullable Output<Boolean> prefer;

    /**
     * @return Prefer this NTP server
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> prefer() {
        return Optional.ofNullable(this.prefer);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="preferVariable")
    private @Nullable Output<String> preferVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> preferVariable() {
        return Optional.ofNullable(this.preferVariable);
    }

    /**
     * Set interface to use to reach NTP server
     * 
     */
    @Import(name="sourceInterface")
    private @Nullable Output<String> sourceInterface;

    /**
     * @return Set interface to use to reach NTP server
     * 
     */
    public Optional<Output<String>> sourceInterface() {
        return Optional.ofNullable(this.sourceInterface);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="sourceInterfaceVariable")
    private @Nullable Output<String> sourceInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> sourceInterfaceVariable() {
        return Optional.ofNullable(this.sourceInterfaceVariable);
    }

    /**
     * Set NTP version
     *   - Range: `1`-`4`
     *   - Default value: `4`
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return Set NTP version
     *   - Range: `1`-`4`
     *   - Default value: `4`
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="versionVariable")
    private @Nullable Output<String> versionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> versionVariable() {
        return Optional.ofNullable(this.versionVariable);
    }

    /**
     * Set VPN in which NTP server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     * 
     */
    @Import(name="vpnId")
    private @Nullable Output<Integer> vpnId;

    /**
     * @return Set VPN in which NTP server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     * 
     */
    public Optional<Output<Integer>> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="vpnIdVariable")
    private @Nullable Output<String> vpnIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> vpnIdVariable() {
        return Optional.ofNullable(this.vpnIdVariable);
    }

    private CiscoNtpFeatureTemplateServerArgs() {}

    private CiscoNtpFeatureTemplateServerArgs(CiscoNtpFeatureTemplateServerArgs $) {
        this.authenticationKeyId = $.authenticationKeyId;
        this.authenticationKeyIdVariable = $.authenticationKeyIdVariable;
        this.hostnameIp = $.hostnameIp;
        this.hostnameIpVariable = $.hostnameIpVariable;
        this.optional = $.optional;
        this.prefer = $.prefer;
        this.preferVariable = $.preferVariable;
        this.sourceInterface = $.sourceInterface;
        this.sourceInterfaceVariable = $.sourceInterfaceVariable;
        this.version = $.version;
        this.versionVariable = $.versionVariable;
        this.vpnId = $.vpnId;
        this.vpnIdVariable = $.vpnIdVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoNtpFeatureTemplateServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoNtpFeatureTemplateServerArgs $;

        public Builder() {
            $ = new CiscoNtpFeatureTemplateServerArgs();
        }

        public Builder(CiscoNtpFeatureTemplateServerArgs defaults) {
            $ = new CiscoNtpFeatureTemplateServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationKeyId Set authentication key for the server
         *   - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder authenticationKeyId(@Nullable Output<Integer> authenticationKeyId) {
            $.authenticationKeyId = authenticationKeyId;
            return this;
        }

        /**
         * @param authenticationKeyId Set authentication key for the server
         *   - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder authenticationKeyId(Integer authenticationKeyId) {
            return authenticationKeyId(Output.of(authenticationKeyId));
        }

        /**
         * @param authenticationKeyIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder authenticationKeyIdVariable(@Nullable Output<String> authenticationKeyIdVariable) {
            $.authenticationKeyIdVariable = authenticationKeyIdVariable;
            return this;
        }

        /**
         * @param authenticationKeyIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder authenticationKeyIdVariable(String authenticationKeyIdVariable) {
            return authenticationKeyIdVariable(Output.of(authenticationKeyIdVariable));
        }

        /**
         * @param hostnameIp Set hostname or IP address of server
         * 
         * @return builder
         * 
         */
        public Builder hostnameIp(@Nullable Output<String> hostnameIp) {
            $.hostnameIp = hostnameIp;
            return this;
        }

        /**
         * @param hostnameIp Set hostname or IP address of server
         * 
         * @return builder
         * 
         */
        public Builder hostnameIp(String hostnameIp) {
            return hostnameIp(Output.of(hostnameIp));
        }

        /**
         * @param hostnameIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder hostnameIpVariable(@Nullable Output<String> hostnameIpVariable) {
            $.hostnameIpVariable = hostnameIpVariable;
            return this;
        }

        /**
         * @param hostnameIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder hostnameIpVariable(String hostnameIpVariable) {
            return hostnameIpVariable(Output.of(hostnameIpVariable));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param prefer Prefer this NTP server
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder prefer(@Nullable Output<Boolean> prefer) {
            $.prefer = prefer;
            return this;
        }

        /**
         * @param prefer Prefer this NTP server
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder prefer(Boolean prefer) {
            return prefer(Output.of(prefer));
        }

        /**
         * @param preferVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder preferVariable(@Nullable Output<String> preferVariable) {
            $.preferVariable = preferVariable;
            return this;
        }

        /**
         * @param preferVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder preferVariable(String preferVariable) {
            return preferVariable(Output.of(preferVariable));
        }

        /**
         * @param sourceInterface Set interface to use to reach NTP server
         * 
         * @return builder
         * 
         */
        public Builder sourceInterface(@Nullable Output<String> sourceInterface) {
            $.sourceInterface = sourceInterface;
            return this;
        }

        /**
         * @param sourceInterface Set interface to use to reach NTP server
         * 
         * @return builder
         * 
         */
        public Builder sourceInterface(String sourceInterface) {
            return sourceInterface(Output.of(sourceInterface));
        }

        /**
         * @param sourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceVariable(@Nullable Output<String> sourceInterfaceVariable) {
            $.sourceInterfaceVariable = sourceInterfaceVariable;
            return this;
        }

        /**
         * @param sourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceVariable(String sourceInterfaceVariable) {
            return sourceInterfaceVariable(Output.of(sourceInterfaceVariable));
        }

        /**
         * @param version Set NTP version
         *   - Range: `1`-`4`
         *   - Default value: `4`
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Set NTP version
         *   - Range: `1`-`4`
         *   - Default value: `4`
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        /**
         * @param versionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder versionVariable(@Nullable Output<String> versionVariable) {
            $.versionVariable = versionVariable;
            return this;
        }

        /**
         * @param versionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder versionVariable(String versionVariable) {
            return versionVariable(Output.of(versionVariable));
        }

        /**
         * @param vpnId Set VPN in which NTP server is located
         *   - Range: `0`-`65530`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(@Nullable Output<Integer> vpnId) {
            $.vpnId = vpnId;
            return this;
        }

        /**
         * @param vpnId Set VPN in which NTP server is located
         *   - Range: `0`-`65530`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(Integer vpnId) {
            return vpnId(Output.of(vpnId));
        }

        /**
         * @param vpnIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vpnIdVariable(@Nullable Output<String> vpnIdVariable) {
            $.vpnIdVariable = vpnIdVariable;
            return this;
        }

        /**
         * @param vpnIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vpnIdVariable(String vpnIdVariable) {
            return vpnIdVariable(Output.of(vpnIdVariable));
        }

        public CiscoNtpFeatureTemplateServerArgs build() {
            return $;
        }
    }

}
