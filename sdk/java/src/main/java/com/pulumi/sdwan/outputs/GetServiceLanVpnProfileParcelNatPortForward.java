// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceLanVpnProfileParcelNatPortForward {
    /**
     * @return NAT Pool Name
     * 
     */
    private Integer natPoolName;
    /**
     * @return Variable name
     * 
     */
    private String natPoolNameVariable;
    /**
     * @return Protocol
     * 
     */
    private String protocol;
    /**
     * @return Variable name
     * 
     */
    private String protocolVariable;
    /**
     * @return Source IP Address
     * 
     */
    private String sourceIp;
    /**
     * @return Variable name
     * 
     */
    private String sourceIpVariable;
    /**
     * @return Source Port
     * 
     */
    private Integer sourcePort;
    /**
     * @return Variable name
     * 
     */
    private String sourcePortVariable;
    /**
     * @return Translate Port
     * 
     */
    private Integer translatePort;
    /**
     * @return Variable name
     * 
     */
    private String translatePortVariable;
    /**
     * @return Translated Source IP Address
     * 
     */
    private String translatedSourceIp;
    /**
     * @return Variable name
     * 
     */
    private String translatedSourceIpVariable;

    private GetServiceLanVpnProfileParcelNatPortForward() {}
    /**
     * @return NAT Pool Name
     * 
     */
    public Integer natPoolName() {
        return this.natPoolName;
    }
    /**
     * @return Variable name
     * 
     */
    public String natPoolNameVariable() {
        return this.natPoolNameVariable;
    }
    /**
     * @return Protocol
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Variable name
     * 
     */
    public String protocolVariable() {
        return this.protocolVariable;
    }
    /**
     * @return Source IP Address
     * 
     */
    public String sourceIp() {
        return this.sourceIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String sourceIpVariable() {
        return this.sourceIpVariable;
    }
    /**
     * @return Source Port
     * 
     */
    public Integer sourcePort() {
        return this.sourcePort;
    }
    /**
     * @return Variable name
     * 
     */
    public String sourcePortVariable() {
        return this.sourcePortVariable;
    }
    /**
     * @return Translate Port
     * 
     */
    public Integer translatePort() {
        return this.translatePort;
    }
    /**
     * @return Variable name
     * 
     */
    public String translatePortVariable() {
        return this.translatePortVariable;
    }
    /**
     * @return Translated Source IP Address
     * 
     */
    public String translatedSourceIp() {
        return this.translatedSourceIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String translatedSourceIpVariable() {
        return this.translatedSourceIpVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceLanVpnProfileParcelNatPortForward defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer natPoolName;
        private String natPoolNameVariable;
        private String protocol;
        private String protocolVariable;
        private String sourceIp;
        private String sourceIpVariable;
        private Integer sourcePort;
        private String sourcePortVariable;
        private Integer translatePort;
        private String translatePortVariable;
        private String translatedSourceIp;
        private String translatedSourceIpVariable;
        public Builder() {}
        public Builder(GetServiceLanVpnProfileParcelNatPortForward defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.natPoolName = defaults.natPoolName;
    	      this.natPoolNameVariable = defaults.natPoolNameVariable;
    	      this.protocol = defaults.protocol;
    	      this.protocolVariable = defaults.protocolVariable;
    	      this.sourceIp = defaults.sourceIp;
    	      this.sourceIpVariable = defaults.sourceIpVariable;
    	      this.sourcePort = defaults.sourcePort;
    	      this.sourcePortVariable = defaults.sourcePortVariable;
    	      this.translatePort = defaults.translatePort;
    	      this.translatePortVariable = defaults.translatePortVariable;
    	      this.translatedSourceIp = defaults.translatedSourceIp;
    	      this.translatedSourceIpVariable = defaults.translatedSourceIpVariable;
        }

        @CustomType.Setter
        public Builder natPoolName(Integer natPoolName) {
            if (natPoolName == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelNatPortForward", "natPoolName");
            }
            this.natPoolName = natPoolName;
            return this;
        }
        @CustomType.Setter
        public Builder natPoolNameVariable(String natPoolNameVariable) {
            if (natPoolNameVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelNatPortForward", "natPoolNameVariable");
            }
            this.natPoolNameVariable = natPoolNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelNatPortForward", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder protocolVariable(String protocolVariable) {
            if (protocolVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelNatPortForward", "protocolVariable");
            }
            this.protocolVariable = protocolVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIp(String sourceIp) {
            if (sourceIp == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelNatPortForward", "sourceIp");
            }
            this.sourceIp = sourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpVariable(String sourceIpVariable) {
            if (sourceIpVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelNatPortForward", "sourceIpVariable");
            }
            this.sourceIpVariable = sourceIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePort(Integer sourcePort) {
            if (sourcePort == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelNatPortForward", "sourcePort");
            }
            this.sourcePort = sourcePort;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortVariable(String sourcePortVariable) {
            if (sourcePortVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelNatPortForward", "sourcePortVariable");
            }
            this.sourcePortVariable = sourcePortVariable;
            return this;
        }
        @CustomType.Setter
        public Builder translatePort(Integer translatePort) {
            if (translatePort == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelNatPortForward", "translatePort");
            }
            this.translatePort = translatePort;
            return this;
        }
        @CustomType.Setter
        public Builder translatePortVariable(String translatePortVariable) {
            if (translatePortVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelNatPortForward", "translatePortVariable");
            }
            this.translatePortVariable = translatePortVariable;
            return this;
        }
        @CustomType.Setter
        public Builder translatedSourceIp(String translatedSourceIp) {
            if (translatedSourceIp == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelNatPortForward", "translatedSourceIp");
            }
            this.translatedSourceIp = translatedSourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder translatedSourceIpVariable(String translatedSourceIpVariable) {
            if (translatedSourceIpVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelNatPortForward", "translatedSourceIpVariable");
            }
            this.translatedSourceIpVariable = translatedSourceIpVariable;
            return this;
        }
        public GetServiceLanVpnProfileParcelNatPortForward build() {
            final var _resultValue = new GetServiceLanVpnProfileParcelNatPortForward();
            _resultValue.natPoolName = natPoolName;
            _resultValue.natPoolNameVariable = natPoolNameVariable;
            _resultValue.protocol = protocol;
            _resultValue.protocolVariable = protocolVariable;
            _resultValue.sourceIp = sourceIp;
            _resultValue.sourceIpVariable = sourceIpVariable;
            _resultValue.sourcePort = sourcePort;
            _resultValue.sourcePortVariable = sourcePortVariable;
            _resultValue.translatePort = translatePort;
            _resultValue.translatePortVariable = translatePortVariable;
            _resultValue.translatedSourceIp = translatedSourceIp;
            _resultValue.translatedSourceIpVariable = translatedSourceIpVariable;
            return _resultValue;
        }
    }
}
