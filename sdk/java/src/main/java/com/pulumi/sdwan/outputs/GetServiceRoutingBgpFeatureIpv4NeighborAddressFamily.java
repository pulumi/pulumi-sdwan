// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily {
    /**
     * @return Set maximum number of prefixes accepted from BGP peer
     * 
     */
    private Integer disablePeerMaxNumberOfPrefixes;
    /**
     * @return Variable name
     * 
     */
    private String disablePeerMaxNumberOfPrefixesVariable;
    /**
     * @return Set threshold(1 to 100) at which to generate a warning message
     * 
     */
    private Integer disablePeerThreshold;
    /**
     * @return Variable name
     * 
     */
    private String disablePeerThresholdVariable;
    /**
     * @return Set IPv4 unicast address family
     * 
     */
    private String familyType;
    private String inRoutePolicyId;
    private String outRoutePolicyId;
    /**
     * @return Neighbor received maximum prefix policy is disabled.
     * 
     */
    private String policyType;
    /**
     * @return Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
     * 
     */
    private Integer restartInterval;
    /**
     * @return Variable name
     * 
     */
    private String restartIntervalVariable;
    /**
     * @return Set maximum number of prefixes accepted from BGP peer
     * 
     */
    private Integer restartMaxNumberOfPrefixes;
    /**
     * @return Variable name
     * 
     */
    private String restartMaxNumberOfPrefixesVariable;
    /**
     * @return Set threshold(1 to 100) at which to generate a warning message
     * 
     */
    private Integer restartThreshold;
    /**
     * @return Variable name
     * 
     */
    private String restartThresholdVariable;
    /**
     * @return Set maximum number of prefixes accepted from BGP peer
     * 
     */
    private Integer warningMessageMaxNumberOfPrefixes;
    /**
     * @return Variable name
     * 
     */
    private String warningMessageMaxNumberOfPrefixesVariable;
    /**
     * @return Set threshold(1 to 100) at which to generate a warning message
     * 
     */
    private Integer warningMessageThreshold;
    /**
     * @return Variable name
     * 
     */
    private String warningMessageThresholdVariable;

    private GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily() {}
    /**
     * @return Set maximum number of prefixes accepted from BGP peer
     * 
     */
    public Integer disablePeerMaxNumberOfPrefixes() {
        return this.disablePeerMaxNumberOfPrefixes;
    }
    /**
     * @return Variable name
     * 
     */
    public String disablePeerMaxNumberOfPrefixesVariable() {
        return this.disablePeerMaxNumberOfPrefixesVariable;
    }
    /**
     * @return Set threshold(1 to 100) at which to generate a warning message
     * 
     */
    public Integer disablePeerThreshold() {
        return this.disablePeerThreshold;
    }
    /**
     * @return Variable name
     * 
     */
    public String disablePeerThresholdVariable() {
        return this.disablePeerThresholdVariable;
    }
    /**
     * @return Set IPv4 unicast address family
     * 
     */
    public String familyType() {
        return this.familyType;
    }
    public String inRoutePolicyId() {
        return this.inRoutePolicyId;
    }
    public String outRoutePolicyId() {
        return this.outRoutePolicyId;
    }
    /**
     * @return Neighbor received maximum prefix policy is disabled.
     * 
     */
    public String policyType() {
        return this.policyType;
    }
    /**
     * @return Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
     * 
     */
    public Integer restartInterval() {
        return this.restartInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String restartIntervalVariable() {
        return this.restartIntervalVariable;
    }
    /**
     * @return Set maximum number of prefixes accepted from BGP peer
     * 
     */
    public Integer restartMaxNumberOfPrefixes() {
        return this.restartMaxNumberOfPrefixes;
    }
    /**
     * @return Variable name
     * 
     */
    public String restartMaxNumberOfPrefixesVariable() {
        return this.restartMaxNumberOfPrefixesVariable;
    }
    /**
     * @return Set threshold(1 to 100) at which to generate a warning message
     * 
     */
    public Integer restartThreshold() {
        return this.restartThreshold;
    }
    /**
     * @return Variable name
     * 
     */
    public String restartThresholdVariable() {
        return this.restartThresholdVariable;
    }
    /**
     * @return Set maximum number of prefixes accepted from BGP peer
     * 
     */
    public Integer warningMessageMaxNumberOfPrefixes() {
        return this.warningMessageMaxNumberOfPrefixes;
    }
    /**
     * @return Variable name
     * 
     */
    public String warningMessageMaxNumberOfPrefixesVariable() {
        return this.warningMessageMaxNumberOfPrefixesVariable;
    }
    /**
     * @return Set threshold(1 to 100) at which to generate a warning message
     * 
     */
    public Integer warningMessageThreshold() {
        return this.warningMessageThreshold;
    }
    /**
     * @return Variable name
     * 
     */
    public String warningMessageThresholdVariable() {
        return this.warningMessageThresholdVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer disablePeerMaxNumberOfPrefixes;
        private String disablePeerMaxNumberOfPrefixesVariable;
        private Integer disablePeerThreshold;
        private String disablePeerThresholdVariable;
        private String familyType;
        private String inRoutePolicyId;
        private String outRoutePolicyId;
        private String policyType;
        private Integer restartInterval;
        private String restartIntervalVariable;
        private Integer restartMaxNumberOfPrefixes;
        private String restartMaxNumberOfPrefixesVariable;
        private Integer restartThreshold;
        private String restartThresholdVariable;
        private Integer warningMessageMaxNumberOfPrefixes;
        private String warningMessageMaxNumberOfPrefixesVariable;
        private Integer warningMessageThreshold;
        private String warningMessageThresholdVariable;
        public Builder() {}
        public Builder(GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disablePeerMaxNumberOfPrefixes = defaults.disablePeerMaxNumberOfPrefixes;
    	      this.disablePeerMaxNumberOfPrefixesVariable = defaults.disablePeerMaxNumberOfPrefixesVariable;
    	      this.disablePeerThreshold = defaults.disablePeerThreshold;
    	      this.disablePeerThresholdVariable = defaults.disablePeerThresholdVariable;
    	      this.familyType = defaults.familyType;
    	      this.inRoutePolicyId = defaults.inRoutePolicyId;
    	      this.outRoutePolicyId = defaults.outRoutePolicyId;
    	      this.policyType = defaults.policyType;
    	      this.restartInterval = defaults.restartInterval;
    	      this.restartIntervalVariable = defaults.restartIntervalVariable;
    	      this.restartMaxNumberOfPrefixes = defaults.restartMaxNumberOfPrefixes;
    	      this.restartMaxNumberOfPrefixesVariable = defaults.restartMaxNumberOfPrefixesVariable;
    	      this.restartThreshold = defaults.restartThreshold;
    	      this.restartThresholdVariable = defaults.restartThresholdVariable;
    	      this.warningMessageMaxNumberOfPrefixes = defaults.warningMessageMaxNumberOfPrefixes;
    	      this.warningMessageMaxNumberOfPrefixesVariable = defaults.warningMessageMaxNumberOfPrefixesVariable;
    	      this.warningMessageThreshold = defaults.warningMessageThreshold;
    	      this.warningMessageThresholdVariable = defaults.warningMessageThresholdVariable;
        }

        @CustomType.Setter
        public Builder disablePeerMaxNumberOfPrefixes(Integer disablePeerMaxNumberOfPrefixes) {
            if (disablePeerMaxNumberOfPrefixes == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "disablePeerMaxNumberOfPrefixes");
            }
            this.disablePeerMaxNumberOfPrefixes = disablePeerMaxNumberOfPrefixes;
            return this;
        }
        @CustomType.Setter
        public Builder disablePeerMaxNumberOfPrefixesVariable(String disablePeerMaxNumberOfPrefixesVariable) {
            if (disablePeerMaxNumberOfPrefixesVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "disablePeerMaxNumberOfPrefixesVariable");
            }
            this.disablePeerMaxNumberOfPrefixesVariable = disablePeerMaxNumberOfPrefixesVariable;
            return this;
        }
        @CustomType.Setter
        public Builder disablePeerThreshold(Integer disablePeerThreshold) {
            if (disablePeerThreshold == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "disablePeerThreshold");
            }
            this.disablePeerThreshold = disablePeerThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder disablePeerThresholdVariable(String disablePeerThresholdVariable) {
            if (disablePeerThresholdVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "disablePeerThresholdVariable");
            }
            this.disablePeerThresholdVariable = disablePeerThresholdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder familyType(String familyType) {
            if (familyType == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "familyType");
            }
            this.familyType = familyType;
            return this;
        }
        @CustomType.Setter
        public Builder inRoutePolicyId(String inRoutePolicyId) {
            if (inRoutePolicyId == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "inRoutePolicyId");
            }
            this.inRoutePolicyId = inRoutePolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder outRoutePolicyId(String outRoutePolicyId) {
            if (outRoutePolicyId == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "outRoutePolicyId");
            }
            this.outRoutePolicyId = outRoutePolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder policyType(String policyType) {
            if (policyType == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "policyType");
            }
            this.policyType = policyType;
            return this;
        }
        @CustomType.Setter
        public Builder restartInterval(Integer restartInterval) {
            if (restartInterval == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "restartInterval");
            }
            this.restartInterval = restartInterval;
            return this;
        }
        @CustomType.Setter
        public Builder restartIntervalVariable(String restartIntervalVariable) {
            if (restartIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "restartIntervalVariable");
            }
            this.restartIntervalVariable = restartIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder restartMaxNumberOfPrefixes(Integer restartMaxNumberOfPrefixes) {
            if (restartMaxNumberOfPrefixes == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "restartMaxNumberOfPrefixes");
            }
            this.restartMaxNumberOfPrefixes = restartMaxNumberOfPrefixes;
            return this;
        }
        @CustomType.Setter
        public Builder restartMaxNumberOfPrefixesVariable(String restartMaxNumberOfPrefixesVariable) {
            if (restartMaxNumberOfPrefixesVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "restartMaxNumberOfPrefixesVariable");
            }
            this.restartMaxNumberOfPrefixesVariable = restartMaxNumberOfPrefixesVariable;
            return this;
        }
        @CustomType.Setter
        public Builder restartThreshold(Integer restartThreshold) {
            if (restartThreshold == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "restartThreshold");
            }
            this.restartThreshold = restartThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder restartThresholdVariable(String restartThresholdVariable) {
            if (restartThresholdVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "restartThresholdVariable");
            }
            this.restartThresholdVariable = restartThresholdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder warningMessageMaxNumberOfPrefixes(Integer warningMessageMaxNumberOfPrefixes) {
            if (warningMessageMaxNumberOfPrefixes == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "warningMessageMaxNumberOfPrefixes");
            }
            this.warningMessageMaxNumberOfPrefixes = warningMessageMaxNumberOfPrefixes;
            return this;
        }
        @CustomType.Setter
        public Builder warningMessageMaxNumberOfPrefixesVariable(String warningMessageMaxNumberOfPrefixesVariable) {
            if (warningMessageMaxNumberOfPrefixesVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "warningMessageMaxNumberOfPrefixesVariable");
            }
            this.warningMessageMaxNumberOfPrefixesVariable = warningMessageMaxNumberOfPrefixesVariable;
            return this;
        }
        @CustomType.Setter
        public Builder warningMessageThreshold(Integer warningMessageThreshold) {
            if (warningMessageThreshold == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "warningMessageThreshold");
            }
            this.warningMessageThreshold = warningMessageThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder warningMessageThresholdVariable(String warningMessageThresholdVariable) {
            if (warningMessageThresholdVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily", "warningMessageThresholdVariable");
            }
            this.warningMessageThresholdVariable = warningMessageThresholdVariable;
            return this;
        }
        public GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily build() {
            final var _resultValue = new GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily();
            _resultValue.disablePeerMaxNumberOfPrefixes = disablePeerMaxNumberOfPrefixes;
            _resultValue.disablePeerMaxNumberOfPrefixesVariable = disablePeerMaxNumberOfPrefixesVariable;
            _resultValue.disablePeerThreshold = disablePeerThreshold;
            _resultValue.disablePeerThresholdVariable = disablePeerThresholdVariable;
            _resultValue.familyType = familyType;
            _resultValue.inRoutePolicyId = inRoutePolicyId;
            _resultValue.outRoutePolicyId = outRoutePolicyId;
            _resultValue.policyType = policyType;
            _resultValue.restartInterval = restartInterval;
            _resultValue.restartIntervalVariable = restartIntervalVariable;
            _resultValue.restartMaxNumberOfPrefixes = restartMaxNumberOfPrefixes;
            _resultValue.restartMaxNumberOfPrefixesVariable = restartMaxNumberOfPrefixesVariable;
            _resultValue.restartThreshold = restartThreshold;
            _resultValue.restartThresholdVariable = restartThresholdVariable;
            _resultValue.warningMessageMaxNumberOfPrefixes = warningMessageMaxNumberOfPrefixes;
            _resultValue.warningMessageMaxNumberOfPrefixesVariable = warningMessageMaxNumberOfPrefixesVariable;
            _resultValue.warningMessageThreshold = warningMessageThreshold;
            _resultValue.warningMessageThresholdVariable = warningMessageThresholdVariable;
            return _resultValue;
        }
    }
}
