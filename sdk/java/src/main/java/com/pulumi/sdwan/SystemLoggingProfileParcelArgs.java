// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sdwan.inputs.SystemLoggingProfileParcelIpv4ServerArgs;
import com.pulumi.sdwan.inputs.SystemLoggingProfileParcelIpv6ServerArgs;
import com.pulumi.sdwan.inputs.SystemLoggingProfileParcelTlsProfileArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SystemLoggingProfileParcelArgs extends com.pulumi.resources.ResourceArgs {

    public static final SystemLoggingProfileParcelArgs Empty = new SystemLoggingProfileParcelArgs();

    /**
     * The description of the profile parcel
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the profile parcel
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enable logging to local disk - Default value: `true`
     * 
     */
    @Import(name="diskEnable")
    private @Nullable Output<Boolean> diskEnable;

    /**
     * @return Enable logging to local disk - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> diskEnable() {
        return Optional.ofNullable(this.diskEnable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="diskEnableVariable")
    private @Nullable Output<String> diskEnableVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> diskEnableVariable() {
        return Optional.ofNullable(this.diskEnableVariable);
    }

    /**
     * Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
     * 
     */
    @Import(name="diskFileRotate")
    private @Nullable Output<Integer> diskFileRotate;

    /**
     * @return Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
     * 
     */
    public Optional<Output<Integer>> diskFileRotate() {
        return Optional.ofNullable(this.diskFileRotate);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="diskFileRotateVariable")
    private @Nullable Output<String> diskFileRotateVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> diskFileRotateVariable() {
        return Optional.ofNullable(this.diskFileRotateVariable);
    }

    /**
     * Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
     * 
     */
    @Import(name="diskFileSize")
    private @Nullable Output<Integer> diskFileSize;

    /**
     * @return Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
     * 
     */
    public Optional<Output<Integer>> diskFileSize() {
        return Optional.ofNullable(this.diskFileSize);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="diskFileSizeVariable")
    private @Nullable Output<String> diskFileSizeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> diskFileSizeVariable() {
        return Optional.ofNullable(this.diskFileSizeVariable);
    }

    /**
     * Feature Profile ID
     * 
     */
    @Import(name="featureProfileId")
    private @Nullable Output<String> featureProfileId;

    /**
     * @return Feature Profile ID
     * 
     */
    public Optional<Output<String>> featureProfileId() {
        return Optional.ofNullable(this.featureProfileId);
    }

    /**
     * Enable logging to remote server
     * 
     */
    @Import(name="ipv4Servers")
    private @Nullable Output<List<SystemLoggingProfileParcelIpv4ServerArgs>> ipv4Servers;

    /**
     * @return Enable logging to remote server
     * 
     */
    public Optional<Output<List<SystemLoggingProfileParcelIpv4ServerArgs>>> ipv4Servers() {
        return Optional.ofNullable(this.ipv4Servers);
    }

    /**
     * Enable logging to remote ipv6 server
     * 
     */
    @Import(name="ipv6Servers")
    private @Nullable Output<List<SystemLoggingProfileParcelIpv6ServerArgs>> ipv6Servers;

    /**
     * @return Enable logging to remote ipv6 server
     * 
     */
    public Optional<Output<List<SystemLoggingProfileParcelIpv6ServerArgs>>> ipv6Servers() {
        return Optional.ofNullable(this.ipv6Servers);
    }

    /**
     * The name of the profile parcel
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the profile parcel
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configure a TLS profile
     * 
     */
    @Import(name="tlsProfiles")
    private @Nullable Output<List<SystemLoggingProfileParcelTlsProfileArgs>> tlsProfiles;

    /**
     * @return Configure a TLS profile
     * 
     */
    public Optional<Output<List<SystemLoggingProfileParcelTlsProfileArgs>>> tlsProfiles() {
        return Optional.ofNullable(this.tlsProfiles);
    }

    private SystemLoggingProfileParcelArgs() {}

    private SystemLoggingProfileParcelArgs(SystemLoggingProfileParcelArgs $) {
        this.description = $.description;
        this.diskEnable = $.diskEnable;
        this.diskEnableVariable = $.diskEnableVariable;
        this.diskFileRotate = $.diskFileRotate;
        this.diskFileRotateVariable = $.diskFileRotateVariable;
        this.diskFileSize = $.diskFileSize;
        this.diskFileSizeVariable = $.diskFileSizeVariable;
        this.featureProfileId = $.featureProfileId;
        this.ipv4Servers = $.ipv4Servers;
        this.ipv6Servers = $.ipv6Servers;
        this.name = $.name;
        this.tlsProfiles = $.tlsProfiles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SystemLoggingProfileParcelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SystemLoggingProfileParcelArgs $;

        public Builder() {
            $ = new SystemLoggingProfileParcelArgs();
        }

        public Builder(SystemLoggingProfileParcelArgs defaults) {
            $ = new SystemLoggingProfileParcelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the profile parcel
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the profile parcel
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diskEnable Enable logging to local disk - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder diskEnable(@Nullable Output<Boolean> diskEnable) {
            $.diskEnable = diskEnable;
            return this;
        }

        /**
         * @param diskEnable Enable logging to local disk - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder diskEnable(Boolean diskEnable) {
            return diskEnable(Output.of(diskEnable));
        }

        /**
         * @param diskEnableVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder diskEnableVariable(@Nullable Output<String> diskEnableVariable) {
            $.diskEnableVariable = diskEnableVariable;
            return this;
        }

        /**
         * @param diskEnableVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder diskEnableVariable(String diskEnableVariable) {
            return diskEnableVariable(Output.of(diskEnableVariable));
        }

        /**
         * @param diskFileRotate Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder diskFileRotate(@Nullable Output<Integer> diskFileRotate) {
            $.diskFileRotate = diskFileRotate;
            return this;
        }

        /**
         * @param diskFileRotate Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder diskFileRotate(Integer diskFileRotate) {
            return diskFileRotate(Output.of(diskFileRotate));
        }

        /**
         * @param diskFileRotateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder diskFileRotateVariable(@Nullable Output<String> diskFileRotateVariable) {
            $.diskFileRotateVariable = diskFileRotateVariable;
            return this;
        }

        /**
         * @param diskFileRotateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder diskFileRotateVariable(String diskFileRotateVariable) {
            return diskFileRotateVariable(Output.of(diskFileRotateVariable));
        }

        /**
         * @param diskFileSize Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder diskFileSize(@Nullable Output<Integer> diskFileSize) {
            $.diskFileSize = diskFileSize;
            return this;
        }

        /**
         * @param diskFileSize Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder diskFileSize(Integer diskFileSize) {
            return diskFileSize(Output.of(diskFileSize));
        }

        /**
         * @param diskFileSizeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder diskFileSizeVariable(@Nullable Output<String> diskFileSizeVariable) {
            $.diskFileSizeVariable = diskFileSizeVariable;
            return this;
        }

        /**
         * @param diskFileSizeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder diskFileSizeVariable(String diskFileSizeVariable) {
            return diskFileSizeVariable(Output.of(diskFileSizeVariable));
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(@Nullable Output<String> featureProfileId) {
            $.featureProfileId = featureProfileId;
            return this;
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(String featureProfileId) {
            return featureProfileId(Output.of(featureProfileId));
        }

        /**
         * @param ipv4Servers Enable logging to remote server
         * 
         * @return builder
         * 
         */
        public Builder ipv4Servers(@Nullable Output<List<SystemLoggingProfileParcelIpv4ServerArgs>> ipv4Servers) {
            $.ipv4Servers = ipv4Servers;
            return this;
        }

        /**
         * @param ipv4Servers Enable logging to remote server
         * 
         * @return builder
         * 
         */
        public Builder ipv4Servers(List<SystemLoggingProfileParcelIpv4ServerArgs> ipv4Servers) {
            return ipv4Servers(Output.of(ipv4Servers));
        }

        /**
         * @param ipv4Servers Enable logging to remote server
         * 
         * @return builder
         * 
         */
        public Builder ipv4Servers(SystemLoggingProfileParcelIpv4ServerArgs... ipv4Servers) {
            return ipv4Servers(List.of(ipv4Servers));
        }

        /**
         * @param ipv6Servers Enable logging to remote ipv6 server
         * 
         * @return builder
         * 
         */
        public Builder ipv6Servers(@Nullable Output<List<SystemLoggingProfileParcelIpv6ServerArgs>> ipv6Servers) {
            $.ipv6Servers = ipv6Servers;
            return this;
        }

        /**
         * @param ipv6Servers Enable logging to remote ipv6 server
         * 
         * @return builder
         * 
         */
        public Builder ipv6Servers(List<SystemLoggingProfileParcelIpv6ServerArgs> ipv6Servers) {
            return ipv6Servers(Output.of(ipv6Servers));
        }

        /**
         * @param ipv6Servers Enable logging to remote ipv6 server
         * 
         * @return builder
         * 
         */
        public Builder ipv6Servers(SystemLoggingProfileParcelIpv6ServerArgs... ipv6Servers) {
            return ipv6Servers(List.of(ipv6Servers));
        }

        /**
         * @param name The name of the profile parcel
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the profile parcel
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tlsProfiles Configure a TLS profile
         * 
         * @return builder
         * 
         */
        public Builder tlsProfiles(@Nullable Output<List<SystemLoggingProfileParcelTlsProfileArgs>> tlsProfiles) {
            $.tlsProfiles = tlsProfiles;
            return this;
        }

        /**
         * @param tlsProfiles Configure a TLS profile
         * 
         * @return builder
         * 
         */
        public Builder tlsProfiles(List<SystemLoggingProfileParcelTlsProfileArgs> tlsProfiles) {
            return tlsProfiles(Output.of(tlsProfiles));
        }

        /**
         * @param tlsProfiles Configure a TLS profile
         * 
         * @return builder
         * 
         */
        public Builder tlsProfiles(SystemLoggingProfileParcelTlsProfileArgs... tlsProfiles) {
            return tlsProfiles(List.of(tlsProfiles));
        }

        public SystemLoggingProfileParcelArgs build() {
            return $;
        }
    }

}
