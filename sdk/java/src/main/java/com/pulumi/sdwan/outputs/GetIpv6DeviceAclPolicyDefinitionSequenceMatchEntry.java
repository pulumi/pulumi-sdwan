// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry {
    /**
     * @return Destination data IPv6 prefix list ID
     * 
     */
    private String destinationDataIpv6PrefixListId;
    /**
     * @return Destination data IPv6 prefix list version
     * 
     */
    private Integer destinationDataIpv6PrefixListVersion;
    /**
     * @return Destination IP prefix
     * 
     */
    private String destinationIp;
    /**
     * @return Destination port, only `22` and `161` supported
     * 
     */
    private Integer destinationPort;
    /**
     * @return Source data IPv6 prefix list ID
     * 
     */
    private String sourceDataIpv6PrefixListId;
    /**
     * @return Source data IPv6 prefix list version
     * 
     */
    private Integer sourceDataIpv6PrefixListVersion;
    /**
     * @return Source IP prefix
     * 
     */
    private String sourceIp;
    /**
     * @return Source ports. Single value (0-65535) or ranges separated by spaces.
     * 
     */
    private String sourcePorts;
    /**
     * @return Type of match entry
     * 
     */
    private String type;

    private GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry() {}
    /**
     * @return Destination data IPv6 prefix list ID
     * 
     */
    public String destinationDataIpv6PrefixListId() {
        return this.destinationDataIpv6PrefixListId;
    }
    /**
     * @return Destination data IPv6 prefix list version
     * 
     */
    public Integer destinationDataIpv6PrefixListVersion() {
        return this.destinationDataIpv6PrefixListVersion;
    }
    /**
     * @return Destination IP prefix
     * 
     */
    public String destinationIp() {
        return this.destinationIp;
    }
    /**
     * @return Destination port, only `22` and `161` supported
     * 
     */
    public Integer destinationPort() {
        return this.destinationPort;
    }
    /**
     * @return Source data IPv6 prefix list ID
     * 
     */
    public String sourceDataIpv6PrefixListId() {
        return this.sourceDataIpv6PrefixListId;
    }
    /**
     * @return Source data IPv6 prefix list version
     * 
     */
    public Integer sourceDataIpv6PrefixListVersion() {
        return this.sourceDataIpv6PrefixListVersion;
    }
    /**
     * @return Source IP prefix
     * 
     */
    public String sourceIp() {
        return this.sourceIp;
    }
    /**
     * @return Source ports. Single value (0-65535) or ranges separated by spaces.
     * 
     */
    public String sourcePorts() {
        return this.sourcePorts;
    }
    /**
     * @return Type of match entry
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String destinationDataIpv6PrefixListId;
        private Integer destinationDataIpv6PrefixListVersion;
        private String destinationIp;
        private Integer destinationPort;
        private String sourceDataIpv6PrefixListId;
        private Integer sourceDataIpv6PrefixListVersion;
        private String sourceIp;
        private String sourcePorts;
        private String type;
        public Builder() {}
        public Builder(GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationDataIpv6PrefixListId = defaults.destinationDataIpv6PrefixListId;
    	      this.destinationDataIpv6PrefixListVersion = defaults.destinationDataIpv6PrefixListVersion;
    	      this.destinationIp = defaults.destinationIp;
    	      this.destinationPort = defaults.destinationPort;
    	      this.sourceDataIpv6PrefixListId = defaults.sourceDataIpv6PrefixListId;
    	      this.sourceDataIpv6PrefixListVersion = defaults.sourceDataIpv6PrefixListVersion;
    	      this.sourceIp = defaults.sourceIp;
    	      this.sourcePorts = defaults.sourcePorts;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder destinationDataIpv6PrefixListId(String destinationDataIpv6PrefixListId) {
            if (destinationDataIpv6PrefixListId == null) {
              throw new MissingRequiredPropertyException("GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry", "destinationDataIpv6PrefixListId");
            }
            this.destinationDataIpv6PrefixListId = destinationDataIpv6PrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataIpv6PrefixListVersion(Integer destinationDataIpv6PrefixListVersion) {
            if (destinationDataIpv6PrefixListVersion == null) {
              throw new MissingRequiredPropertyException("GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry", "destinationDataIpv6PrefixListVersion");
            }
            this.destinationDataIpv6PrefixListVersion = destinationDataIpv6PrefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder destinationIp(String destinationIp) {
            if (destinationIp == null) {
              throw new MissingRequiredPropertyException("GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry", "destinationIp");
            }
            this.destinationIp = destinationIp;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPort(Integer destinationPort) {
            if (destinationPort == null) {
              throw new MissingRequiredPropertyException("GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry", "destinationPort");
            }
            this.destinationPort = destinationPort;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataIpv6PrefixListId(String sourceDataIpv6PrefixListId) {
            if (sourceDataIpv6PrefixListId == null) {
              throw new MissingRequiredPropertyException("GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry", "sourceDataIpv6PrefixListId");
            }
            this.sourceDataIpv6PrefixListId = sourceDataIpv6PrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataIpv6PrefixListVersion(Integer sourceDataIpv6PrefixListVersion) {
            if (sourceDataIpv6PrefixListVersion == null) {
              throw new MissingRequiredPropertyException("GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry", "sourceDataIpv6PrefixListVersion");
            }
            this.sourceDataIpv6PrefixListVersion = sourceDataIpv6PrefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIp(String sourceIp) {
            if (sourceIp == null) {
              throw new MissingRequiredPropertyException("GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry", "sourceIp");
            }
            this.sourceIp = sourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePorts(String sourcePorts) {
            if (sourcePorts == null) {
              throw new MissingRequiredPropertyException("GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry", "sourcePorts");
            }
            this.sourcePorts = sourcePorts;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry", "type");
            }
            this.type = type;
            return this;
        }
        public GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry build() {
            final var _resultValue = new GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry();
            _resultValue.destinationDataIpv6PrefixListId = destinationDataIpv6PrefixListId;
            _resultValue.destinationDataIpv6PrefixListVersion = destinationDataIpv6PrefixListVersion;
            _resultValue.destinationIp = destinationIp;
            _resultValue.destinationPort = destinationPort;
            _resultValue.sourceDataIpv6PrefixListId = sourceDataIpv6PrefixListId;
            _resultValue.sourceDataIpv6PrefixListVersion = sourceDataIpv6PrefixListVersion;
            _resultValue.sourceIp = sourceIp;
            _resultValue.sourcePorts = sourcePorts;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
