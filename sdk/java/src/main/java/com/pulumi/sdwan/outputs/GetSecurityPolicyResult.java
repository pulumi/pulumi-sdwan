// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetSecurityPolicyDefinition;
import com.pulumi.sdwan.outputs.GetSecurityPolicyLogging;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSecurityPolicyResult {
    /**
     * @return Audit trail
     * 
     */
    private String auditTrail;
    /**
     * @return List of policy definitions
     * 
     */
    private List<GetSecurityPolicyDefinition> definitions;
    /**
     * @return The description of the security policy
     * 
     */
    private String description;
    /**
     * @return Bypass firewall policy and allow all Internet traffic to/from VPN 0
     * 
     */
    private String directInternetApplications;
    /**
     * @return Failure mode
     * 
     */
    private String failureMode;
    /**
     * @return High Speed Logging Server IP
     * 
     */
    private String highSpeedLoggingServerIp;
    /**
     * @return High Speed Logging Port
     * 
     */
    private String highSpeedLoggingServerPort;
    /**
     * @return High Speed Logging Source Interface
     * 
     */
    private String highSpeedLoggingServerSourceInterface;
    /**
     * @return High Speed Logging VPN
     * 
     */
    private String highSpeedLoggingVpn;
    /**
     * @return The id of the object
     * 
     */
    private String id;
    /**
     * @return ICMP Unreachable Allow
     * 
     */
    private Boolean imcpUnreachableAllow;
    private List<GetSecurityPolicyLogging> loggings;
    /**
     * @return Match Statistics per-filter
     * 
     */
    private String matchStatisticsPerFilter;
    /**
     * @return Max Incomplete ICMP Limit
     * 
     */
    private Integer maxIncompleteIcmpLimit;
    /**
     * @return Max Incomplete TCP Limit
     * 
     */
    private Integer maxIncompleteTcpLimit;
    /**
     * @return Max Incomplete UDP Limit
     * 
     */
    private Integer maxIncompleteUdpLimit;
    /**
     * @return The policy mode
     * 
     */
    private String mode;
    /**
     * @return The name of the security policy
     * 
     */
    private String name;
    /**
     * @return Session Reclassify Allow
     * 
     */
    private Boolean sessionReclassifyAllow;
    /**
     * @return TCP SYN Flood Limit, value from 1 to 4294967295
     * 
     */
    private String tcpSynFloodLimit;
    /**
     * @return Unified Logging
     * 
     */
    private Boolean unifiedLogging;
    /**
     * @return The use case of the security policy
     * 
     */
    private String useCase;
    /**
     * @return The version of the object
     * 
     */
    private Integer version;

    private GetSecurityPolicyResult() {}
    /**
     * @return Audit trail
     * 
     */
    public String auditTrail() {
        return this.auditTrail;
    }
    /**
     * @return List of policy definitions
     * 
     */
    public List<GetSecurityPolicyDefinition> definitions() {
        return this.definitions;
    }
    /**
     * @return The description of the security policy
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Bypass firewall policy and allow all Internet traffic to/from VPN 0
     * 
     */
    public String directInternetApplications() {
        return this.directInternetApplications;
    }
    /**
     * @return Failure mode
     * 
     */
    public String failureMode() {
        return this.failureMode;
    }
    /**
     * @return High Speed Logging Server IP
     * 
     */
    public String highSpeedLoggingServerIp() {
        return this.highSpeedLoggingServerIp;
    }
    /**
     * @return High Speed Logging Port
     * 
     */
    public String highSpeedLoggingServerPort() {
        return this.highSpeedLoggingServerPort;
    }
    /**
     * @return High Speed Logging Source Interface
     * 
     */
    public String highSpeedLoggingServerSourceInterface() {
        return this.highSpeedLoggingServerSourceInterface;
    }
    /**
     * @return High Speed Logging VPN
     * 
     */
    public String highSpeedLoggingVpn() {
        return this.highSpeedLoggingVpn;
    }
    /**
     * @return The id of the object
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ICMP Unreachable Allow
     * 
     */
    public Boolean imcpUnreachableAllow() {
        return this.imcpUnreachableAllow;
    }
    public List<GetSecurityPolicyLogging> loggings() {
        return this.loggings;
    }
    /**
     * @return Match Statistics per-filter
     * 
     */
    public String matchStatisticsPerFilter() {
        return this.matchStatisticsPerFilter;
    }
    /**
     * @return Max Incomplete ICMP Limit
     * 
     */
    public Integer maxIncompleteIcmpLimit() {
        return this.maxIncompleteIcmpLimit;
    }
    /**
     * @return Max Incomplete TCP Limit
     * 
     */
    public Integer maxIncompleteTcpLimit() {
        return this.maxIncompleteTcpLimit;
    }
    /**
     * @return Max Incomplete UDP Limit
     * 
     */
    public Integer maxIncompleteUdpLimit() {
        return this.maxIncompleteUdpLimit;
    }
    /**
     * @return The policy mode
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return The name of the security policy
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Session Reclassify Allow
     * 
     */
    public Boolean sessionReclassifyAllow() {
        return this.sessionReclassifyAllow;
    }
    /**
     * @return TCP SYN Flood Limit, value from 1 to 4294967295
     * 
     */
    public String tcpSynFloodLimit() {
        return this.tcpSynFloodLimit;
    }
    /**
     * @return Unified Logging
     * 
     */
    public Boolean unifiedLogging() {
        return this.unifiedLogging;
    }
    /**
     * @return The use case of the security policy
     * 
     */
    public String useCase() {
        return this.useCase;
    }
    /**
     * @return The version of the object
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String auditTrail;
        private List<GetSecurityPolicyDefinition> definitions;
        private String description;
        private String directInternetApplications;
        private String failureMode;
        private String highSpeedLoggingServerIp;
        private String highSpeedLoggingServerPort;
        private String highSpeedLoggingServerSourceInterface;
        private String highSpeedLoggingVpn;
        private String id;
        private Boolean imcpUnreachableAllow;
        private List<GetSecurityPolicyLogging> loggings;
        private String matchStatisticsPerFilter;
        private Integer maxIncompleteIcmpLimit;
        private Integer maxIncompleteTcpLimit;
        private Integer maxIncompleteUdpLimit;
        private String mode;
        private String name;
        private Boolean sessionReclassifyAllow;
        private String tcpSynFloodLimit;
        private Boolean unifiedLogging;
        private String useCase;
        private Integer version;
        public Builder() {}
        public Builder(GetSecurityPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auditTrail = defaults.auditTrail;
    	      this.definitions = defaults.definitions;
    	      this.description = defaults.description;
    	      this.directInternetApplications = defaults.directInternetApplications;
    	      this.failureMode = defaults.failureMode;
    	      this.highSpeedLoggingServerIp = defaults.highSpeedLoggingServerIp;
    	      this.highSpeedLoggingServerPort = defaults.highSpeedLoggingServerPort;
    	      this.highSpeedLoggingServerSourceInterface = defaults.highSpeedLoggingServerSourceInterface;
    	      this.highSpeedLoggingVpn = defaults.highSpeedLoggingVpn;
    	      this.id = defaults.id;
    	      this.imcpUnreachableAllow = defaults.imcpUnreachableAllow;
    	      this.loggings = defaults.loggings;
    	      this.matchStatisticsPerFilter = defaults.matchStatisticsPerFilter;
    	      this.maxIncompleteIcmpLimit = defaults.maxIncompleteIcmpLimit;
    	      this.maxIncompleteTcpLimit = defaults.maxIncompleteTcpLimit;
    	      this.maxIncompleteUdpLimit = defaults.maxIncompleteUdpLimit;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.sessionReclassifyAllow = defaults.sessionReclassifyAllow;
    	      this.tcpSynFloodLimit = defaults.tcpSynFloodLimit;
    	      this.unifiedLogging = defaults.unifiedLogging;
    	      this.useCase = defaults.useCase;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder auditTrail(String auditTrail) {
            if (auditTrail == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "auditTrail");
            }
            this.auditTrail = auditTrail;
            return this;
        }
        @CustomType.Setter
        public Builder definitions(List<GetSecurityPolicyDefinition> definitions) {
            if (definitions == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "definitions");
            }
            this.definitions = definitions;
            return this;
        }
        public Builder definitions(GetSecurityPolicyDefinition... definitions) {
            return definitions(List.of(definitions));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder directInternetApplications(String directInternetApplications) {
            if (directInternetApplications == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "directInternetApplications");
            }
            this.directInternetApplications = directInternetApplications;
            return this;
        }
        @CustomType.Setter
        public Builder failureMode(String failureMode) {
            if (failureMode == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "failureMode");
            }
            this.failureMode = failureMode;
            return this;
        }
        @CustomType.Setter
        public Builder highSpeedLoggingServerIp(String highSpeedLoggingServerIp) {
            if (highSpeedLoggingServerIp == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "highSpeedLoggingServerIp");
            }
            this.highSpeedLoggingServerIp = highSpeedLoggingServerIp;
            return this;
        }
        @CustomType.Setter
        public Builder highSpeedLoggingServerPort(String highSpeedLoggingServerPort) {
            if (highSpeedLoggingServerPort == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "highSpeedLoggingServerPort");
            }
            this.highSpeedLoggingServerPort = highSpeedLoggingServerPort;
            return this;
        }
        @CustomType.Setter
        public Builder highSpeedLoggingServerSourceInterface(String highSpeedLoggingServerSourceInterface) {
            if (highSpeedLoggingServerSourceInterface == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "highSpeedLoggingServerSourceInterface");
            }
            this.highSpeedLoggingServerSourceInterface = highSpeedLoggingServerSourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder highSpeedLoggingVpn(String highSpeedLoggingVpn) {
            if (highSpeedLoggingVpn == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "highSpeedLoggingVpn");
            }
            this.highSpeedLoggingVpn = highSpeedLoggingVpn;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imcpUnreachableAllow(Boolean imcpUnreachableAllow) {
            if (imcpUnreachableAllow == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "imcpUnreachableAllow");
            }
            this.imcpUnreachableAllow = imcpUnreachableAllow;
            return this;
        }
        @CustomType.Setter
        public Builder loggings(List<GetSecurityPolicyLogging> loggings) {
            if (loggings == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "loggings");
            }
            this.loggings = loggings;
            return this;
        }
        public Builder loggings(GetSecurityPolicyLogging... loggings) {
            return loggings(List.of(loggings));
        }
        @CustomType.Setter
        public Builder matchStatisticsPerFilter(String matchStatisticsPerFilter) {
            if (matchStatisticsPerFilter == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "matchStatisticsPerFilter");
            }
            this.matchStatisticsPerFilter = matchStatisticsPerFilter;
            return this;
        }
        @CustomType.Setter
        public Builder maxIncompleteIcmpLimit(Integer maxIncompleteIcmpLimit) {
            if (maxIncompleteIcmpLimit == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "maxIncompleteIcmpLimit");
            }
            this.maxIncompleteIcmpLimit = maxIncompleteIcmpLimit;
            return this;
        }
        @CustomType.Setter
        public Builder maxIncompleteTcpLimit(Integer maxIncompleteTcpLimit) {
            if (maxIncompleteTcpLimit == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "maxIncompleteTcpLimit");
            }
            this.maxIncompleteTcpLimit = maxIncompleteTcpLimit;
            return this;
        }
        @CustomType.Setter
        public Builder maxIncompleteUdpLimit(Integer maxIncompleteUdpLimit) {
            if (maxIncompleteUdpLimit == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "maxIncompleteUdpLimit");
            }
            this.maxIncompleteUdpLimit = maxIncompleteUdpLimit;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder sessionReclassifyAllow(Boolean sessionReclassifyAllow) {
            if (sessionReclassifyAllow == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "sessionReclassifyAllow");
            }
            this.sessionReclassifyAllow = sessionReclassifyAllow;
            return this;
        }
        @CustomType.Setter
        public Builder tcpSynFloodLimit(String tcpSynFloodLimit) {
            if (tcpSynFloodLimit == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "tcpSynFloodLimit");
            }
            this.tcpSynFloodLimit = tcpSynFloodLimit;
            return this;
        }
        @CustomType.Setter
        public Builder unifiedLogging(Boolean unifiedLogging) {
            if (unifiedLogging == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "unifiedLogging");
            }
            this.unifiedLogging = unifiedLogging;
            return this;
        }
        @CustomType.Setter
        public Builder useCase(String useCase) {
            if (useCase == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "useCase");
            }
            this.useCase = useCase;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetSecurityPolicyResult build() {
            final var _resultValue = new GetSecurityPolicyResult();
            _resultValue.auditTrail = auditTrail;
            _resultValue.definitions = definitions;
            _resultValue.description = description;
            _resultValue.directInternetApplications = directInternetApplications;
            _resultValue.failureMode = failureMode;
            _resultValue.highSpeedLoggingServerIp = highSpeedLoggingServerIp;
            _resultValue.highSpeedLoggingServerPort = highSpeedLoggingServerPort;
            _resultValue.highSpeedLoggingServerSourceInterface = highSpeedLoggingServerSourceInterface;
            _resultValue.highSpeedLoggingVpn = highSpeedLoggingVpn;
            _resultValue.id = id;
            _resultValue.imcpUnreachableAllow = imcpUnreachableAllow;
            _resultValue.loggings = loggings;
            _resultValue.matchStatisticsPerFilter = matchStatisticsPerFilter;
            _resultValue.maxIncompleteIcmpLimit = maxIncompleteIcmpLimit;
            _resultValue.maxIncompleteTcpLimit = maxIncompleteTcpLimit;
            _resultValue.maxIncompleteUdpLimit = maxIncompleteUdpLimit;
            _resultValue.mode = mode;
            _resultValue.name = name;
            _resultValue.sessionReclassifyAllow = sessionReclassifyAllow;
            _resultValue.tcpSynFloodLimit = tcpSynFloodLimit;
            _resultValue.unifiedLogging = unifiedLogging;
            _resultValue.useCase = useCase;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
