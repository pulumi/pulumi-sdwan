// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCiscoNtpFeatureTemplateServer {
    /**
     * @return Set authentication key for the server
     * 
     */
    private Integer authenticationKeyId;
    /**
     * @return Variable name
     * 
     */
    private String authenticationKeyIdVariable;
    /**
     * @return Set hostname or IP address of server
     * 
     */
    private String hostnameIp;
    /**
     * @return Variable name
     * 
     */
    private String hostnameIpVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Prefer this NTP server
     * 
     */
    private Boolean prefer;
    /**
     * @return Variable name
     * 
     */
    private String preferVariable;
    /**
     * @return Set interface to use to reach NTP server
     * 
     */
    private String sourceInterface;
    /**
     * @return Variable name
     * 
     */
    private String sourceInterfaceVariable;
    /**
     * @return Set NTP version
     * 
     */
    private Integer version;
    /**
     * @return Variable name
     * 
     */
    private String versionVariable;
    /**
     * @return Set VPN in which NTP server is located
     * 
     */
    private Integer vpnId;
    /**
     * @return Variable name
     * 
     */
    private String vpnIdVariable;

    private GetCiscoNtpFeatureTemplateServer() {}
    /**
     * @return Set authentication key for the server
     * 
     */
    public Integer authenticationKeyId() {
        return this.authenticationKeyId;
    }
    /**
     * @return Variable name
     * 
     */
    public String authenticationKeyIdVariable() {
        return this.authenticationKeyIdVariable;
    }
    /**
     * @return Set hostname or IP address of server
     * 
     */
    public String hostnameIp() {
        return this.hostnameIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String hostnameIpVariable() {
        return this.hostnameIpVariable;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Prefer this NTP server
     * 
     */
    public Boolean prefer() {
        return this.prefer;
    }
    /**
     * @return Variable name
     * 
     */
    public String preferVariable() {
        return this.preferVariable;
    }
    /**
     * @return Set interface to use to reach NTP server
     * 
     */
    public String sourceInterface() {
        return this.sourceInterface;
    }
    /**
     * @return Variable name
     * 
     */
    public String sourceInterfaceVariable() {
        return this.sourceInterfaceVariable;
    }
    /**
     * @return Set NTP version
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return Variable name
     * 
     */
    public String versionVariable() {
        return this.versionVariable;
    }
    /**
     * @return Set VPN in which NTP server is located
     * 
     */
    public Integer vpnId() {
        return this.vpnId;
    }
    /**
     * @return Variable name
     * 
     */
    public String vpnIdVariable() {
        return this.vpnIdVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoNtpFeatureTemplateServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer authenticationKeyId;
        private String authenticationKeyIdVariable;
        private String hostnameIp;
        private String hostnameIpVariable;
        private Boolean optional;
        private Boolean prefer;
        private String preferVariable;
        private String sourceInterface;
        private String sourceInterfaceVariable;
        private Integer version;
        private String versionVariable;
        private Integer vpnId;
        private String vpnIdVariable;
        public Builder() {}
        public Builder(GetCiscoNtpFeatureTemplateServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationKeyId = defaults.authenticationKeyId;
    	      this.authenticationKeyIdVariable = defaults.authenticationKeyIdVariable;
    	      this.hostnameIp = defaults.hostnameIp;
    	      this.hostnameIpVariable = defaults.hostnameIpVariable;
    	      this.optional = defaults.optional;
    	      this.prefer = defaults.prefer;
    	      this.preferVariable = defaults.preferVariable;
    	      this.sourceInterface = defaults.sourceInterface;
    	      this.sourceInterfaceVariable = defaults.sourceInterfaceVariable;
    	      this.version = defaults.version;
    	      this.versionVariable = defaults.versionVariable;
    	      this.vpnId = defaults.vpnId;
    	      this.vpnIdVariable = defaults.vpnIdVariable;
        }

        @CustomType.Setter
        public Builder authenticationKeyId(Integer authenticationKeyId) {
            if (authenticationKeyId == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "authenticationKeyId");
            }
            this.authenticationKeyId = authenticationKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationKeyIdVariable(String authenticationKeyIdVariable) {
            if (authenticationKeyIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "authenticationKeyIdVariable");
            }
            this.authenticationKeyIdVariable = authenticationKeyIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameIp(String hostnameIp) {
            if (hostnameIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "hostnameIp");
            }
            this.hostnameIp = hostnameIp;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameIpVariable(String hostnameIpVariable) {
            if (hostnameIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "hostnameIpVariable");
            }
            this.hostnameIpVariable = hostnameIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder prefer(Boolean prefer) {
            if (prefer == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "prefer");
            }
            this.prefer = prefer;
            return this;
        }
        @CustomType.Setter
        public Builder preferVariable(String preferVariable) {
            if (preferVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "preferVariable");
            }
            this.preferVariable = preferVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterface(String sourceInterface) {
            if (sourceInterface == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "sourceInterface");
            }
            this.sourceInterface = sourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceVariable(String sourceInterfaceVariable) {
            if (sourceInterfaceVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "sourceInterfaceVariable");
            }
            this.sourceInterfaceVariable = sourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder versionVariable(String versionVariable) {
            if (versionVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "versionVariable");
            }
            this.versionVariable = versionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder vpnId(Integer vpnId) {
            if (vpnId == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "vpnId");
            }
            this.vpnId = vpnId;
            return this;
        }
        @CustomType.Setter
        public Builder vpnIdVariable(String vpnIdVariable) {
            if (vpnIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoNtpFeatureTemplateServer", "vpnIdVariable");
            }
            this.vpnIdVariable = vpnIdVariable;
            return this;
        }
        public GetCiscoNtpFeatureTemplateServer build() {
            final var _resultValue = new GetCiscoNtpFeatureTemplateServer();
            _resultValue.authenticationKeyId = authenticationKeyId;
            _resultValue.authenticationKeyIdVariable = authenticationKeyIdVariable;
            _resultValue.hostnameIp = hostnameIp;
            _resultValue.hostnameIpVariable = hostnameIpVariable;
            _resultValue.optional = optional;
            _resultValue.prefer = prefer;
            _resultValue.preferVariable = preferVariable;
            _resultValue.sourceInterface = sourceInterface;
            _resultValue.sourceInterfaceVariable = sourceInterfaceVariable;
            _resultValue.version = version;
            _resultValue.versionVariable = versionVariable;
            _resultValue.vpnId = vpnId;
            _resultValue.vpnIdVariable = vpnIdVariable;
            return _resultValue;
        }
    }
}
