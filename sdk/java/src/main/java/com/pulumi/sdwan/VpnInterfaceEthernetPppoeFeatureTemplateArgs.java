// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.VpnInterfaceEthernetPppoeFeatureTemplateAccessListArgs;
import com.pulumi.sdwan.inputs.VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs;
import com.pulumi.sdwan.inputs.VpnInterfaceEthernetPppoeFeatureTemplatePolicerArgs;
import com.pulumi.sdwan.inputs.VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnInterfaceEthernetPppoeFeatureTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnInterfaceEthernetPppoeFeatureTemplateArgs Empty = new VpnInterfaceEthernetPppoeFeatureTemplateArgs();

    /**
     * Apply ACL
     * 
     */
    @Import(name="accessLists")
    private @Nullable Output<List<VpnInterfaceEthernetPppoeFeatureTemplateAccessListArgs>> accessLists;

    /**
     * @return Apply ACL
     * 
     */
    public Optional<Output<List<VpnInterfaceEthernetPppoeFeatureTemplateAccessListArgs>>> accessLists() {
        return Optional.ofNullable(this.accessLists);
    }

    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     * 
     */
    @Import(name="bandwidthDownstream")
    private @Nullable Output<Integer> bandwidthDownstream;

    /**
     * @return Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     * 
     */
    public Optional<Output<Integer>> bandwidthDownstream() {
        return Optional.ofNullable(this.bandwidthDownstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="bandwidthDownstreamVariable")
    private @Nullable Output<String> bandwidthDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> bandwidthDownstreamVariable() {
        return Optional.ofNullable(this.bandwidthDownstreamVariable);
    }

    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     * 
     */
    @Import(name="bandwidthUpstream")
    private @Nullable Output<Integer> bandwidthUpstream;

    /**
     * @return Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     * 
     */
    public Optional<Output<Integer>> bandwidthUpstream() {
        return Optional.ofNullable(this.bandwidthUpstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="bandwidthUpstreamVariable")
    private @Nullable Output<String> bandwidthUpstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> bandwidthUpstreamVariable() {
        return Optional.ofNullable(this.bandwidthUpstreamVariable);
    }

    /**
     * CHAP Hostname
     * 
     */
    @Import(name="chapHostname")
    private @Nullable Output<String> chapHostname;

    /**
     * @return CHAP Hostname
     * 
     */
    public Optional<Output<String>> chapHostname() {
        return Optional.ofNullable(this.chapHostname);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="chapHostnameVariable")
    private @Nullable Output<String> chapHostnameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> chapHostnameVariable() {
        return Optional.ofNullable(this.chapHostnameVariable);
    }

    /**
     * Specify ppp chap authentication Password
     * 
     */
    @Import(name="chapPppAuthPassword")
    private @Nullable Output<String> chapPppAuthPassword;

    /**
     * @return Specify ppp chap authentication Password
     * 
     */
    public Optional<Output<String>> chapPppAuthPassword() {
        return Optional.ofNullable(this.chapPppAuthPassword);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="chapPppAuthPasswordVariable")
    private @Nullable Output<String> chapPppAuthPasswordVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> chapPppAuthPasswordVariable() {
        return Optional.ofNullable(this.chapPppAuthPasswordVariable);
    }

    /**
     * Enable core region
     *   - Choices: `core`, `core-shared`
     *   - Default value: `core`
     * 
     */
    @Import(name="coreRegion")
    private @Nullable Output<String> coreRegion;

    /**
     * @return Enable core region
     *   - Choices: `core`, `core-shared`
     *   - Default value: `core`
     * 
     */
    public Optional<Output<String>> coreRegion() {
        return Optional.ofNullable(this.coreRegion);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="coreRegionVariable")
    private @Nullable Output<String> coreRegionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> coreRegionVariable() {
        return Optional.ofNullable(this.coreRegionVariable);
    }

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes", required=true)
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }

    /**
     * Dialer IP Negotiated
     *   - Default value: `false`
     * 
     */
    @Import(name="dialerAddressNegotiated")
    private @Nullable Output<Boolean> dialerAddressNegotiated;

    /**
     * @return Dialer IP Negotiated
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> dialerAddressNegotiated() {
        return Optional.ofNullable(this.dialerAddressNegotiated);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="dialerAddressNegotiatedVariable")
    private @Nullable Output<String> dialerAddressNegotiatedVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> dialerAddressNegotiatedVariable() {
        return Optional.ofNullable(this.dialerAddressNegotiatedVariable);
    }

    /**
     * Dialer pool number
     *   - Range: `100`-`255`
     * 
     */
    @Import(name="dialerPoolNumber")
    private @Nullable Output<Integer> dialerPoolNumber;

    /**
     * @return Dialer pool number
     *   - Range: `100`-`255`
     * 
     */
    public Optional<Output<Integer>> dialerPoolNumber() {
        return Optional.ofNullable(this.dialerPoolNumber);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="dialerPoolNumberVariable")
    private @Nullable Output<String> dialerPoolNumberVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> dialerPoolNumberVariable() {
        return Optional.ofNullable(this.dialerPoolNumberVariable);
    }

    /**
     * Dialer TCP MSS on SYN packets, in bytes
     *   - Range: `552`-`1960`
     * 
     */
    @Import(name="dialerTcpMss")
    private @Nullable Output<Integer> dialerTcpMss;

    /**
     * @return Dialer TCP MSS on SYN packets, in bytes
     *   - Range: `552`-`1960`
     * 
     */
    public Optional<Output<Integer>> dialerTcpMss() {
        return Optional.ofNullable(this.dialerTcpMss);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="dialerTcpMssVariable")
    private @Nullable Output<String> dialerTcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> dialerTcpMssVariable() {
        return Optional.ofNullable(this.dialerTcpMssVariable);
    }

    /**
     * Enable core region
     *   - Default value: `false`
     * 
     */
    @Import(name="enableCoreRegion")
    private @Nullable Output<Boolean> enableCoreRegion;

    /**
     * @return Enable core region
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> enableCoreRegion() {
        return Optional.ofNullable(this.enableCoreRegion);
    }

    /**
     * Encapsulation VLAN id
     *   - Range: `1`-`4094`
     * 
     */
    @Import(name="encap")
    private @Nullable Output<Integer> encap;

    /**
     * @return Encapsulation VLAN id
     *   - Range: `1`-`4094`
     * 
     */
    public Optional<Output<Integer>> encap() {
        return Optional.ofNullable(this.encap);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="encapVariable")
    private @Nullable Output<String> encapVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> encapVariable() {
        return Optional.ofNullable(this.encapVariable);
    }

    /**
     * Ethernet Interface/Sub Interface Name including sub interface number
     * 
     */
    @Import(name="ethernetInterfaceName")
    private @Nullable Output<String> ethernetInterfaceName;

    /**
     * @return Ethernet Interface/Sub Interface Name including sub interface number
     * 
     */
    public Optional<Output<String>> ethernetInterfaceName() {
        return Optional.ofNullable(this.ethernetInterfaceName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ethernetInterfaceNameVariable")
    private @Nullable Output<String> ethernetInterfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ethernetInterfaceNameVariable() {
        return Optional.ofNullable(this.ethernetInterfaceNameVariable);
    }

    /**
     * Interface description
     * 
     */
    @Import(name="interfaceDescription")
    private @Nullable Output<String> interfaceDescription;

    /**
     * @return Interface description
     * 
     */
    public Optional<Output<String>> interfaceDescription() {
        return Optional.ofNullable(this.interfaceDescription);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceDescriptionVariable")
    private @Nullable Output<String> interfaceDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceDescriptionVariable() {
        return Optional.ofNullable(this.interfaceDescriptionVariable);
    }

    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     * 
     */
    @Import(name="ipDirectedBroadcast")
    private @Nullable Output<Boolean> ipDirectedBroadcast;

    /**
     * @return IP Directed-Broadcast
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> ipDirectedBroadcast() {
        return Optional.ofNullable(this.ipDirectedBroadcast);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipDirectedBroadcastVariable")
    private @Nullable Output<String> ipDirectedBroadcastVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipDirectedBroadcastVariable() {
        return Optional.ofNullable(this.ipDirectedBroadcastVariable);
    }

    /**
     * IP MTU &lt;576..2000&gt;, in bytes
     *   - Range: `576`-`2000`
     *   - Default value: `1500`
     * 
     */
    @Import(name="ipMtuForDialerInterface")
    private @Nullable Output<Integer> ipMtuForDialerInterface;

    /**
     * @return IP MTU &lt;576..2000&gt;, in bytes
     *   - Range: `576`-`2000`
     *   - Default value: `1500`
     * 
     */
    public Optional<Output<Integer>> ipMtuForDialerInterface() {
        return Optional.ofNullable(this.ipMtuForDialerInterface);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipMtuForDialerInterfaceVariable")
    private @Nullable Output<String> ipMtuForDialerInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipMtuForDialerInterfaceVariable() {
        return Optional.ofNullable(this.ipMtuForDialerInterfaceVariable);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network Address Translation on this interface
     *   - Default value: `false`
     * 
     */
    @Import(name="nat")
    private @Nullable Output<Boolean> nat;

    /**
     * @return Network Address Translation on this interface
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> nat() {
        return Optional.ofNullable(this.nat);
    }

    /**
     * Block inbound ICMP error messages
     *   - Default value: `true`
     * 
     */
    @Import(name="natBlockIcmpError")
    private @Nullable Output<Boolean> natBlockIcmpError;

    /**
     * @return Block inbound ICMP error messages
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> natBlockIcmpError() {
        return Optional.ofNullable(this.natBlockIcmpError);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="natBlockIcmpErrorVariable")
    private @Nullable Output<String> natBlockIcmpErrorVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> natBlockIcmpErrorVariable() {
        return Optional.ofNullable(this.natBlockIcmpErrorVariable);
    }

    /**
     * Set port-forwarding rules for NAT on this interface
     * 
     */
    @Import(name="natPortForwards")
    private @Nullable Output<List<VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs>> natPortForwards;

    /**
     * @return Set port-forwarding rules for NAT on this interface
     * 
     */
    public Optional<Output<List<VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs>>> natPortForwards() {
        return Optional.ofNullable(this.natPortForwards);
    }

    /**
     * Set NAT refresh mode
     *   - Choices: `outbound`, `bi-directional`
     *   - Default value: `outbound`
     * 
     */
    @Import(name="natRefreshMode")
    private @Nullable Output<String> natRefreshMode;

    /**
     * @return Set NAT refresh mode
     *   - Choices: `outbound`, `bi-directional`
     *   - Default value: `outbound`
     * 
     */
    public Optional<Output<String>> natRefreshMode() {
        return Optional.ofNullable(this.natRefreshMode);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="natRefreshModeVariable")
    private @Nullable Output<String> natRefreshModeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> natRefreshModeVariable() {
        return Optional.ofNullable(this.natRefreshModeVariable);
    }

    /**
     * Respond to ping requests to NAT interface ip address from the public side
     *   - Default value: `false`
     * 
     */
    @Import(name="natResponseToPing")
    private @Nullable Output<Boolean> natResponseToPing;

    /**
     * @return Respond to ping requests to NAT interface ip address from the public side
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> natResponseToPing() {
        return Optional.ofNullable(this.natResponseToPing);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="natResponseToPingVariable")
    private @Nullable Output<String> natResponseToPingVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> natResponseToPingVariable() {
        return Optional.ofNullable(this.natResponseToPingVariable);
    }

    /**
     * Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     * 
     */
    @Import(name="natTcpTimeout")
    private @Nullable Output<Integer> natTcpTimeout;

    /**
     * @return Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     * 
     */
    public Optional<Output<Integer>> natTcpTimeout() {
        return Optional.ofNullable(this.natTcpTimeout);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="natTcpTimeoutVariable")
    private @Nullable Output<String> natTcpTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> natTcpTimeoutVariable() {
        return Optional.ofNullable(this.natTcpTimeoutVariable);
    }

    /**
     * Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     * 
     */
    @Import(name="natUdpTimeout")
    private @Nullable Output<Integer> natUdpTimeout;

    /**
     * @return Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     * 
     */
    public Optional<Output<Integer>> natUdpTimeout() {
        return Optional.ofNullable(this.natUdpTimeout);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="natUdpTimeoutVariable")
    private @Nullable Output<String> natUdpTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> natUdpTimeoutVariable() {
        return Optional.ofNullable(this.natUdpTimeoutVariable);
    }

    /**
     * PAP outbound Password
     * 
     */
    @Import(name="papPassword")
    private @Nullable Output<Boolean> papPassword;

    /**
     * @return PAP outbound Password
     * 
     */
    public Optional<Output<Boolean>> papPassword() {
        return Optional.ofNullable(this.papPassword);
    }

    /**
     * Specify ppp pap authentication Password
     * 
     */
    @Import(name="papPppAuthPassword")
    private @Nullable Output<String> papPppAuthPassword;

    /**
     * @return Specify ppp pap authentication Password
     * 
     */
    public Optional<Output<String>> papPppAuthPassword() {
        return Optional.ofNullable(this.papPppAuthPassword);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="papPppAuthPasswordVariable")
    private @Nullable Output<String> papPppAuthPasswordVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> papPppAuthPasswordVariable() {
        return Optional.ofNullable(this.papPppAuthPasswordVariable);
    }

    /**
     * PAP outbound Sent Username
     * 
     */
    @Import(name="papUsername")
    private @Nullable Output<String> papUsername;

    /**
     * @return PAP outbound Sent Username
     * 
     */
    public Optional<Output<String>> papUsername() {
        return Optional.ofNullable(this.papUsername);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="papUsernameVariable")
    private @Nullable Output<String> papUsernameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> papUsernameVariable() {
        return Optional.ofNullable(this.papUsernameVariable);
    }

    /**
     * Per-tunnel Qos
     *   - Default value: `false`
     * 
     */
    @Import(name="perTunnelQos")
    private @Nullable Output<Boolean> perTunnelQos;

    /**
     * @return Per-tunnel Qos
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> perTunnelQos() {
        return Optional.ofNullable(this.perTunnelQos);
    }

    /**
     * Per-tunnel QoS Aggregator
     *   - Default value: `false`
     * 
     */
    @Import(name="perTunnelQosAggregator")
    private @Nullable Output<Boolean> perTunnelQosAggregator;

    /**
     * @return Per-tunnel QoS Aggregator
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> perTunnelQosAggregator() {
        return Optional.ofNullable(this.perTunnelQosAggregator);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="perTunnelQosAggregatorVariable")
    private @Nullable Output<String> perTunnelQosAggregatorVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> perTunnelQosAggregatorVariable() {
        return Optional.ofNullable(this.perTunnelQosAggregatorVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="perTunnelQosVariable")
    private @Nullable Output<String> perTunnelQosVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> perTunnelQosVariable() {
        return Optional.ofNullable(this.perTunnelQosVariable);
    }

    /**
     * Enable policer
     * 
     */
    @Import(name="policers")
    private @Nullable Output<List<VpnInterfaceEthernetPppoeFeatureTemplatePolicerArgs>> policers;

    /**
     * @return Enable policer
     * 
     */
    public Optional<Output<List<VpnInterfaceEthernetPppoeFeatureTemplatePolicerArgs>>> policers() {
        return Optional.ofNullable(this.policers);
    }

    /**
     * PPP Link Authentication Protocol
     *   - Choices: `chap`, `pap`
     * 
     */
    @Import(name="pppAuthenticationProtocol")
    private @Nullable Output<String> pppAuthenticationProtocol;

    /**
     * @return PPP Link Authentication Protocol
     *   - Choices: `chap`, `pap`
     * 
     */
    public Optional<Output<String>> pppAuthenticationProtocol() {
        return Optional.ofNullable(this.pppAuthenticationProtocol);
    }

    /**
     * PPP Authentication Protocol PAP
     *   - Default value: `false`
     * 
     */
    @Import(name="pppAuthenticationProtocolPap")
    private @Nullable Output<Boolean> pppAuthenticationProtocolPap;

    /**
     * @return PPP Authentication Protocol PAP
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> pppAuthenticationProtocolPap() {
        return Optional.ofNullable(this.pppAuthenticationProtocolPap);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="pppAuthenticationProtocolVariable")
    private @Nullable Output<String> pppAuthenticationProtocolVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> pppAuthenticationProtocolVariable() {
        return Optional.ofNullable(this.pppAuthenticationProtocolVariable);
    }

    /**
     * Authenticate remote on incoming call only
     *   - Choices: `callin`, `false`
     *   - Default value: `callin`
     * 
     */
    @Import(name="pppAuthenticationType")
    private @Nullable Output<String> pppAuthenticationType;

    /**
     * @return Authenticate remote on incoming call only
     *   - Choices: `callin`, `false`
     *   - Default value: `callin`
     * 
     */
    public Optional<Output<String>> pppAuthenticationType() {
        return Optional.ofNullable(this.pppAuthenticationType);
    }

    /**
     * Maximum MRU to be negotiated during PPP LCP negotiation
     *   - Range: `64`-`1792`
     * 
     */
    @Import(name="pppMaximumPayload")
    private @Nullable Output<Integer> pppMaximumPayload;

    /**
     * @return Maximum MRU to be negotiated during PPP LCP negotiation
     *   - Range: `64`-`1792`
     * 
     */
    public Optional<Output<Integer>> pppMaximumPayload() {
        return Optional.ofNullable(this.pppMaximumPayload);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="pppMaximumPayloadVariable")
    private @Nullable Output<String> pppMaximumPayloadVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> pppMaximumPayloadVariable() {
        return Optional.ofNullable(this.pppMaximumPayloadVariable);
    }

    /**
     * Adaptive QoS default downstream bandwidth
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosAdaptiveBandwidthDownstream")
    private @Nullable Output<Integer> qosAdaptiveBandwidthDownstream;

    /**
     * @return Adaptive QoS default downstream bandwidth
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosAdaptiveBandwidthDownstream() {
        return Optional.ofNullable(this.qosAdaptiveBandwidthDownstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptiveBandwidthDownstreamVariable")
    private @Nullable Output<String> qosAdaptiveBandwidthDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptiveBandwidthDownstreamVariable() {
        return Optional.ofNullable(this.qosAdaptiveBandwidthDownstreamVariable);
    }

    /**
     * Adaptive QoS default upstream bandwidth
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosAdaptiveBandwidthUpstream")
    private @Nullable Output<Integer> qosAdaptiveBandwidthUpstream;

    /**
     * @return Adaptive QoS default upstream bandwidth
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosAdaptiveBandwidthUpstream() {
        return Optional.ofNullable(this.qosAdaptiveBandwidthUpstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptiveBandwidthUpstreamVariable")
    private @Nullable Output<String> qosAdaptiveBandwidthUpstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptiveBandwidthUpstreamVariable() {
        return Optional.ofNullable(this.qosAdaptiveBandwidthUpstreamVariable);
    }

    /**
     * Downstream max bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosAdaptiveMaxDownstream")
    private @Nullable Output<Integer> qosAdaptiveMaxDownstream;

    /**
     * @return Downstream max bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosAdaptiveMaxDownstream() {
        return Optional.ofNullable(this.qosAdaptiveMaxDownstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptiveMaxDownstreamVariable")
    private @Nullable Output<String> qosAdaptiveMaxDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptiveMaxDownstreamVariable() {
        return Optional.ofNullable(this.qosAdaptiveMaxDownstreamVariable);
    }

    /**
     * Upstream max bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosAdaptiveMaxUpstream")
    private @Nullable Output<Integer> qosAdaptiveMaxUpstream;

    /**
     * @return Upstream max bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosAdaptiveMaxUpstream() {
        return Optional.ofNullable(this.qosAdaptiveMaxUpstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptiveMaxUpstreamVariable")
    private @Nullable Output<String> qosAdaptiveMaxUpstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptiveMaxUpstreamVariable() {
        return Optional.ofNullable(this.qosAdaptiveMaxUpstreamVariable);
    }

    /**
     * Downstream min bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosAdaptiveMinDownstream")
    private @Nullable Output<Integer> qosAdaptiveMinDownstream;

    /**
     * @return Downstream min bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosAdaptiveMinDownstream() {
        return Optional.ofNullable(this.qosAdaptiveMinDownstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptiveMinDownstreamVariable")
    private @Nullable Output<String> qosAdaptiveMinDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptiveMinDownstreamVariable() {
        return Optional.ofNullable(this.qosAdaptiveMinDownstreamVariable);
    }

    /**
     * Upstream min bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosAdaptiveMinUpstream")
    private @Nullable Output<Integer> qosAdaptiveMinUpstream;

    /**
     * @return Upstream min bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosAdaptiveMinUpstream() {
        return Optional.ofNullable(this.qosAdaptiveMinUpstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptiveMinUpstreamVariable")
    private @Nullable Output<String> qosAdaptiveMinUpstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptiveMinUpstreamVariable() {
        return Optional.ofNullable(this.qosAdaptiveMinUpstreamVariable);
    }

    /**
     * Periodic timer for adaptive QoS in minutes
     *   - Range: `1`-`720`
     *   - Default value: `15`
     * 
     */
    @Import(name="qosAdaptivePeriod")
    private @Nullable Output<Integer> qosAdaptivePeriod;

    /**
     * @return Periodic timer for adaptive QoS in minutes
     *   - Range: `1`-`720`
     *   - Default value: `15`
     * 
     */
    public Optional<Output<Integer>> qosAdaptivePeriod() {
        return Optional.ofNullable(this.qosAdaptivePeriod);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptivePeriodVariable")
    private @Nullable Output<String> qosAdaptivePeriodVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptivePeriodVariable() {
        return Optional.ofNullable(this.qosAdaptivePeriodVariable);
    }

    /**
     * Name of QoS map
     * 
     */
    @Import(name="qosMap")
    private @Nullable Output<String> qosMap;

    /**
     * @return Name of QoS map
     * 
     */
    public Optional<Output<String>> qosMap() {
        return Optional.ofNullable(this.qosMap);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosMapVariable")
    private @Nullable Output<String> qosMapVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosMapVariable() {
        return Optional.ofNullable(this.qosMapVariable);
    }

    /**
     * Name of VPN QoS map
     * 
     */
    @Import(name="qosMapVpn")
    private @Nullable Output<String> qosMapVpn;

    /**
     * @return Name of VPN QoS map
     * 
     */
    public Optional<Output<String>> qosMapVpn() {
        return Optional.ofNullable(this.qosMapVpn);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosMapVpnVariable")
    private @Nullable Output<String> qosMapVpnVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosMapVpnVariable() {
        return Optional.ofNullable(this.qosMapVpnVariable);
    }

    /**
     * Enable secondary region
     *   - Choices: `off`, `secondary-only`, `secondary-shared`
     *   - Default value: `off`
     * 
     */
    @Import(name="secondaryRegion")
    private @Nullable Output<String> secondaryRegion;

    /**
     * @return Enable secondary region
     *   - Choices: `off`, `secondary-only`, `secondary-shared`
     *   - Default value: `off`
     * 
     */
    public Optional<Output<String>> secondaryRegion() {
        return Optional.ofNullable(this.secondaryRegion);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="secondaryRegionVariable")
    private @Nullable Output<String> secondaryRegionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> secondaryRegionVariable() {
        return Optional.ofNullable(this.secondaryRegionVariable);
    }

    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="shapingRate")
    private @Nullable Output<Integer> shapingRate;

    /**
     * @return 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> shapingRate() {
        return Optional.ofNullable(this.shapingRate);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="shapingRateVariable")
    private @Nullable Output<String> shapingRateVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> shapingRateVariable() {
        return Optional.ofNullable(this.shapingRateVariable);
    }

    /**
     * Administrative state
     *   - Default value: `true`
     * 
     */
    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    /**
     * @return Administrative state
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="shutdownVariable")
    private @Nullable Output<String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> shutdownVariable() {
        return Optional.ofNullable(this.shutdownVariable);
    }

    /**
     * Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    @Import(name="tlocExtension")
    private @Nullable Output<String> tlocExtension;

    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    public Optional<Output<String>> tlocExtension() {
        return Optional.ofNullable(this.tlocExtension);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tlocExtensionVariable")
    private @Nullable Output<String> tlocExtensionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tlocExtensionVariable() {
        return Optional.ofNullable(this.tlocExtensionVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="trackerVariable")
    private @Nullable Output<String> trackerVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> trackerVariable() {
        return Optional.ofNullable(this.trackerVariable);
    }

    /**
     * Enable tracker for this interface
     * 
     */
    @Import(name="trackers")
    private @Nullable Output<List<String>> trackers;

    /**
     * @return Enable tracker for this interface
     * 
     */
    public Optional<Output<List<String>>> trackers() {
        return Optional.ofNullable(this.trackers);
    }

    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowAll")
    private @Nullable Output<Boolean> tunnelInterfaceAllowAll;

    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowAll() {
        return Optional.ofNullable(this.tunnelInterfaceAllowAll);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowAllVariable")
    private @Nullable Output<String> tunnelInterfaceAllowAllVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowAllVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowAllVariable);
    }

    /**
     * Allow/deny BGP
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowBgp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowBgp;

    /**
     * @return Allow/deny BGP
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowBgp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowBgp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowBgpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowBgpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowBgpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowBgpVariable);
    }

    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowDhcp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowDhcp;

    /**
     * @return Allow/Deny DHCP
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowDhcp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDhcp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowDhcpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowDhcpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowDhcpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDhcpVariable);
    }

    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowDns")
    private @Nullable Output<Boolean> tunnelInterfaceAllowDns;

    /**
     * @return Allow/Deny DNS
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowDns() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDns);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowDnsVariable")
    private @Nullable Output<String> tunnelInterfaceAllowDnsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowDnsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDnsVariable);
    }

    /**
     * Allow/Deny Https
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowHttps")
    private @Nullable Output<Boolean> tunnelInterfaceAllowHttps;

    /**
     * @return Allow/Deny Https
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowHttps() {
        return Optional.ofNullable(this.tunnelInterfaceAllowHttps);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowHttpsVariable")
    private @Nullable Output<String> tunnelInterfaceAllowHttpsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowHttpsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowHttpsVariable);
    }

    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowIcmp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowIcmp;

    /**
     * @return Allow/Deny ICMP
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowIcmp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowIcmp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowIcmpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowIcmpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowIcmpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowIcmpVariable);
    }

    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowNetconf")
    private @Nullable Output<Boolean> tunnelInterfaceAllowNetconf;

    /**
     * @return Allow/Deny NETCONF
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowNetconf() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNetconf);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowNetconfVariable")
    private @Nullable Output<String> tunnelInterfaceAllowNetconfVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowNetconfVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNetconfVariable);
    }

    /**
     * Allow/Deny NTP
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowNtp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowNtp;

    /**
     * @return Allow/Deny NTP
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowNtp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNtp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowNtpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowNtpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowNtpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNtpVariable);
    }

    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowOspf")
    private @Nullable Output<Boolean> tunnelInterfaceAllowOspf;

    /**
     * @return Allow/Deny OSPF
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowOspf() {
        return Optional.ofNullable(this.tunnelInterfaceAllowOspf);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowOspfVariable")
    private @Nullable Output<String> tunnelInterfaceAllowOspfVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowOspfVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowOspfVariable);
    }

    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowSnmp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowSnmp;

    /**
     * @return Allow/Deny SNMP
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowSnmp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSnmp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowSnmpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowSnmpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowSnmpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSnmpVariable);
    }

    /**
     * Allow/Deny SSH
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowSsh")
    private @Nullable Output<Boolean> tunnelInterfaceAllowSsh;

    /**
     * @return Allow/Deny SSH
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowSsh() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSsh);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowSshVariable")
    private @Nullable Output<String> tunnelInterfaceAllowSshVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowSshVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSshVariable);
    }

    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowStun")
    private @Nullable Output<Boolean> tunnelInterfaceAllowStun;

    /**
     * @return Allow/Deny STUN
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowStun() {
        return Optional.ofNullable(this.tunnelInterfaceAllowStun);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowStunVariable")
    private @Nullable Output<String> tunnelInterfaceAllowStunVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowStunVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowStunVariable);
    }

    /**
     * Bind loopback tunnel interface to a physical interface
     * 
     */
    @Import(name="tunnelInterfaceBindLoopbackTunnel")
    private @Nullable Output<String> tunnelInterfaceBindLoopbackTunnel;

    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    public Optional<Output<String>> tunnelInterfaceBindLoopbackTunnel() {
        return Optional.ofNullable(this.tunnelInterfaceBindLoopbackTunnel);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceBindLoopbackTunnelVariable")
    private @Nullable Output<String> tunnelInterfaceBindLoopbackTunnelVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceBindLoopbackTunnelVariable() {
        return Optional.ofNullable(this.tunnelInterfaceBindLoopbackTunnelVariable);
    }

    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceBorder")
    private @Nullable Output<Boolean> tunnelInterfaceBorder;

    /**
     * @return Set TLOC as border TLOC
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceBorder() {
        return Optional.ofNullable(this.tunnelInterfaceBorder);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceBorderVariable")
    private @Nullable Output<String> tunnelInterfaceBorderVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceBorderVariable() {
        return Optional.ofNullable(this.tunnelInterfaceBorderVariable);
    }

    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     * 
     */
    @Import(name="tunnelInterfaceCarrier")
    private @Nullable Output<String> tunnelInterfaceCarrier;

    /**
     * @return Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     * 
     */
    public Optional<Output<String>> tunnelInterfaceCarrier() {
        return Optional.ofNullable(this.tunnelInterfaceCarrier);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceCarrierVariable")
    private @Nullable Output<String> tunnelInterfaceCarrierVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceCarrierVariable() {
        return Optional.ofNullable(this.tunnelInterfaceCarrierVariable);
    }

    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceClearDontFragment")
    private @Nullable Output<Boolean> tunnelInterfaceClearDontFragment;

    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceClearDontFragment() {
        return Optional.ofNullable(this.tunnelInterfaceClearDontFragment);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceClearDontFragmentVariable")
    private @Nullable Output<String> tunnelInterfaceClearDontFragmentVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceClearDontFragmentVariable() {
        return Optional.ofNullable(this.tunnelInterfaceClearDontFragmentVariable);
    }

    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     * 
     */
    @Import(name="tunnelInterfaceColor")
    private @Nullable Output<String> tunnelInterfaceColor;

    /**
     * @return Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     * 
     */
    public Optional<Output<String>> tunnelInterfaceColor() {
        return Optional.ofNullable(this.tunnelInterfaceColor);
    }

    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceColorRestrict")
    private @Nullable Output<Boolean> tunnelInterfaceColorRestrict;

    /**
     * @return Restrict this TLOC behavior
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceColorRestrict() {
        return Optional.ofNullable(this.tunnelInterfaceColorRestrict);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceColorVariable")
    private @Nullable Output<String> tunnelInterfaceColorVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceColorVariable() {
        return Optional.ofNullable(this.tunnelInterfaceColorVariable);
    }

    /**
     * Allow Control Connection
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceControlConnections")
    private @Nullable Output<Boolean> tunnelInterfaceControlConnections;

    /**
     * @return Allow Control Connection
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceControlConnections() {
        return Optional.ofNullable(this.tunnelInterfaceControlConnections);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceControlConnectionsVariable")
    private @Nullable Output<String> tunnelInterfaceControlConnectionsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceControlConnectionsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceControlConnectionsVariable);
    }

    /**
     * Encapsulation for TLOC
     * 
     */
    @Import(name="tunnelInterfaceEncapsulations")
    private @Nullable Output<List<VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs>> tunnelInterfaceEncapsulations;

    /**
     * @return Encapsulation for TLOC
     * 
     */
    public Optional<Output<List<VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs>>> tunnelInterfaceEncapsulations() {
        return Optional.ofNullable(this.tunnelInterfaceEncapsulations);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceExcludeControllerGroupListVariable")
    private @Nullable Output<String> tunnelInterfaceExcludeControllerGroupListVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceExcludeControllerGroupListVariable() {
        return Optional.ofNullable(this.tunnelInterfaceExcludeControllerGroupListVariable);
    }

    /**
     * Exclude the following controller groups defined in this list
     * 
     */
    @Import(name="tunnelInterfaceExcludeControllerGroupLists")
    private @Nullable Output<List<Integer>> tunnelInterfaceExcludeControllerGroupLists;

    /**
     * @return Exclude the following controller groups defined in this list
     * 
     */
    public Optional<Output<List<Integer>>> tunnelInterfaceExcludeControllerGroupLists() {
        return Optional.ofNullable(this.tunnelInterfaceExcludeControllerGroupLists);
    }

    /**
     * List of groups
     * 
     */
    @Import(name="tunnelInterfaceGroups")
    private @Nullable Output<List<Integer>> tunnelInterfaceGroups;

    /**
     * @return List of groups
     * 
     */
    public Optional<Output<List<Integer>>> tunnelInterfaceGroups() {
        return Optional.ofNullable(this.tunnelInterfaceGroups);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceGroupsVariable")
    private @Nullable Output<String> tunnelInterfaceGroupsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceGroupsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceGroupsVariable);
    }

    /**
     * Set time period of control hello packets &lt;100..600000&gt; milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     * 
     */
    @Import(name="tunnelInterfaceHelloInterval")
    private @Nullable Output<Integer> tunnelInterfaceHelloInterval;

    /**
     * @return Set time period of control hello packets &lt;100..600000&gt; milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceHelloInterval() {
        return Optional.ofNullable(this.tunnelInterfaceHelloInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceHelloIntervalVariable")
    private @Nullable Output<String> tunnelInterfaceHelloIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceHelloIntervalVariable() {
        return Optional.ofNullable(this.tunnelInterfaceHelloIntervalVariable);
    }

    /**
     * Set tolerance of control hello packets &lt;12..6000&gt; seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     * 
     */
    @Import(name="tunnelInterfaceHelloTolerance")
    private @Nullable Output<Integer> tunnelInterfaceHelloTolerance;

    /**
     * @return Set tolerance of control hello packets &lt;12..6000&gt; seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceHelloTolerance() {
        return Optional.ofNullable(this.tunnelInterfaceHelloTolerance);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceHelloToleranceVariable")
    private @Nullable Output<String> tunnelInterfaceHelloToleranceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceHelloToleranceVariable() {
        return Optional.ofNullable(this.tunnelInterfaceHelloToleranceVariable);
    }

    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceLastResortCircuit")
    private @Nullable Output<Boolean> tunnelInterfaceLastResortCircuit;

    /**
     * @return Set TLOC as last resort
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceLastResortCircuit() {
        return Optional.ofNullable(this.tunnelInterfaceLastResortCircuit);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceLastResortCircuitVariable")
    private @Nullable Output<String> tunnelInterfaceLastResortCircuitVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceLastResortCircuitVariable() {
        return Optional.ofNullable(this.tunnelInterfaceLastResortCircuitVariable);
    }

    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceLowBandwidthLink")
    private @Nullable Output<Boolean> tunnelInterfaceLowBandwidthLink;

    /**
     * @return Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceLowBandwidthLink() {
        return Optional.ofNullable(this.tunnelInterfaceLowBandwidthLink);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceLowBandwidthLinkVariable")
    private @Nullable Output<String> tunnelInterfaceLowBandwidthLinkVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceLowBandwidthLinkVariable() {
        return Optional.ofNullable(this.tunnelInterfaceLowBandwidthLinkVariable);
    }

    /**
     * Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`8`
     * 
     */
    @Import(name="tunnelInterfaceMaxControlConnections")
    private @Nullable Output<Integer> tunnelInterfaceMaxControlConnections;

    /**
     * @return Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`8`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceMaxControlConnections() {
        return Optional.ofNullable(this.tunnelInterfaceMaxControlConnections);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceMaxControlConnectionsVariable")
    private @Nullable Output<String> tunnelInterfaceMaxControlConnectionsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceMaxControlConnectionsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceMaxControlConnectionsVariable);
    }

    /**
     * Set time period of nat refresh packets &lt;1...60&gt; seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     * 
     */
    @Import(name="tunnelInterfaceNatRefreshInterval")
    private @Nullable Output<Integer> tunnelInterfaceNatRefreshInterval;

    /**
     * @return Set time period of nat refresh packets &lt;1...60&gt; seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceNatRefreshInterval() {
        return Optional.ofNullable(this.tunnelInterfaceNatRefreshInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceNatRefreshIntervalVariable")
    private @Nullable Output<String> tunnelInterfaceNatRefreshIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceNatRefreshIntervalVariable() {
        return Optional.ofNullable(this.tunnelInterfaceNatRefreshIntervalVariable);
    }

    /**
     * Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceNetworkBroadcast")
    private @Nullable Output<Boolean> tunnelInterfaceNetworkBroadcast;

    /**
     * @return Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceNetworkBroadcast() {
        return Optional.ofNullable(this.tunnelInterfaceNetworkBroadcast);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceNetworkBroadcastVariable")
    private @Nullable Output<String> tunnelInterfaceNetworkBroadcastVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceNetworkBroadcastVariable() {
        return Optional.ofNullable(this.tunnelInterfaceNetworkBroadcastVariable);
    }

    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfacePortHop")
    private @Nullable Output<Boolean> tunnelInterfacePortHop;

    /**
     * @return Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfacePortHop() {
        return Optional.ofNullable(this.tunnelInterfacePortHop);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfacePortHopVariable")
    private @Nullable Output<String> tunnelInterfacePortHopVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfacePortHopVariable() {
        return Optional.ofNullable(this.tunnelInterfacePortHopVariable);
    }

    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    @Import(name="tunnelInterfaceTunnelTcpMss")
    private @Nullable Output<Integer> tunnelInterfaceTunnelTcpMss;

    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceTunnelTcpMss() {
        return Optional.ofNullable(this.tunnelInterfaceTunnelTcpMss);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceTunnelTcpMssVariable")
    private @Nullable Output<String> tunnelInterfaceTunnelTcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceTunnelTcpMssVariable() {
        return Optional.ofNullable(this.tunnelInterfaceTunnelTcpMssVariable);
    }

    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceVbondAsStunServer")
    private @Nullable Output<Boolean> tunnelInterfaceVbondAsStunServer;

    /**
     * @return Put this wan interface in STUN mode only
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceVbondAsStunServer() {
        return Optional.ofNullable(this.tunnelInterfaceVbondAsStunServer);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceVbondAsStunServerVariable")
    private @Nullable Output<String> tunnelInterfaceVbondAsStunServerVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceVbondAsStunServerVariable() {
        return Optional.ofNullable(this.tunnelInterfaceVbondAsStunServerVariable);
    }

    /**
     * Set interface preference for control connection to vManage &lt;0..8&gt;
     *   - Range: `0`-`8`
     *   - Default value: `5`
     * 
     */
    @Import(name="tunnelInterfaceVmanageConnectionPreference")
    private @Nullable Output<Integer> tunnelInterfaceVmanageConnectionPreference;

    /**
     * @return Set interface preference for control connection to vManage &lt;0..8&gt;
     *   - Range: `0`-`8`
     *   - Default value: `5`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceVmanageConnectionPreference() {
        return Optional.ofNullable(this.tunnelInterfaceVmanageConnectionPreference);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    private @Nullable Output<String> tunnelInterfaceVmanageConnectionPreferenceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceVmanageConnectionPreferenceVariable() {
        return Optional.ofNullable(this.tunnelInterfaceVmanageConnectionPreferenceVariable);
    }

    /**
     * Set tunnel QoS mode
     *   - Choices: `spoke`
     * 
     */
    @Import(name="tunnelQosMode")
    private @Nullable Output<String> tunnelQosMode;

    /**
     * @return Set tunnel QoS mode
     *   - Choices: `spoke`
     * 
     */
    public Optional<Output<String>> tunnelQosMode() {
        return Optional.ofNullable(this.tunnelQosMode);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelQosModeVariable")
    private @Nullable Output<String> tunnelQosModeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelQosModeVariable() {
        return Optional.ofNullable(this.tunnelQosModeVariable);
    }

    /**
     * Dialer IP Unnumbered Loopback interface name
     * 
     */
    @Import(name="unnumberedLoopbackInterface")
    private @Nullable Output<String> unnumberedLoopbackInterface;

    /**
     * @return Dialer IP Unnumbered Loopback interface name
     * 
     */
    public Optional<Output<String>> unnumberedLoopbackInterface() {
        return Optional.ofNullable(this.unnumberedLoopbackInterface);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="unnumberedLoopbackInterfaceVariable")
    private @Nullable Output<String> unnumberedLoopbackInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> unnumberedLoopbackInterfaceVariable() {
        return Optional.ofNullable(this.unnumberedLoopbackInterfaceVariable);
    }

    /**
     * Name of rewrite rule
     * 
     */
    @Import(name="writeRule")
    private @Nullable Output<String> writeRule;

    /**
     * @return Name of rewrite rule
     * 
     */
    public Optional<Output<String>> writeRule() {
        return Optional.ofNullable(this.writeRule);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="writeRuleVariable")
    private @Nullable Output<String> writeRuleVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> writeRuleVariable() {
        return Optional.ofNullable(this.writeRuleVariable);
    }

    private VpnInterfaceEthernetPppoeFeatureTemplateArgs() {}

    private VpnInterfaceEthernetPppoeFeatureTemplateArgs(VpnInterfaceEthernetPppoeFeatureTemplateArgs $) {
        this.accessLists = $.accessLists;
        this.bandwidthDownstream = $.bandwidthDownstream;
        this.bandwidthDownstreamVariable = $.bandwidthDownstreamVariable;
        this.bandwidthUpstream = $.bandwidthUpstream;
        this.bandwidthUpstreamVariable = $.bandwidthUpstreamVariable;
        this.chapHostname = $.chapHostname;
        this.chapHostnameVariable = $.chapHostnameVariable;
        this.chapPppAuthPassword = $.chapPppAuthPassword;
        this.chapPppAuthPasswordVariable = $.chapPppAuthPasswordVariable;
        this.coreRegion = $.coreRegion;
        this.coreRegionVariable = $.coreRegionVariable;
        this.description = $.description;
        this.deviceTypes = $.deviceTypes;
        this.dialerAddressNegotiated = $.dialerAddressNegotiated;
        this.dialerAddressNegotiatedVariable = $.dialerAddressNegotiatedVariable;
        this.dialerPoolNumber = $.dialerPoolNumber;
        this.dialerPoolNumberVariable = $.dialerPoolNumberVariable;
        this.dialerTcpMss = $.dialerTcpMss;
        this.dialerTcpMssVariable = $.dialerTcpMssVariable;
        this.enableCoreRegion = $.enableCoreRegion;
        this.encap = $.encap;
        this.encapVariable = $.encapVariable;
        this.ethernetInterfaceName = $.ethernetInterfaceName;
        this.ethernetInterfaceNameVariable = $.ethernetInterfaceNameVariable;
        this.interfaceDescription = $.interfaceDescription;
        this.interfaceDescriptionVariable = $.interfaceDescriptionVariable;
        this.ipDirectedBroadcast = $.ipDirectedBroadcast;
        this.ipDirectedBroadcastVariable = $.ipDirectedBroadcastVariable;
        this.ipMtuForDialerInterface = $.ipMtuForDialerInterface;
        this.ipMtuForDialerInterfaceVariable = $.ipMtuForDialerInterfaceVariable;
        this.name = $.name;
        this.nat = $.nat;
        this.natBlockIcmpError = $.natBlockIcmpError;
        this.natBlockIcmpErrorVariable = $.natBlockIcmpErrorVariable;
        this.natPortForwards = $.natPortForwards;
        this.natRefreshMode = $.natRefreshMode;
        this.natRefreshModeVariable = $.natRefreshModeVariable;
        this.natResponseToPing = $.natResponseToPing;
        this.natResponseToPingVariable = $.natResponseToPingVariable;
        this.natTcpTimeout = $.natTcpTimeout;
        this.natTcpTimeoutVariable = $.natTcpTimeoutVariable;
        this.natUdpTimeout = $.natUdpTimeout;
        this.natUdpTimeoutVariable = $.natUdpTimeoutVariable;
        this.papPassword = $.papPassword;
        this.papPppAuthPassword = $.papPppAuthPassword;
        this.papPppAuthPasswordVariable = $.papPppAuthPasswordVariable;
        this.papUsername = $.papUsername;
        this.papUsernameVariable = $.papUsernameVariable;
        this.perTunnelQos = $.perTunnelQos;
        this.perTunnelQosAggregator = $.perTunnelQosAggregator;
        this.perTunnelQosAggregatorVariable = $.perTunnelQosAggregatorVariable;
        this.perTunnelQosVariable = $.perTunnelQosVariable;
        this.policers = $.policers;
        this.pppAuthenticationProtocol = $.pppAuthenticationProtocol;
        this.pppAuthenticationProtocolPap = $.pppAuthenticationProtocolPap;
        this.pppAuthenticationProtocolVariable = $.pppAuthenticationProtocolVariable;
        this.pppAuthenticationType = $.pppAuthenticationType;
        this.pppMaximumPayload = $.pppMaximumPayload;
        this.pppMaximumPayloadVariable = $.pppMaximumPayloadVariable;
        this.qosAdaptiveBandwidthDownstream = $.qosAdaptiveBandwidthDownstream;
        this.qosAdaptiveBandwidthDownstreamVariable = $.qosAdaptiveBandwidthDownstreamVariable;
        this.qosAdaptiveBandwidthUpstream = $.qosAdaptiveBandwidthUpstream;
        this.qosAdaptiveBandwidthUpstreamVariable = $.qosAdaptiveBandwidthUpstreamVariable;
        this.qosAdaptiveMaxDownstream = $.qosAdaptiveMaxDownstream;
        this.qosAdaptiveMaxDownstreamVariable = $.qosAdaptiveMaxDownstreamVariable;
        this.qosAdaptiveMaxUpstream = $.qosAdaptiveMaxUpstream;
        this.qosAdaptiveMaxUpstreamVariable = $.qosAdaptiveMaxUpstreamVariable;
        this.qosAdaptiveMinDownstream = $.qosAdaptiveMinDownstream;
        this.qosAdaptiveMinDownstreamVariable = $.qosAdaptiveMinDownstreamVariable;
        this.qosAdaptiveMinUpstream = $.qosAdaptiveMinUpstream;
        this.qosAdaptiveMinUpstreamVariable = $.qosAdaptiveMinUpstreamVariable;
        this.qosAdaptivePeriod = $.qosAdaptivePeriod;
        this.qosAdaptivePeriodVariable = $.qosAdaptivePeriodVariable;
        this.qosMap = $.qosMap;
        this.qosMapVariable = $.qosMapVariable;
        this.qosMapVpn = $.qosMapVpn;
        this.qosMapVpnVariable = $.qosMapVpnVariable;
        this.secondaryRegion = $.secondaryRegion;
        this.secondaryRegionVariable = $.secondaryRegionVariable;
        this.shapingRate = $.shapingRate;
        this.shapingRateVariable = $.shapingRateVariable;
        this.shutdown = $.shutdown;
        this.shutdownVariable = $.shutdownVariable;
        this.tlocExtension = $.tlocExtension;
        this.tlocExtensionVariable = $.tlocExtensionVariable;
        this.trackerVariable = $.trackerVariable;
        this.trackers = $.trackers;
        this.tunnelInterfaceAllowAll = $.tunnelInterfaceAllowAll;
        this.tunnelInterfaceAllowAllVariable = $.tunnelInterfaceAllowAllVariable;
        this.tunnelInterfaceAllowBgp = $.tunnelInterfaceAllowBgp;
        this.tunnelInterfaceAllowBgpVariable = $.tunnelInterfaceAllowBgpVariable;
        this.tunnelInterfaceAllowDhcp = $.tunnelInterfaceAllowDhcp;
        this.tunnelInterfaceAllowDhcpVariable = $.tunnelInterfaceAllowDhcpVariable;
        this.tunnelInterfaceAllowDns = $.tunnelInterfaceAllowDns;
        this.tunnelInterfaceAllowDnsVariable = $.tunnelInterfaceAllowDnsVariable;
        this.tunnelInterfaceAllowHttps = $.tunnelInterfaceAllowHttps;
        this.tunnelInterfaceAllowHttpsVariable = $.tunnelInterfaceAllowHttpsVariable;
        this.tunnelInterfaceAllowIcmp = $.tunnelInterfaceAllowIcmp;
        this.tunnelInterfaceAllowIcmpVariable = $.tunnelInterfaceAllowIcmpVariable;
        this.tunnelInterfaceAllowNetconf = $.tunnelInterfaceAllowNetconf;
        this.tunnelInterfaceAllowNetconfVariable = $.tunnelInterfaceAllowNetconfVariable;
        this.tunnelInterfaceAllowNtp = $.tunnelInterfaceAllowNtp;
        this.tunnelInterfaceAllowNtpVariable = $.tunnelInterfaceAllowNtpVariable;
        this.tunnelInterfaceAllowOspf = $.tunnelInterfaceAllowOspf;
        this.tunnelInterfaceAllowOspfVariable = $.tunnelInterfaceAllowOspfVariable;
        this.tunnelInterfaceAllowSnmp = $.tunnelInterfaceAllowSnmp;
        this.tunnelInterfaceAllowSnmpVariable = $.tunnelInterfaceAllowSnmpVariable;
        this.tunnelInterfaceAllowSsh = $.tunnelInterfaceAllowSsh;
        this.tunnelInterfaceAllowSshVariable = $.tunnelInterfaceAllowSshVariable;
        this.tunnelInterfaceAllowStun = $.tunnelInterfaceAllowStun;
        this.tunnelInterfaceAllowStunVariable = $.tunnelInterfaceAllowStunVariable;
        this.tunnelInterfaceBindLoopbackTunnel = $.tunnelInterfaceBindLoopbackTunnel;
        this.tunnelInterfaceBindLoopbackTunnelVariable = $.tunnelInterfaceBindLoopbackTunnelVariable;
        this.tunnelInterfaceBorder = $.tunnelInterfaceBorder;
        this.tunnelInterfaceBorderVariable = $.tunnelInterfaceBorderVariable;
        this.tunnelInterfaceCarrier = $.tunnelInterfaceCarrier;
        this.tunnelInterfaceCarrierVariable = $.tunnelInterfaceCarrierVariable;
        this.tunnelInterfaceClearDontFragment = $.tunnelInterfaceClearDontFragment;
        this.tunnelInterfaceClearDontFragmentVariable = $.tunnelInterfaceClearDontFragmentVariable;
        this.tunnelInterfaceColor = $.tunnelInterfaceColor;
        this.tunnelInterfaceColorRestrict = $.tunnelInterfaceColorRestrict;
        this.tunnelInterfaceColorVariable = $.tunnelInterfaceColorVariable;
        this.tunnelInterfaceControlConnections = $.tunnelInterfaceControlConnections;
        this.tunnelInterfaceControlConnectionsVariable = $.tunnelInterfaceControlConnectionsVariable;
        this.tunnelInterfaceEncapsulations = $.tunnelInterfaceEncapsulations;
        this.tunnelInterfaceExcludeControllerGroupListVariable = $.tunnelInterfaceExcludeControllerGroupListVariable;
        this.tunnelInterfaceExcludeControllerGroupLists = $.tunnelInterfaceExcludeControllerGroupLists;
        this.tunnelInterfaceGroups = $.tunnelInterfaceGroups;
        this.tunnelInterfaceGroupsVariable = $.tunnelInterfaceGroupsVariable;
        this.tunnelInterfaceHelloInterval = $.tunnelInterfaceHelloInterval;
        this.tunnelInterfaceHelloIntervalVariable = $.tunnelInterfaceHelloIntervalVariable;
        this.tunnelInterfaceHelloTolerance = $.tunnelInterfaceHelloTolerance;
        this.tunnelInterfaceHelloToleranceVariable = $.tunnelInterfaceHelloToleranceVariable;
        this.tunnelInterfaceLastResortCircuit = $.tunnelInterfaceLastResortCircuit;
        this.tunnelInterfaceLastResortCircuitVariable = $.tunnelInterfaceLastResortCircuitVariable;
        this.tunnelInterfaceLowBandwidthLink = $.tunnelInterfaceLowBandwidthLink;
        this.tunnelInterfaceLowBandwidthLinkVariable = $.tunnelInterfaceLowBandwidthLinkVariable;
        this.tunnelInterfaceMaxControlConnections = $.tunnelInterfaceMaxControlConnections;
        this.tunnelInterfaceMaxControlConnectionsVariable = $.tunnelInterfaceMaxControlConnectionsVariable;
        this.tunnelInterfaceNatRefreshInterval = $.tunnelInterfaceNatRefreshInterval;
        this.tunnelInterfaceNatRefreshIntervalVariable = $.tunnelInterfaceNatRefreshIntervalVariable;
        this.tunnelInterfaceNetworkBroadcast = $.tunnelInterfaceNetworkBroadcast;
        this.tunnelInterfaceNetworkBroadcastVariable = $.tunnelInterfaceNetworkBroadcastVariable;
        this.tunnelInterfacePortHop = $.tunnelInterfacePortHop;
        this.tunnelInterfacePortHopVariable = $.tunnelInterfacePortHopVariable;
        this.tunnelInterfaceTunnelTcpMss = $.tunnelInterfaceTunnelTcpMss;
        this.tunnelInterfaceTunnelTcpMssVariable = $.tunnelInterfaceTunnelTcpMssVariable;
        this.tunnelInterfaceVbondAsStunServer = $.tunnelInterfaceVbondAsStunServer;
        this.tunnelInterfaceVbondAsStunServerVariable = $.tunnelInterfaceVbondAsStunServerVariable;
        this.tunnelInterfaceVmanageConnectionPreference = $.tunnelInterfaceVmanageConnectionPreference;
        this.tunnelInterfaceVmanageConnectionPreferenceVariable = $.tunnelInterfaceVmanageConnectionPreferenceVariable;
        this.tunnelQosMode = $.tunnelQosMode;
        this.tunnelQosModeVariable = $.tunnelQosModeVariable;
        this.unnumberedLoopbackInterface = $.unnumberedLoopbackInterface;
        this.unnumberedLoopbackInterfaceVariable = $.unnumberedLoopbackInterfaceVariable;
        this.writeRule = $.writeRule;
        this.writeRuleVariable = $.writeRuleVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnInterfaceEthernetPppoeFeatureTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnInterfaceEthernetPppoeFeatureTemplateArgs $;

        public Builder() {
            $ = new VpnInterfaceEthernetPppoeFeatureTemplateArgs();
        }

        public Builder(VpnInterfaceEthernetPppoeFeatureTemplateArgs defaults) {
            $ = new VpnInterfaceEthernetPppoeFeatureTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLists Apply ACL
         * 
         * @return builder
         * 
         */
        public Builder accessLists(@Nullable Output<List<VpnInterfaceEthernetPppoeFeatureTemplateAccessListArgs>> accessLists) {
            $.accessLists = accessLists;
            return this;
        }

        /**
         * @param accessLists Apply ACL
         * 
         * @return builder
         * 
         */
        public Builder accessLists(List<VpnInterfaceEthernetPppoeFeatureTemplateAccessListArgs> accessLists) {
            return accessLists(Output.of(accessLists));
        }

        /**
         * @param accessLists Apply ACL
         * 
         * @return builder
         * 
         */
        public Builder accessLists(VpnInterfaceEthernetPppoeFeatureTemplateAccessListArgs... accessLists) {
            return accessLists(List.of(accessLists));
        }

        /**
         * @param bandwidthDownstream Interface downstream bandwidth capacity, in kbps
         *   - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder bandwidthDownstream(@Nullable Output<Integer> bandwidthDownstream) {
            $.bandwidthDownstream = bandwidthDownstream;
            return this;
        }

        /**
         * @param bandwidthDownstream Interface downstream bandwidth capacity, in kbps
         *   - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder bandwidthDownstream(Integer bandwidthDownstream) {
            return bandwidthDownstream(Output.of(bandwidthDownstream));
        }

        /**
         * @param bandwidthDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthDownstreamVariable(@Nullable Output<String> bandwidthDownstreamVariable) {
            $.bandwidthDownstreamVariable = bandwidthDownstreamVariable;
            return this;
        }

        /**
         * @param bandwidthDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthDownstreamVariable(String bandwidthDownstreamVariable) {
            return bandwidthDownstreamVariable(Output.of(bandwidthDownstreamVariable));
        }

        /**
         * @param bandwidthUpstream Interface upstream bandwidth capacity, in kbps
         *   - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder bandwidthUpstream(@Nullable Output<Integer> bandwidthUpstream) {
            $.bandwidthUpstream = bandwidthUpstream;
            return this;
        }

        /**
         * @param bandwidthUpstream Interface upstream bandwidth capacity, in kbps
         *   - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder bandwidthUpstream(Integer bandwidthUpstream) {
            return bandwidthUpstream(Output.of(bandwidthUpstream));
        }

        /**
         * @param bandwidthUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthUpstreamVariable(@Nullable Output<String> bandwidthUpstreamVariable) {
            $.bandwidthUpstreamVariable = bandwidthUpstreamVariable;
            return this;
        }

        /**
         * @param bandwidthUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthUpstreamVariable(String bandwidthUpstreamVariable) {
            return bandwidthUpstreamVariable(Output.of(bandwidthUpstreamVariable));
        }

        /**
         * @param chapHostname CHAP Hostname
         * 
         * @return builder
         * 
         */
        public Builder chapHostname(@Nullable Output<String> chapHostname) {
            $.chapHostname = chapHostname;
            return this;
        }

        /**
         * @param chapHostname CHAP Hostname
         * 
         * @return builder
         * 
         */
        public Builder chapHostname(String chapHostname) {
            return chapHostname(Output.of(chapHostname));
        }

        /**
         * @param chapHostnameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder chapHostnameVariable(@Nullable Output<String> chapHostnameVariable) {
            $.chapHostnameVariable = chapHostnameVariable;
            return this;
        }

        /**
         * @param chapHostnameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder chapHostnameVariable(String chapHostnameVariable) {
            return chapHostnameVariable(Output.of(chapHostnameVariable));
        }

        /**
         * @param chapPppAuthPassword Specify ppp chap authentication Password
         * 
         * @return builder
         * 
         */
        public Builder chapPppAuthPassword(@Nullable Output<String> chapPppAuthPassword) {
            $.chapPppAuthPassword = chapPppAuthPassword;
            return this;
        }

        /**
         * @param chapPppAuthPassword Specify ppp chap authentication Password
         * 
         * @return builder
         * 
         */
        public Builder chapPppAuthPassword(String chapPppAuthPassword) {
            return chapPppAuthPassword(Output.of(chapPppAuthPassword));
        }

        /**
         * @param chapPppAuthPasswordVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder chapPppAuthPasswordVariable(@Nullable Output<String> chapPppAuthPasswordVariable) {
            $.chapPppAuthPasswordVariable = chapPppAuthPasswordVariable;
            return this;
        }

        /**
         * @param chapPppAuthPasswordVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder chapPppAuthPasswordVariable(String chapPppAuthPasswordVariable) {
            return chapPppAuthPasswordVariable(Output.of(chapPppAuthPasswordVariable));
        }

        /**
         * @param coreRegion Enable core region
         *   - Choices: `core`, `core-shared`
         *   - Default value: `core`
         * 
         * @return builder
         * 
         */
        public Builder coreRegion(@Nullable Output<String> coreRegion) {
            $.coreRegion = coreRegion;
            return this;
        }

        /**
         * @param coreRegion Enable core region
         *   - Choices: `core`, `core-shared`
         *   - Default value: `core`
         * 
         * @return builder
         * 
         */
        public Builder coreRegion(String coreRegion) {
            return coreRegion(Output.of(coreRegion));
        }

        /**
         * @param coreRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder coreRegionVariable(@Nullable Output<String> coreRegionVariable) {
            $.coreRegionVariable = coreRegionVariable;
            return this;
        }

        /**
         * @param coreRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder coreRegionVariable(String coreRegionVariable) {
            return coreRegionVariable(Output.of(coreRegionVariable));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param dialerAddressNegotiated Dialer IP Negotiated
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder dialerAddressNegotiated(@Nullable Output<Boolean> dialerAddressNegotiated) {
            $.dialerAddressNegotiated = dialerAddressNegotiated;
            return this;
        }

        /**
         * @param dialerAddressNegotiated Dialer IP Negotiated
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder dialerAddressNegotiated(Boolean dialerAddressNegotiated) {
            return dialerAddressNegotiated(Output.of(dialerAddressNegotiated));
        }

        /**
         * @param dialerAddressNegotiatedVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dialerAddressNegotiatedVariable(@Nullable Output<String> dialerAddressNegotiatedVariable) {
            $.dialerAddressNegotiatedVariable = dialerAddressNegotiatedVariable;
            return this;
        }

        /**
         * @param dialerAddressNegotiatedVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dialerAddressNegotiatedVariable(String dialerAddressNegotiatedVariable) {
            return dialerAddressNegotiatedVariable(Output.of(dialerAddressNegotiatedVariable));
        }

        /**
         * @param dialerPoolNumber Dialer pool number
         *   - Range: `100`-`255`
         * 
         * @return builder
         * 
         */
        public Builder dialerPoolNumber(@Nullable Output<Integer> dialerPoolNumber) {
            $.dialerPoolNumber = dialerPoolNumber;
            return this;
        }

        /**
         * @param dialerPoolNumber Dialer pool number
         *   - Range: `100`-`255`
         * 
         * @return builder
         * 
         */
        public Builder dialerPoolNumber(Integer dialerPoolNumber) {
            return dialerPoolNumber(Output.of(dialerPoolNumber));
        }

        /**
         * @param dialerPoolNumberVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dialerPoolNumberVariable(@Nullable Output<String> dialerPoolNumberVariable) {
            $.dialerPoolNumberVariable = dialerPoolNumberVariable;
            return this;
        }

        /**
         * @param dialerPoolNumberVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dialerPoolNumberVariable(String dialerPoolNumberVariable) {
            return dialerPoolNumberVariable(Output.of(dialerPoolNumberVariable));
        }

        /**
         * @param dialerTcpMss Dialer TCP MSS on SYN packets, in bytes
         *   - Range: `552`-`1960`
         * 
         * @return builder
         * 
         */
        public Builder dialerTcpMss(@Nullable Output<Integer> dialerTcpMss) {
            $.dialerTcpMss = dialerTcpMss;
            return this;
        }

        /**
         * @param dialerTcpMss Dialer TCP MSS on SYN packets, in bytes
         *   - Range: `552`-`1960`
         * 
         * @return builder
         * 
         */
        public Builder dialerTcpMss(Integer dialerTcpMss) {
            return dialerTcpMss(Output.of(dialerTcpMss));
        }

        /**
         * @param dialerTcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dialerTcpMssVariable(@Nullable Output<String> dialerTcpMssVariable) {
            $.dialerTcpMssVariable = dialerTcpMssVariable;
            return this;
        }

        /**
         * @param dialerTcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dialerTcpMssVariable(String dialerTcpMssVariable) {
            return dialerTcpMssVariable(Output.of(dialerTcpMssVariable));
        }

        /**
         * @param enableCoreRegion Enable core region
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableCoreRegion(@Nullable Output<Boolean> enableCoreRegion) {
            $.enableCoreRegion = enableCoreRegion;
            return this;
        }

        /**
         * @param enableCoreRegion Enable core region
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableCoreRegion(Boolean enableCoreRegion) {
            return enableCoreRegion(Output.of(enableCoreRegion));
        }

        /**
         * @param encap Encapsulation VLAN id
         *   - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder encap(@Nullable Output<Integer> encap) {
            $.encap = encap;
            return this;
        }

        /**
         * @param encap Encapsulation VLAN id
         *   - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder encap(Integer encap) {
            return encap(Output.of(encap));
        }

        /**
         * @param encapVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder encapVariable(@Nullable Output<String> encapVariable) {
            $.encapVariable = encapVariable;
            return this;
        }

        /**
         * @param encapVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder encapVariable(String encapVariable) {
            return encapVariable(Output.of(encapVariable));
        }

        /**
         * @param ethernetInterfaceName Ethernet Interface/Sub Interface Name including sub interface number
         * 
         * @return builder
         * 
         */
        public Builder ethernetInterfaceName(@Nullable Output<String> ethernetInterfaceName) {
            $.ethernetInterfaceName = ethernetInterfaceName;
            return this;
        }

        /**
         * @param ethernetInterfaceName Ethernet Interface/Sub Interface Name including sub interface number
         * 
         * @return builder
         * 
         */
        public Builder ethernetInterfaceName(String ethernetInterfaceName) {
            return ethernetInterfaceName(Output.of(ethernetInterfaceName));
        }

        /**
         * @param ethernetInterfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ethernetInterfaceNameVariable(@Nullable Output<String> ethernetInterfaceNameVariable) {
            $.ethernetInterfaceNameVariable = ethernetInterfaceNameVariable;
            return this;
        }

        /**
         * @param ethernetInterfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ethernetInterfaceNameVariable(String ethernetInterfaceNameVariable) {
            return ethernetInterfaceNameVariable(Output.of(ethernetInterfaceNameVariable));
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(@Nullable Output<String> interfaceDescription) {
            $.interfaceDescription = interfaceDescription;
            return this;
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(String interfaceDescription) {
            return interfaceDescription(Output.of(interfaceDescription));
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(@Nullable Output<String> interfaceDescriptionVariable) {
            $.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            return interfaceDescriptionVariable(Output.of(interfaceDescriptionVariable));
        }

        /**
         * @param ipDirectedBroadcast IP Directed-Broadcast
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder ipDirectedBroadcast(@Nullable Output<Boolean> ipDirectedBroadcast) {
            $.ipDirectedBroadcast = ipDirectedBroadcast;
            return this;
        }

        /**
         * @param ipDirectedBroadcast IP Directed-Broadcast
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder ipDirectedBroadcast(Boolean ipDirectedBroadcast) {
            return ipDirectedBroadcast(Output.of(ipDirectedBroadcast));
        }

        /**
         * @param ipDirectedBroadcastVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipDirectedBroadcastVariable(@Nullable Output<String> ipDirectedBroadcastVariable) {
            $.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            return this;
        }

        /**
         * @param ipDirectedBroadcastVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipDirectedBroadcastVariable(String ipDirectedBroadcastVariable) {
            return ipDirectedBroadcastVariable(Output.of(ipDirectedBroadcastVariable));
        }

        /**
         * @param ipMtuForDialerInterface IP MTU &lt;576..2000&gt;, in bytes
         *   - Range: `576`-`2000`
         *   - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder ipMtuForDialerInterface(@Nullable Output<Integer> ipMtuForDialerInterface) {
            $.ipMtuForDialerInterface = ipMtuForDialerInterface;
            return this;
        }

        /**
         * @param ipMtuForDialerInterface IP MTU &lt;576..2000&gt;, in bytes
         *   - Range: `576`-`2000`
         *   - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder ipMtuForDialerInterface(Integer ipMtuForDialerInterface) {
            return ipMtuForDialerInterface(Output.of(ipMtuForDialerInterface));
        }

        /**
         * @param ipMtuForDialerInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipMtuForDialerInterfaceVariable(@Nullable Output<String> ipMtuForDialerInterfaceVariable) {
            $.ipMtuForDialerInterfaceVariable = ipMtuForDialerInterfaceVariable;
            return this;
        }

        /**
         * @param ipMtuForDialerInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipMtuForDialerInterfaceVariable(String ipMtuForDialerInterfaceVariable) {
            return ipMtuForDialerInterfaceVariable(Output.of(ipMtuForDialerInterfaceVariable));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nat Network Address Translation on this interface
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder nat(@Nullable Output<Boolean> nat) {
            $.nat = nat;
            return this;
        }

        /**
         * @param nat Network Address Translation on this interface
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder nat(Boolean nat) {
            return nat(Output.of(nat));
        }

        /**
         * @param natBlockIcmpError Block inbound ICMP error messages
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder natBlockIcmpError(@Nullable Output<Boolean> natBlockIcmpError) {
            $.natBlockIcmpError = natBlockIcmpError;
            return this;
        }

        /**
         * @param natBlockIcmpError Block inbound ICMP error messages
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder natBlockIcmpError(Boolean natBlockIcmpError) {
            return natBlockIcmpError(Output.of(natBlockIcmpError));
        }

        /**
         * @param natBlockIcmpErrorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natBlockIcmpErrorVariable(@Nullable Output<String> natBlockIcmpErrorVariable) {
            $.natBlockIcmpErrorVariable = natBlockIcmpErrorVariable;
            return this;
        }

        /**
         * @param natBlockIcmpErrorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natBlockIcmpErrorVariable(String natBlockIcmpErrorVariable) {
            return natBlockIcmpErrorVariable(Output.of(natBlockIcmpErrorVariable));
        }

        /**
         * @param natPortForwards Set port-forwarding rules for NAT on this interface
         * 
         * @return builder
         * 
         */
        public Builder natPortForwards(@Nullable Output<List<VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs>> natPortForwards) {
            $.natPortForwards = natPortForwards;
            return this;
        }

        /**
         * @param natPortForwards Set port-forwarding rules for NAT on this interface
         * 
         * @return builder
         * 
         */
        public Builder natPortForwards(List<VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs> natPortForwards) {
            return natPortForwards(Output.of(natPortForwards));
        }

        /**
         * @param natPortForwards Set port-forwarding rules for NAT on this interface
         * 
         * @return builder
         * 
         */
        public Builder natPortForwards(VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs... natPortForwards) {
            return natPortForwards(List.of(natPortForwards));
        }

        /**
         * @param natRefreshMode Set NAT refresh mode
         *   - Choices: `outbound`, `bi-directional`
         *   - Default value: `outbound`
         * 
         * @return builder
         * 
         */
        public Builder natRefreshMode(@Nullable Output<String> natRefreshMode) {
            $.natRefreshMode = natRefreshMode;
            return this;
        }

        /**
         * @param natRefreshMode Set NAT refresh mode
         *   - Choices: `outbound`, `bi-directional`
         *   - Default value: `outbound`
         * 
         * @return builder
         * 
         */
        public Builder natRefreshMode(String natRefreshMode) {
            return natRefreshMode(Output.of(natRefreshMode));
        }

        /**
         * @param natRefreshModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natRefreshModeVariable(@Nullable Output<String> natRefreshModeVariable) {
            $.natRefreshModeVariable = natRefreshModeVariable;
            return this;
        }

        /**
         * @param natRefreshModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natRefreshModeVariable(String natRefreshModeVariable) {
            return natRefreshModeVariable(Output.of(natRefreshModeVariable));
        }

        /**
         * @param natResponseToPing Respond to ping requests to NAT interface ip address from the public side
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder natResponseToPing(@Nullable Output<Boolean> natResponseToPing) {
            $.natResponseToPing = natResponseToPing;
            return this;
        }

        /**
         * @param natResponseToPing Respond to ping requests to NAT interface ip address from the public side
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder natResponseToPing(Boolean natResponseToPing) {
            return natResponseToPing(Output.of(natResponseToPing));
        }

        /**
         * @param natResponseToPingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natResponseToPingVariable(@Nullable Output<String> natResponseToPingVariable) {
            $.natResponseToPingVariable = natResponseToPingVariable;
            return this;
        }

        /**
         * @param natResponseToPingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natResponseToPingVariable(String natResponseToPingVariable) {
            return natResponseToPingVariable(Output.of(natResponseToPingVariable));
        }

        /**
         * @param natTcpTimeout Set NAT TCP session timeout, in minutes
         *   - Range: `1`-`8947`
         *   - Default value: `60`
         * 
         * @return builder
         * 
         */
        public Builder natTcpTimeout(@Nullable Output<Integer> natTcpTimeout) {
            $.natTcpTimeout = natTcpTimeout;
            return this;
        }

        /**
         * @param natTcpTimeout Set NAT TCP session timeout, in minutes
         *   - Range: `1`-`8947`
         *   - Default value: `60`
         * 
         * @return builder
         * 
         */
        public Builder natTcpTimeout(Integer natTcpTimeout) {
            return natTcpTimeout(Output.of(natTcpTimeout));
        }

        /**
         * @param natTcpTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natTcpTimeoutVariable(@Nullable Output<String> natTcpTimeoutVariable) {
            $.natTcpTimeoutVariable = natTcpTimeoutVariable;
            return this;
        }

        /**
         * @param natTcpTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natTcpTimeoutVariable(String natTcpTimeoutVariable) {
            return natTcpTimeoutVariable(Output.of(natTcpTimeoutVariable));
        }

        /**
         * @param natUdpTimeout Set NAT UDP session timeout, in minutes
         *   - Range: `1`-`8947`
         *   - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder natUdpTimeout(@Nullable Output<Integer> natUdpTimeout) {
            $.natUdpTimeout = natUdpTimeout;
            return this;
        }

        /**
         * @param natUdpTimeout Set NAT UDP session timeout, in minutes
         *   - Range: `1`-`8947`
         *   - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder natUdpTimeout(Integer natUdpTimeout) {
            return natUdpTimeout(Output.of(natUdpTimeout));
        }

        /**
         * @param natUdpTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natUdpTimeoutVariable(@Nullable Output<String> natUdpTimeoutVariable) {
            $.natUdpTimeoutVariable = natUdpTimeoutVariable;
            return this;
        }

        /**
         * @param natUdpTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natUdpTimeoutVariable(String natUdpTimeoutVariable) {
            return natUdpTimeoutVariable(Output.of(natUdpTimeoutVariable));
        }

        /**
         * @param papPassword PAP outbound Password
         * 
         * @return builder
         * 
         */
        public Builder papPassword(@Nullable Output<Boolean> papPassword) {
            $.papPassword = papPassword;
            return this;
        }

        /**
         * @param papPassword PAP outbound Password
         * 
         * @return builder
         * 
         */
        public Builder papPassword(Boolean papPassword) {
            return papPassword(Output.of(papPassword));
        }

        /**
         * @param papPppAuthPassword Specify ppp pap authentication Password
         * 
         * @return builder
         * 
         */
        public Builder papPppAuthPassword(@Nullable Output<String> papPppAuthPassword) {
            $.papPppAuthPassword = papPppAuthPassword;
            return this;
        }

        /**
         * @param papPppAuthPassword Specify ppp pap authentication Password
         * 
         * @return builder
         * 
         */
        public Builder papPppAuthPassword(String papPppAuthPassword) {
            return papPppAuthPassword(Output.of(papPppAuthPassword));
        }

        /**
         * @param papPppAuthPasswordVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder papPppAuthPasswordVariable(@Nullable Output<String> papPppAuthPasswordVariable) {
            $.papPppAuthPasswordVariable = papPppAuthPasswordVariable;
            return this;
        }

        /**
         * @param papPppAuthPasswordVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder papPppAuthPasswordVariable(String papPppAuthPasswordVariable) {
            return papPppAuthPasswordVariable(Output.of(papPppAuthPasswordVariable));
        }

        /**
         * @param papUsername PAP outbound Sent Username
         * 
         * @return builder
         * 
         */
        public Builder papUsername(@Nullable Output<String> papUsername) {
            $.papUsername = papUsername;
            return this;
        }

        /**
         * @param papUsername PAP outbound Sent Username
         * 
         * @return builder
         * 
         */
        public Builder papUsername(String papUsername) {
            return papUsername(Output.of(papUsername));
        }

        /**
         * @param papUsernameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder papUsernameVariable(@Nullable Output<String> papUsernameVariable) {
            $.papUsernameVariable = papUsernameVariable;
            return this;
        }

        /**
         * @param papUsernameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder papUsernameVariable(String papUsernameVariable) {
            return papUsernameVariable(Output.of(papUsernameVariable));
        }

        /**
         * @param perTunnelQos Per-tunnel Qos
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQos(@Nullable Output<Boolean> perTunnelQos) {
            $.perTunnelQos = perTunnelQos;
            return this;
        }

        /**
         * @param perTunnelQos Per-tunnel Qos
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQos(Boolean perTunnelQos) {
            return perTunnelQos(Output.of(perTunnelQos));
        }

        /**
         * @param perTunnelQosAggregator Per-tunnel QoS Aggregator
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosAggregator(@Nullable Output<Boolean> perTunnelQosAggregator) {
            $.perTunnelQosAggregator = perTunnelQosAggregator;
            return this;
        }

        /**
         * @param perTunnelQosAggregator Per-tunnel QoS Aggregator
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosAggregator(Boolean perTunnelQosAggregator) {
            return perTunnelQosAggregator(Output.of(perTunnelQosAggregator));
        }

        /**
         * @param perTunnelQosAggregatorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosAggregatorVariable(@Nullable Output<String> perTunnelQosAggregatorVariable) {
            $.perTunnelQosAggregatorVariable = perTunnelQosAggregatorVariable;
            return this;
        }

        /**
         * @param perTunnelQosAggregatorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosAggregatorVariable(String perTunnelQosAggregatorVariable) {
            return perTunnelQosAggregatorVariable(Output.of(perTunnelQosAggregatorVariable));
        }

        /**
         * @param perTunnelQosVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosVariable(@Nullable Output<String> perTunnelQosVariable) {
            $.perTunnelQosVariable = perTunnelQosVariable;
            return this;
        }

        /**
         * @param perTunnelQosVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosVariable(String perTunnelQosVariable) {
            return perTunnelQosVariable(Output.of(perTunnelQosVariable));
        }

        /**
         * @param policers Enable policer
         * 
         * @return builder
         * 
         */
        public Builder policers(@Nullable Output<List<VpnInterfaceEthernetPppoeFeatureTemplatePolicerArgs>> policers) {
            $.policers = policers;
            return this;
        }

        /**
         * @param policers Enable policer
         * 
         * @return builder
         * 
         */
        public Builder policers(List<VpnInterfaceEthernetPppoeFeatureTemplatePolicerArgs> policers) {
            return policers(Output.of(policers));
        }

        /**
         * @param policers Enable policer
         * 
         * @return builder
         * 
         */
        public Builder policers(VpnInterfaceEthernetPppoeFeatureTemplatePolicerArgs... policers) {
            return policers(List.of(policers));
        }

        /**
         * @param pppAuthenticationProtocol PPP Link Authentication Protocol
         *   - Choices: `chap`, `pap`
         * 
         * @return builder
         * 
         */
        public Builder pppAuthenticationProtocol(@Nullable Output<String> pppAuthenticationProtocol) {
            $.pppAuthenticationProtocol = pppAuthenticationProtocol;
            return this;
        }

        /**
         * @param pppAuthenticationProtocol PPP Link Authentication Protocol
         *   - Choices: `chap`, `pap`
         * 
         * @return builder
         * 
         */
        public Builder pppAuthenticationProtocol(String pppAuthenticationProtocol) {
            return pppAuthenticationProtocol(Output.of(pppAuthenticationProtocol));
        }

        /**
         * @param pppAuthenticationProtocolPap PPP Authentication Protocol PAP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder pppAuthenticationProtocolPap(@Nullable Output<Boolean> pppAuthenticationProtocolPap) {
            $.pppAuthenticationProtocolPap = pppAuthenticationProtocolPap;
            return this;
        }

        /**
         * @param pppAuthenticationProtocolPap PPP Authentication Protocol PAP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder pppAuthenticationProtocolPap(Boolean pppAuthenticationProtocolPap) {
            return pppAuthenticationProtocolPap(Output.of(pppAuthenticationProtocolPap));
        }

        /**
         * @param pppAuthenticationProtocolVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder pppAuthenticationProtocolVariable(@Nullable Output<String> pppAuthenticationProtocolVariable) {
            $.pppAuthenticationProtocolVariable = pppAuthenticationProtocolVariable;
            return this;
        }

        /**
         * @param pppAuthenticationProtocolVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder pppAuthenticationProtocolVariable(String pppAuthenticationProtocolVariable) {
            return pppAuthenticationProtocolVariable(Output.of(pppAuthenticationProtocolVariable));
        }

        /**
         * @param pppAuthenticationType Authenticate remote on incoming call only
         *   - Choices: `callin`, `false`
         *   - Default value: `callin`
         * 
         * @return builder
         * 
         */
        public Builder pppAuthenticationType(@Nullable Output<String> pppAuthenticationType) {
            $.pppAuthenticationType = pppAuthenticationType;
            return this;
        }

        /**
         * @param pppAuthenticationType Authenticate remote on incoming call only
         *   - Choices: `callin`, `false`
         *   - Default value: `callin`
         * 
         * @return builder
         * 
         */
        public Builder pppAuthenticationType(String pppAuthenticationType) {
            return pppAuthenticationType(Output.of(pppAuthenticationType));
        }

        /**
         * @param pppMaximumPayload Maximum MRU to be negotiated during PPP LCP negotiation
         *   - Range: `64`-`1792`
         * 
         * @return builder
         * 
         */
        public Builder pppMaximumPayload(@Nullable Output<Integer> pppMaximumPayload) {
            $.pppMaximumPayload = pppMaximumPayload;
            return this;
        }

        /**
         * @param pppMaximumPayload Maximum MRU to be negotiated during PPP LCP negotiation
         *   - Range: `64`-`1792`
         * 
         * @return builder
         * 
         */
        public Builder pppMaximumPayload(Integer pppMaximumPayload) {
            return pppMaximumPayload(Output.of(pppMaximumPayload));
        }

        /**
         * @param pppMaximumPayloadVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder pppMaximumPayloadVariable(@Nullable Output<String> pppMaximumPayloadVariable) {
            $.pppMaximumPayloadVariable = pppMaximumPayloadVariable;
            return this;
        }

        /**
         * @param pppMaximumPayloadVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder pppMaximumPayloadVariable(String pppMaximumPayloadVariable) {
            return pppMaximumPayloadVariable(Output.of(pppMaximumPayloadVariable));
        }

        /**
         * @param qosAdaptiveBandwidthDownstream Adaptive QoS default downstream bandwidth
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthDownstream(@Nullable Output<Integer> qosAdaptiveBandwidthDownstream) {
            $.qosAdaptiveBandwidthDownstream = qosAdaptiveBandwidthDownstream;
            return this;
        }

        /**
         * @param qosAdaptiveBandwidthDownstream Adaptive QoS default downstream bandwidth
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthDownstream(Integer qosAdaptiveBandwidthDownstream) {
            return qosAdaptiveBandwidthDownstream(Output.of(qosAdaptiveBandwidthDownstream));
        }

        /**
         * @param qosAdaptiveBandwidthDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthDownstreamVariable(@Nullable Output<String> qosAdaptiveBandwidthDownstreamVariable) {
            $.qosAdaptiveBandwidthDownstreamVariable = qosAdaptiveBandwidthDownstreamVariable;
            return this;
        }

        /**
         * @param qosAdaptiveBandwidthDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthDownstreamVariable(String qosAdaptiveBandwidthDownstreamVariable) {
            return qosAdaptiveBandwidthDownstreamVariable(Output.of(qosAdaptiveBandwidthDownstreamVariable));
        }

        /**
         * @param qosAdaptiveBandwidthUpstream Adaptive QoS default upstream bandwidth
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthUpstream(@Nullable Output<Integer> qosAdaptiveBandwidthUpstream) {
            $.qosAdaptiveBandwidthUpstream = qosAdaptiveBandwidthUpstream;
            return this;
        }

        /**
         * @param qosAdaptiveBandwidthUpstream Adaptive QoS default upstream bandwidth
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthUpstream(Integer qosAdaptiveBandwidthUpstream) {
            return qosAdaptiveBandwidthUpstream(Output.of(qosAdaptiveBandwidthUpstream));
        }

        /**
         * @param qosAdaptiveBandwidthUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthUpstreamVariable(@Nullable Output<String> qosAdaptiveBandwidthUpstreamVariable) {
            $.qosAdaptiveBandwidthUpstreamVariable = qosAdaptiveBandwidthUpstreamVariable;
            return this;
        }

        /**
         * @param qosAdaptiveBandwidthUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthUpstreamVariable(String qosAdaptiveBandwidthUpstreamVariable) {
            return qosAdaptiveBandwidthUpstreamVariable(Output.of(qosAdaptiveBandwidthUpstreamVariable));
        }

        /**
         * @param qosAdaptiveMaxDownstream Downstream max bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxDownstream(@Nullable Output<Integer> qosAdaptiveMaxDownstream) {
            $.qosAdaptiveMaxDownstream = qosAdaptiveMaxDownstream;
            return this;
        }

        /**
         * @param qosAdaptiveMaxDownstream Downstream max bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxDownstream(Integer qosAdaptiveMaxDownstream) {
            return qosAdaptiveMaxDownstream(Output.of(qosAdaptiveMaxDownstream));
        }

        /**
         * @param qosAdaptiveMaxDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxDownstreamVariable(@Nullable Output<String> qosAdaptiveMaxDownstreamVariable) {
            $.qosAdaptiveMaxDownstreamVariable = qosAdaptiveMaxDownstreamVariable;
            return this;
        }

        /**
         * @param qosAdaptiveMaxDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxDownstreamVariable(String qosAdaptiveMaxDownstreamVariable) {
            return qosAdaptiveMaxDownstreamVariable(Output.of(qosAdaptiveMaxDownstreamVariable));
        }

        /**
         * @param qosAdaptiveMaxUpstream Upstream max bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxUpstream(@Nullable Output<Integer> qosAdaptiveMaxUpstream) {
            $.qosAdaptiveMaxUpstream = qosAdaptiveMaxUpstream;
            return this;
        }

        /**
         * @param qosAdaptiveMaxUpstream Upstream max bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxUpstream(Integer qosAdaptiveMaxUpstream) {
            return qosAdaptiveMaxUpstream(Output.of(qosAdaptiveMaxUpstream));
        }

        /**
         * @param qosAdaptiveMaxUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxUpstreamVariable(@Nullable Output<String> qosAdaptiveMaxUpstreamVariable) {
            $.qosAdaptiveMaxUpstreamVariable = qosAdaptiveMaxUpstreamVariable;
            return this;
        }

        /**
         * @param qosAdaptiveMaxUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxUpstreamVariable(String qosAdaptiveMaxUpstreamVariable) {
            return qosAdaptiveMaxUpstreamVariable(Output.of(qosAdaptiveMaxUpstreamVariable));
        }

        /**
         * @param qosAdaptiveMinDownstream Downstream min bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinDownstream(@Nullable Output<Integer> qosAdaptiveMinDownstream) {
            $.qosAdaptiveMinDownstream = qosAdaptiveMinDownstream;
            return this;
        }

        /**
         * @param qosAdaptiveMinDownstream Downstream min bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinDownstream(Integer qosAdaptiveMinDownstream) {
            return qosAdaptiveMinDownstream(Output.of(qosAdaptiveMinDownstream));
        }

        /**
         * @param qosAdaptiveMinDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinDownstreamVariable(@Nullable Output<String> qosAdaptiveMinDownstreamVariable) {
            $.qosAdaptiveMinDownstreamVariable = qosAdaptiveMinDownstreamVariable;
            return this;
        }

        /**
         * @param qosAdaptiveMinDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinDownstreamVariable(String qosAdaptiveMinDownstreamVariable) {
            return qosAdaptiveMinDownstreamVariable(Output.of(qosAdaptiveMinDownstreamVariable));
        }

        /**
         * @param qosAdaptiveMinUpstream Upstream min bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinUpstream(@Nullable Output<Integer> qosAdaptiveMinUpstream) {
            $.qosAdaptiveMinUpstream = qosAdaptiveMinUpstream;
            return this;
        }

        /**
         * @param qosAdaptiveMinUpstream Upstream min bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinUpstream(Integer qosAdaptiveMinUpstream) {
            return qosAdaptiveMinUpstream(Output.of(qosAdaptiveMinUpstream));
        }

        /**
         * @param qosAdaptiveMinUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinUpstreamVariable(@Nullable Output<String> qosAdaptiveMinUpstreamVariable) {
            $.qosAdaptiveMinUpstreamVariable = qosAdaptiveMinUpstreamVariable;
            return this;
        }

        /**
         * @param qosAdaptiveMinUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinUpstreamVariable(String qosAdaptiveMinUpstreamVariable) {
            return qosAdaptiveMinUpstreamVariable(Output.of(qosAdaptiveMinUpstreamVariable));
        }

        /**
         * @param qosAdaptivePeriod Periodic timer for adaptive QoS in minutes
         *   - Range: `1`-`720`
         *   - Default value: `15`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptivePeriod(@Nullable Output<Integer> qosAdaptivePeriod) {
            $.qosAdaptivePeriod = qosAdaptivePeriod;
            return this;
        }

        /**
         * @param qosAdaptivePeriod Periodic timer for adaptive QoS in minutes
         *   - Range: `1`-`720`
         *   - Default value: `15`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptivePeriod(Integer qosAdaptivePeriod) {
            return qosAdaptivePeriod(Output.of(qosAdaptivePeriod));
        }

        /**
         * @param qosAdaptivePeriodVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptivePeriodVariable(@Nullable Output<String> qosAdaptivePeriodVariable) {
            $.qosAdaptivePeriodVariable = qosAdaptivePeriodVariable;
            return this;
        }

        /**
         * @param qosAdaptivePeriodVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptivePeriodVariable(String qosAdaptivePeriodVariable) {
            return qosAdaptivePeriodVariable(Output.of(qosAdaptivePeriodVariable));
        }

        /**
         * @param qosMap Name of QoS map
         * 
         * @return builder
         * 
         */
        public Builder qosMap(@Nullable Output<String> qosMap) {
            $.qosMap = qosMap;
            return this;
        }

        /**
         * @param qosMap Name of QoS map
         * 
         * @return builder
         * 
         */
        public Builder qosMap(String qosMap) {
            return qosMap(Output.of(qosMap));
        }

        /**
         * @param qosMapVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosMapVariable(@Nullable Output<String> qosMapVariable) {
            $.qosMapVariable = qosMapVariable;
            return this;
        }

        /**
         * @param qosMapVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosMapVariable(String qosMapVariable) {
            return qosMapVariable(Output.of(qosMapVariable));
        }

        /**
         * @param qosMapVpn Name of VPN QoS map
         * 
         * @return builder
         * 
         */
        public Builder qosMapVpn(@Nullable Output<String> qosMapVpn) {
            $.qosMapVpn = qosMapVpn;
            return this;
        }

        /**
         * @param qosMapVpn Name of VPN QoS map
         * 
         * @return builder
         * 
         */
        public Builder qosMapVpn(String qosMapVpn) {
            return qosMapVpn(Output.of(qosMapVpn));
        }

        /**
         * @param qosMapVpnVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosMapVpnVariable(@Nullable Output<String> qosMapVpnVariable) {
            $.qosMapVpnVariable = qosMapVpnVariable;
            return this;
        }

        /**
         * @param qosMapVpnVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosMapVpnVariable(String qosMapVpnVariable) {
            return qosMapVpnVariable(Output.of(qosMapVpnVariable));
        }

        /**
         * @param secondaryRegion Enable secondary region
         *   - Choices: `off`, `secondary-only`, `secondary-shared`
         *   - Default value: `off`
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegion(@Nullable Output<String> secondaryRegion) {
            $.secondaryRegion = secondaryRegion;
            return this;
        }

        /**
         * @param secondaryRegion Enable secondary region
         *   - Choices: `off`, `secondary-only`, `secondary-shared`
         *   - Default value: `off`
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegion(String secondaryRegion) {
            return secondaryRegion(Output.of(secondaryRegion));
        }

        /**
         * @param secondaryRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegionVariable(@Nullable Output<String> secondaryRegionVariable) {
            $.secondaryRegionVariable = secondaryRegionVariable;
            return this;
        }

        /**
         * @param secondaryRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegionVariable(String secondaryRegionVariable) {
            return secondaryRegionVariable(Output.of(secondaryRegionVariable));
        }

        /**
         * @param shapingRate 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder shapingRate(@Nullable Output<Integer> shapingRate) {
            $.shapingRate = shapingRate;
            return this;
        }

        /**
         * @param shapingRate 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder shapingRate(Integer shapingRate) {
            return shapingRate(Output.of(shapingRate));
        }

        /**
         * @param shapingRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shapingRateVariable(@Nullable Output<String> shapingRateVariable) {
            $.shapingRateVariable = shapingRateVariable;
            return this;
        }

        /**
         * @param shapingRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shapingRateVariable(String shapingRateVariable) {
            return shapingRateVariable(Output.of(shapingRateVariable));
        }

        /**
         * @param shutdown Administrative state
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        /**
         * @param shutdown Administrative state
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(@Nullable Output<String> shutdownVariable) {
            $.shutdownVariable = shutdownVariable;
            return this;
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(String shutdownVariable) {
            return shutdownVariable(Output.of(shutdownVariable));
        }

        /**
         * @param tlocExtension Extends a local TLOC to a remote node only for vpn 0
         * 
         * @return builder
         * 
         */
        public Builder tlocExtension(@Nullable Output<String> tlocExtension) {
            $.tlocExtension = tlocExtension;
            return this;
        }

        /**
         * @param tlocExtension Extends a local TLOC to a remote node only for vpn 0
         * 
         * @return builder
         * 
         */
        public Builder tlocExtension(String tlocExtension) {
            return tlocExtension(Output.of(tlocExtension));
        }

        /**
         * @param tlocExtensionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tlocExtensionVariable(@Nullable Output<String> tlocExtensionVariable) {
            $.tlocExtensionVariable = tlocExtensionVariable;
            return this;
        }

        /**
         * @param tlocExtensionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tlocExtensionVariable(String tlocExtensionVariable) {
            return tlocExtensionVariable(Output.of(tlocExtensionVariable));
        }

        /**
         * @param trackerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerVariable(@Nullable Output<String> trackerVariable) {
            $.trackerVariable = trackerVariable;
            return this;
        }

        /**
         * @param trackerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerVariable(String trackerVariable) {
            return trackerVariable(Output.of(trackerVariable));
        }

        /**
         * @param trackers Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackers(@Nullable Output<List<String>> trackers) {
            $.trackers = trackers;
            return this;
        }

        /**
         * @param trackers Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackers(List<String> trackers) {
            return trackers(Output.of(trackers));
        }

        /**
         * @param trackers Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackers(String... trackers) {
            return trackers(List.of(trackers));
        }

        /**
         * @param tunnelInterfaceAllowAll Allow all traffic. Overrides all other allow-service options if allow-service all is set
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAll(@Nullable Output<Boolean> tunnelInterfaceAllowAll) {
            $.tunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowAll Allow all traffic. Overrides all other allow-service options if allow-service all is set
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAll(Boolean tunnelInterfaceAllowAll) {
            return tunnelInterfaceAllowAll(Output.of(tunnelInterfaceAllowAll));
        }

        /**
         * @param tunnelInterfaceAllowAllVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAllVariable(@Nullable Output<String> tunnelInterfaceAllowAllVariable) {
            $.tunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowAllVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAllVariable(String tunnelInterfaceAllowAllVariable) {
            return tunnelInterfaceAllowAllVariable(Output.of(tunnelInterfaceAllowAllVariable));
        }

        /**
         * @param tunnelInterfaceAllowBgp Allow/deny BGP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgp(@Nullable Output<Boolean> tunnelInterfaceAllowBgp) {
            $.tunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowBgp Allow/deny BGP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgp(Boolean tunnelInterfaceAllowBgp) {
            return tunnelInterfaceAllowBgp(Output.of(tunnelInterfaceAllowBgp));
        }

        /**
         * @param tunnelInterfaceAllowBgpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgpVariable(@Nullable Output<String> tunnelInterfaceAllowBgpVariable) {
            $.tunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowBgpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgpVariable(String tunnelInterfaceAllowBgpVariable) {
            return tunnelInterfaceAllowBgpVariable(Output.of(tunnelInterfaceAllowBgpVariable));
        }

        /**
         * @param tunnelInterfaceAllowDhcp Allow/Deny DHCP
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcp(@Nullable Output<Boolean> tunnelInterfaceAllowDhcp) {
            $.tunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDhcp Allow/Deny DHCP
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcp(Boolean tunnelInterfaceAllowDhcp) {
            return tunnelInterfaceAllowDhcp(Output.of(tunnelInterfaceAllowDhcp));
        }

        /**
         * @param tunnelInterfaceAllowDhcpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcpVariable(@Nullable Output<String> tunnelInterfaceAllowDhcpVariable) {
            $.tunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDhcpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcpVariable(String tunnelInterfaceAllowDhcpVariable) {
            return tunnelInterfaceAllowDhcpVariable(Output.of(tunnelInterfaceAllowDhcpVariable));
        }

        /**
         * @param tunnelInterfaceAllowDns Allow/Deny DNS
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDns(@Nullable Output<Boolean> tunnelInterfaceAllowDns) {
            $.tunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDns Allow/Deny DNS
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDns(Boolean tunnelInterfaceAllowDns) {
            return tunnelInterfaceAllowDns(Output.of(tunnelInterfaceAllowDns));
        }

        /**
         * @param tunnelInterfaceAllowDnsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDnsVariable(@Nullable Output<String> tunnelInterfaceAllowDnsVariable) {
            $.tunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDnsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDnsVariable(String tunnelInterfaceAllowDnsVariable) {
            return tunnelInterfaceAllowDnsVariable(Output.of(tunnelInterfaceAllowDnsVariable));
        }

        /**
         * @param tunnelInterfaceAllowHttps Allow/Deny Https
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttps(@Nullable Output<Boolean> tunnelInterfaceAllowHttps) {
            $.tunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowHttps Allow/Deny Https
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttps(Boolean tunnelInterfaceAllowHttps) {
            return tunnelInterfaceAllowHttps(Output.of(tunnelInterfaceAllowHttps));
        }

        /**
         * @param tunnelInterfaceAllowHttpsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttpsVariable(@Nullable Output<String> tunnelInterfaceAllowHttpsVariable) {
            $.tunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowHttpsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttpsVariable(String tunnelInterfaceAllowHttpsVariable) {
            return tunnelInterfaceAllowHttpsVariable(Output.of(tunnelInterfaceAllowHttpsVariable));
        }

        /**
         * @param tunnelInterfaceAllowIcmp Allow/Deny ICMP
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmp(@Nullable Output<Boolean> tunnelInterfaceAllowIcmp) {
            $.tunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowIcmp Allow/Deny ICMP
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmp(Boolean tunnelInterfaceAllowIcmp) {
            return tunnelInterfaceAllowIcmp(Output.of(tunnelInterfaceAllowIcmp));
        }

        /**
         * @param tunnelInterfaceAllowIcmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmpVariable(@Nullable Output<String> tunnelInterfaceAllowIcmpVariable) {
            $.tunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowIcmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmpVariable(String tunnelInterfaceAllowIcmpVariable) {
            return tunnelInterfaceAllowIcmpVariable(Output.of(tunnelInterfaceAllowIcmpVariable));
        }

        /**
         * @param tunnelInterfaceAllowNetconf Allow/Deny NETCONF
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconf(@Nullable Output<Boolean> tunnelInterfaceAllowNetconf) {
            $.tunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNetconf Allow/Deny NETCONF
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconf(Boolean tunnelInterfaceAllowNetconf) {
            return tunnelInterfaceAllowNetconf(Output.of(tunnelInterfaceAllowNetconf));
        }

        /**
         * @param tunnelInterfaceAllowNetconfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconfVariable(@Nullable Output<String> tunnelInterfaceAllowNetconfVariable) {
            $.tunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNetconfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconfVariable(String tunnelInterfaceAllowNetconfVariable) {
            return tunnelInterfaceAllowNetconfVariable(Output.of(tunnelInterfaceAllowNetconfVariable));
        }

        /**
         * @param tunnelInterfaceAllowNtp Allow/Deny NTP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtp(@Nullable Output<Boolean> tunnelInterfaceAllowNtp) {
            $.tunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNtp Allow/Deny NTP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtp(Boolean tunnelInterfaceAllowNtp) {
            return tunnelInterfaceAllowNtp(Output.of(tunnelInterfaceAllowNtp));
        }

        /**
         * @param tunnelInterfaceAllowNtpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtpVariable(@Nullable Output<String> tunnelInterfaceAllowNtpVariable) {
            $.tunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNtpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtpVariable(String tunnelInterfaceAllowNtpVariable) {
            return tunnelInterfaceAllowNtpVariable(Output.of(tunnelInterfaceAllowNtpVariable));
        }

        /**
         * @param tunnelInterfaceAllowOspf Allow/Deny OSPF
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspf(@Nullable Output<Boolean> tunnelInterfaceAllowOspf) {
            $.tunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowOspf Allow/Deny OSPF
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspf(Boolean tunnelInterfaceAllowOspf) {
            return tunnelInterfaceAllowOspf(Output.of(tunnelInterfaceAllowOspf));
        }

        /**
         * @param tunnelInterfaceAllowOspfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspfVariable(@Nullable Output<String> tunnelInterfaceAllowOspfVariable) {
            $.tunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowOspfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspfVariable(String tunnelInterfaceAllowOspfVariable) {
            return tunnelInterfaceAllowOspfVariable(Output.of(tunnelInterfaceAllowOspfVariable));
        }

        /**
         * @param tunnelInterfaceAllowSnmp Allow/Deny SNMP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmp(@Nullable Output<Boolean> tunnelInterfaceAllowSnmp) {
            $.tunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSnmp Allow/Deny SNMP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmp(Boolean tunnelInterfaceAllowSnmp) {
            return tunnelInterfaceAllowSnmp(Output.of(tunnelInterfaceAllowSnmp));
        }

        /**
         * @param tunnelInterfaceAllowSnmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmpVariable(@Nullable Output<String> tunnelInterfaceAllowSnmpVariable) {
            $.tunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSnmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmpVariable(String tunnelInterfaceAllowSnmpVariable) {
            return tunnelInterfaceAllowSnmpVariable(Output.of(tunnelInterfaceAllowSnmpVariable));
        }

        /**
         * @param tunnelInterfaceAllowSsh Allow/Deny SSH
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSsh(@Nullable Output<Boolean> tunnelInterfaceAllowSsh) {
            $.tunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSsh Allow/Deny SSH
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSsh(Boolean tunnelInterfaceAllowSsh) {
            return tunnelInterfaceAllowSsh(Output.of(tunnelInterfaceAllowSsh));
        }

        /**
         * @param tunnelInterfaceAllowSshVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSshVariable(@Nullable Output<String> tunnelInterfaceAllowSshVariable) {
            $.tunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSshVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSshVariable(String tunnelInterfaceAllowSshVariable) {
            return tunnelInterfaceAllowSshVariable(Output.of(tunnelInterfaceAllowSshVariable));
        }

        /**
         * @param tunnelInterfaceAllowStun Allow/Deny STUN
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStun(@Nullable Output<Boolean> tunnelInterfaceAllowStun) {
            $.tunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowStun Allow/Deny STUN
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStun(Boolean tunnelInterfaceAllowStun) {
            return tunnelInterfaceAllowStun(Output.of(tunnelInterfaceAllowStun));
        }

        /**
         * @param tunnelInterfaceAllowStunVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStunVariable(@Nullable Output<String> tunnelInterfaceAllowStunVariable) {
            $.tunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowStunVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStunVariable(String tunnelInterfaceAllowStunVariable) {
            return tunnelInterfaceAllowStunVariable(Output.of(tunnelInterfaceAllowStunVariable));
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnel Bind loopback tunnel interface to a physical interface
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnel(@Nullable Output<String> tunnelInterfaceBindLoopbackTunnel) {
            $.tunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            return this;
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnel Bind loopback tunnel interface to a physical interface
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnel(String tunnelInterfaceBindLoopbackTunnel) {
            return tunnelInterfaceBindLoopbackTunnel(Output.of(tunnelInterfaceBindLoopbackTunnel));
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnelVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnelVariable(@Nullable Output<String> tunnelInterfaceBindLoopbackTunnelVariable) {
            $.tunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnelVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnelVariable(String tunnelInterfaceBindLoopbackTunnelVariable) {
            return tunnelInterfaceBindLoopbackTunnelVariable(Output.of(tunnelInterfaceBindLoopbackTunnelVariable));
        }

        /**
         * @param tunnelInterfaceBorder Set TLOC as border TLOC
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorder(@Nullable Output<Boolean> tunnelInterfaceBorder) {
            $.tunnelInterfaceBorder = tunnelInterfaceBorder;
            return this;
        }

        /**
         * @param tunnelInterfaceBorder Set TLOC as border TLOC
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorder(Boolean tunnelInterfaceBorder) {
            return tunnelInterfaceBorder(Output.of(tunnelInterfaceBorder));
        }

        /**
         * @param tunnelInterfaceBorderVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorderVariable(@Nullable Output<String> tunnelInterfaceBorderVariable) {
            $.tunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceBorderVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorderVariable(String tunnelInterfaceBorderVariable) {
            return tunnelInterfaceBorderVariable(Output.of(tunnelInterfaceBorderVariable));
        }

        /**
         * @param tunnelInterfaceCarrier Set carrier for TLOC
         *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
         *   - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrier(@Nullable Output<String> tunnelInterfaceCarrier) {
            $.tunnelInterfaceCarrier = tunnelInterfaceCarrier;
            return this;
        }

        /**
         * @param tunnelInterfaceCarrier Set carrier for TLOC
         *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
         *   - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrier(String tunnelInterfaceCarrier) {
            return tunnelInterfaceCarrier(Output.of(tunnelInterfaceCarrier));
        }

        /**
         * @param tunnelInterfaceCarrierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrierVariable(@Nullable Output<String> tunnelInterfaceCarrierVariable) {
            $.tunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceCarrierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrierVariable(String tunnelInterfaceCarrierVariable) {
            return tunnelInterfaceCarrierVariable(Output.of(tunnelInterfaceCarrierVariable));
        }

        /**
         * @param tunnelInterfaceClearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragment(@Nullable Output<Boolean> tunnelInterfaceClearDontFragment) {
            $.tunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            return this;
        }

        /**
         * @param tunnelInterfaceClearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragment(Boolean tunnelInterfaceClearDontFragment) {
            return tunnelInterfaceClearDontFragment(Output.of(tunnelInterfaceClearDontFragment));
        }

        /**
         * @param tunnelInterfaceClearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragmentVariable(@Nullable Output<String> tunnelInterfaceClearDontFragmentVariable) {
            $.tunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceClearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragmentVariable(String tunnelInterfaceClearDontFragmentVariable) {
            return tunnelInterfaceClearDontFragmentVariable(Output.of(tunnelInterfaceClearDontFragmentVariable));
        }

        /**
         * @param tunnelInterfaceColor Set color for TLOC
         *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
         *   - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColor(@Nullable Output<String> tunnelInterfaceColor) {
            $.tunnelInterfaceColor = tunnelInterfaceColor;
            return this;
        }

        /**
         * @param tunnelInterfaceColor Set color for TLOC
         *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
         *   - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColor(String tunnelInterfaceColor) {
            return tunnelInterfaceColor(Output.of(tunnelInterfaceColor));
        }

        /**
         * @param tunnelInterfaceColorRestrict Restrict this TLOC behavior
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorRestrict(@Nullable Output<Boolean> tunnelInterfaceColorRestrict) {
            $.tunnelInterfaceColorRestrict = tunnelInterfaceColorRestrict;
            return this;
        }

        /**
         * @param tunnelInterfaceColorRestrict Restrict this TLOC behavior
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorRestrict(Boolean tunnelInterfaceColorRestrict) {
            return tunnelInterfaceColorRestrict(Output.of(tunnelInterfaceColorRestrict));
        }

        /**
         * @param tunnelInterfaceColorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorVariable(@Nullable Output<String> tunnelInterfaceColorVariable) {
            $.tunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceColorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorVariable(String tunnelInterfaceColorVariable) {
            return tunnelInterfaceColorVariable(Output.of(tunnelInterfaceColorVariable));
        }

        /**
         * @param tunnelInterfaceControlConnections Allow Control Connection
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceControlConnections(@Nullable Output<Boolean> tunnelInterfaceControlConnections) {
            $.tunnelInterfaceControlConnections = tunnelInterfaceControlConnections;
            return this;
        }

        /**
         * @param tunnelInterfaceControlConnections Allow Control Connection
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceControlConnections(Boolean tunnelInterfaceControlConnections) {
            return tunnelInterfaceControlConnections(Output.of(tunnelInterfaceControlConnections));
        }

        /**
         * @param tunnelInterfaceControlConnectionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceControlConnectionsVariable(@Nullable Output<String> tunnelInterfaceControlConnectionsVariable) {
            $.tunnelInterfaceControlConnectionsVariable = tunnelInterfaceControlConnectionsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceControlConnectionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceControlConnectionsVariable(String tunnelInterfaceControlConnectionsVariable) {
            return tunnelInterfaceControlConnectionsVariable(Output.of(tunnelInterfaceControlConnectionsVariable));
        }

        /**
         * @param tunnelInterfaceEncapsulations Encapsulation for TLOC
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceEncapsulations(@Nullable Output<List<VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs>> tunnelInterfaceEncapsulations) {
            $.tunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            return this;
        }

        /**
         * @param tunnelInterfaceEncapsulations Encapsulation for TLOC
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceEncapsulations(List<VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs> tunnelInterfaceEncapsulations) {
            return tunnelInterfaceEncapsulations(Output.of(tunnelInterfaceEncapsulations));
        }

        /**
         * @param tunnelInterfaceEncapsulations Encapsulation for TLOC
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceEncapsulations(VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs... tunnelInterfaceEncapsulations) {
            return tunnelInterfaceEncapsulations(List.of(tunnelInterfaceEncapsulations));
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupListVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupListVariable(@Nullable Output<String> tunnelInterfaceExcludeControllerGroupListVariable) {
            $.tunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupListVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupListVariable(String tunnelInterfaceExcludeControllerGroupListVariable) {
            return tunnelInterfaceExcludeControllerGroupListVariable(Output.of(tunnelInterfaceExcludeControllerGroupListVariable));
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupLists Exclude the following controller groups defined in this list
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupLists(@Nullable Output<List<Integer>> tunnelInterfaceExcludeControllerGroupLists) {
            $.tunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            return this;
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupLists Exclude the following controller groups defined in this list
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupLists(List<Integer> tunnelInterfaceExcludeControllerGroupLists) {
            return tunnelInterfaceExcludeControllerGroupLists(Output.of(tunnelInterfaceExcludeControllerGroupLists));
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupLists Exclude the following controller groups defined in this list
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupLists(Integer... tunnelInterfaceExcludeControllerGroupLists) {
            return tunnelInterfaceExcludeControllerGroupLists(List.of(tunnelInterfaceExcludeControllerGroupLists));
        }

        /**
         * @param tunnelInterfaceGroups List of groups
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroups(@Nullable Output<List<Integer>> tunnelInterfaceGroups) {
            $.tunnelInterfaceGroups = tunnelInterfaceGroups;
            return this;
        }

        /**
         * @param tunnelInterfaceGroups List of groups
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroups(List<Integer> tunnelInterfaceGroups) {
            return tunnelInterfaceGroups(Output.of(tunnelInterfaceGroups));
        }

        /**
         * @param tunnelInterfaceGroups List of groups
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroups(Integer... tunnelInterfaceGroups) {
            return tunnelInterfaceGroups(List.of(tunnelInterfaceGroups));
        }

        /**
         * @param tunnelInterfaceGroupsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroupsVariable(@Nullable Output<String> tunnelInterfaceGroupsVariable) {
            $.tunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceGroupsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroupsVariable(String tunnelInterfaceGroupsVariable) {
            return tunnelInterfaceGroupsVariable(Output.of(tunnelInterfaceGroupsVariable));
        }

        /**
         * @param tunnelInterfaceHelloInterval Set time period of control hello packets &lt;100..600000&gt; milli seconds
         *   - Range: `100`-`600000`
         *   - Default value: `1000`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloInterval(@Nullable Output<Integer> tunnelInterfaceHelloInterval) {
            $.tunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloInterval Set time period of control hello packets &lt;100..600000&gt; milli seconds
         *   - Range: `100`-`600000`
         *   - Default value: `1000`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloInterval(Integer tunnelInterfaceHelloInterval) {
            return tunnelInterfaceHelloInterval(Output.of(tunnelInterfaceHelloInterval));
        }

        /**
         * @param tunnelInterfaceHelloIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloIntervalVariable(@Nullable Output<String> tunnelInterfaceHelloIntervalVariable) {
            $.tunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloIntervalVariable(String tunnelInterfaceHelloIntervalVariable) {
            return tunnelInterfaceHelloIntervalVariable(Output.of(tunnelInterfaceHelloIntervalVariable));
        }

        /**
         * @param tunnelInterfaceHelloTolerance Set tolerance of control hello packets &lt;12..6000&gt; seconds
         *   - Range: `12`-`6000`
         *   - Default value: `12`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloTolerance(@Nullable Output<Integer> tunnelInterfaceHelloTolerance) {
            $.tunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloTolerance Set tolerance of control hello packets &lt;12..6000&gt; seconds
         *   - Range: `12`-`6000`
         *   - Default value: `12`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloTolerance(Integer tunnelInterfaceHelloTolerance) {
            return tunnelInterfaceHelloTolerance(Output.of(tunnelInterfaceHelloTolerance));
        }

        /**
         * @param tunnelInterfaceHelloToleranceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloToleranceVariable(@Nullable Output<String> tunnelInterfaceHelloToleranceVariable) {
            $.tunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloToleranceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloToleranceVariable(String tunnelInterfaceHelloToleranceVariable) {
            return tunnelInterfaceHelloToleranceVariable(Output.of(tunnelInterfaceHelloToleranceVariable));
        }

        /**
         * @param tunnelInterfaceLastResortCircuit Set TLOC as last resort
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuit(@Nullable Output<Boolean> tunnelInterfaceLastResortCircuit) {
            $.tunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            return this;
        }

        /**
         * @param tunnelInterfaceLastResortCircuit Set TLOC as last resort
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuit(Boolean tunnelInterfaceLastResortCircuit) {
            return tunnelInterfaceLastResortCircuit(Output.of(tunnelInterfaceLastResortCircuit));
        }

        /**
         * @param tunnelInterfaceLastResortCircuitVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuitVariable(@Nullable Output<String> tunnelInterfaceLastResortCircuitVariable) {
            $.tunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceLastResortCircuitVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuitVariable(String tunnelInterfaceLastResortCircuitVariable) {
            return tunnelInterfaceLastResortCircuitVariable(Output.of(tunnelInterfaceLastResortCircuitVariable));
        }

        /**
         * @param tunnelInterfaceLowBandwidthLink Set the interface as a low-bandwidth circuit
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLink(@Nullable Output<Boolean> tunnelInterfaceLowBandwidthLink) {
            $.tunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            return this;
        }

        /**
         * @param tunnelInterfaceLowBandwidthLink Set the interface as a low-bandwidth circuit
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLink(Boolean tunnelInterfaceLowBandwidthLink) {
            return tunnelInterfaceLowBandwidthLink(Output.of(tunnelInterfaceLowBandwidthLink));
        }

        /**
         * @param tunnelInterfaceLowBandwidthLinkVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLinkVariable(@Nullable Output<String> tunnelInterfaceLowBandwidthLinkVariable) {
            $.tunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceLowBandwidthLinkVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLinkVariable(String tunnelInterfaceLowBandwidthLinkVariable) {
            return tunnelInterfaceLowBandwidthLinkVariable(Output.of(tunnelInterfaceLowBandwidthLinkVariable));
        }

        /**
         * @param tunnelInterfaceMaxControlConnections Set the maximum number of control connections for this TLOC
         *   - Range: `0`-`8`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceMaxControlConnections(@Nullable Output<Integer> tunnelInterfaceMaxControlConnections) {
            $.tunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            return this;
        }

        /**
         * @param tunnelInterfaceMaxControlConnections Set the maximum number of control connections for this TLOC
         *   - Range: `0`-`8`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceMaxControlConnections(Integer tunnelInterfaceMaxControlConnections) {
            return tunnelInterfaceMaxControlConnections(Output.of(tunnelInterfaceMaxControlConnections));
        }

        /**
         * @param tunnelInterfaceMaxControlConnectionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceMaxControlConnectionsVariable(@Nullable Output<String> tunnelInterfaceMaxControlConnectionsVariable) {
            $.tunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceMaxControlConnectionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceMaxControlConnectionsVariable(String tunnelInterfaceMaxControlConnectionsVariable) {
            return tunnelInterfaceMaxControlConnectionsVariable(Output.of(tunnelInterfaceMaxControlConnectionsVariable));
        }

        /**
         * @param tunnelInterfaceNatRefreshInterval Set time period of nat refresh packets &lt;1...60&gt; seconds
         *   - Range: `1`-`60`
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshInterval(@Nullable Output<Integer> tunnelInterfaceNatRefreshInterval) {
            $.tunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            return this;
        }

        /**
         * @param tunnelInterfaceNatRefreshInterval Set time period of nat refresh packets &lt;1...60&gt; seconds
         *   - Range: `1`-`60`
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshInterval(Integer tunnelInterfaceNatRefreshInterval) {
            return tunnelInterfaceNatRefreshInterval(Output.of(tunnelInterfaceNatRefreshInterval));
        }

        /**
         * @param tunnelInterfaceNatRefreshIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshIntervalVariable(@Nullable Output<String> tunnelInterfaceNatRefreshIntervalVariable) {
            $.tunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceNatRefreshIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshIntervalVariable(String tunnelInterfaceNatRefreshIntervalVariable) {
            return tunnelInterfaceNatRefreshIntervalVariable(Output.of(tunnelInterfaceNatRefreshIntervalVariable));
        }

        /**
         * @param tunnelInterfaceNetworkBroadcast Accept and respond to network-prefix-directed broadcasts)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNetworkBroadcast(@Nullable Output<Boolean> tunnelInterfaceNetworkBroadcast) {
            $.tunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            return this;
        }

        /**
         * @param tunnelInterfaceNetworkBroadcast Accept and respond to network-prefix-directed broadcasts)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNetworkBroadcast(Boolean tunnelInterfaceNetworkBroadcast) {
            return tunnelInterfaceNetworkBroadcast(Output.of(tunnelInterfaceNetworkBroadcast));
        }

        /**
         * @param tunnelInterfaceNetworkBroadcastVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNetworkBroadcastVariable(@Nullable Output<String> tunnelInterfaceNetworkBroadcastVariable) {
            $.tunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceNetworkBroadcastVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNetworkBroadcastVariable(String tunnelInterfaceNetworkBroadcastVariable) {
            return tunnelInterfaceNetworkBroadcastVariable(Output.of(tunnelInterfaceNetworkBroadcastVariable));
        }

        /**
         * @param tunnelInterfacePortHop Disallow port hopping on the tunnel interface
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHop(@Nullable Output<Boolean> tunnelInterfacePortHop) {
            $.tunnelInterfacePortHop = tunnelInterfacePortHop;
            return this;
        }

        /**
         * @param tunnelInterfacePortHop Disallow port hopping on the tunnel interface
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHop(Boolean tunnelInterfacePortHop) {
            return tunnelInterfacePortHop(Output.of(tunnelInterfacePortHop));
        }

        /**
         * @param tunnelInterfacePortHopVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHopVariable(@Nullable Output<String> tunnelInterfacePortHopVariable) {
            $.tunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            return this;
        }

        /**
         * @param tunnelInterfacePortHopVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHopVariable(String tunnelInterfacePortHopVariable) {
            return tunnelInterfacePortHopVariable(Output.of(tunnelInterfacePortHopVariable));
        }

        /**
         * @param tunnelInterfaceTunnelTcpMss Tunnel TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMss(@Nullable Output<Integer> tunnelInterfaceTunnelTcpMss) {
            $.tunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            return this;
        }

        /**
         * @param tunnelInterfaceTunnelTcpMss Tunnel TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMss(Integer tunnelInterfaceTunnelTcpMss) {
            return tunnelInterfaceTunnelTcpMss(Output.of(tunnelInterfaceTunnelTcpMss));
        }

        /**
         * @param tunnelInterfaceTunnelTcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMssVariable(@Nullable Output<String> tunnelInterfaceTunnelTcpMssVariable) {
            $.tunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceTunnelTcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMssVariable(String tunnelInterfaceTunnelTcpMssVariable) {
            return tunnelInterfaceTunnelTcpMssVariable(Output.of(tunnelInterfaceTunnelTcpMssVariable));
        }

        /**
         * @param tunnelInterfaceVbondAsStunServer Put this wan interface in STUN mode only
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServer(@Nullable Output<Boolean> tunnelInterfaceVbondAsStunServer) {
            $.tunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            return this;
        }

        /**
         * @param tunnelInterfaceVbondAsStunServer Put this wan interface in STUN mode only
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServer(Boolean tunnelInterfaceVbondAsStunServer) {
            return tunnelInterfaceVbondAsStunServer(Output.of(tunnelInterfaceVbondAsStunServer));
        }

        /**
         * @param tunnelInterfaceVbondAsStunServerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServerVariable(@Nullable Output<String> tunnelInterfaceVbondAsStunServerVariable) {
            $.tunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceVbondAsStunServerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServerVariable(String tunnelInterfaceVbondAsStunServerVariable) {
            return tunnelInterfaceVbondAsStunServerVariable(Output.of(tunnelInterfaceVbondAsStunServerVariable));
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreference Set interface preference for control connection to vManage &lt;0..8&gt;
         *   - Range: `0`-`8`
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreference(@Nullable Output<Integer> tunnelInterfaceVmanageConnectionPreference) {
            $.tunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            return this;
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreference Set interface preference for control connection to vManage &lt;0..8&gt;
         *   - Range: `0`-`8`
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreference(Integer tunnelInterfaceVmanageConnectionPreference) {
            return tunnelInterfaceVmanageConnectionPreference(Output.of(tunnelInterfaceVmanageConnectionPreference));
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreferenceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreferenceVariable(@Nullable Output<String> tunnelInterfaceVmanageConnectionPreferenceVariable) {
            $.tunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreferenceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreferenceVariable(String tunnelInterfaceVmanageConnectionPreferenceVariable) {
            return tunnelInterfaceVmanageConnectionPreferenceVariable(Output.of(tunnelInterfaceVmanageConnectionPreferenceVariable));
        }

        /**
         * @param tunnelQosMode Set tunnel QoS mode
         *   - Choices: `spoke`
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosMode(@Nullable Output<String> tunnelQosMode) {
            $.tunnelQosMode = tunnelQosMode;
            return this;
        }

        /**
         * @param tunnelQosMode Set tunnel QoS mode
         *   - Choices: `spoke`
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosMode(String tunnelQosMode) {
            return tunnelQosMode(Output.of(tunnelQosMode));
        }

        /**
         * @param tunnelQosModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosModeVariable(@Nullable Output<String> tunnelQosModeVariable) {
            $.tunnelQosModeVariable = tunnelQosModeVariable;
            return this;
        }

        /**
         * @param tunnelQosModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosModeVariable(String tunnelQosModeVariable) {
            return tunnelQosModeVariable(Output.of(tunnelQosModeVariable));
        }

        /**
         * @param unnumberedLoopbackInterface Dialer IP Unnumbered Loopback interface name
         * 
         * @return builder
         * 
         */
        public Builder unnumberedLoopbackInterface(@Nullable Output<String> unnumberedLoopbackInterface) {
            $.unnumberedLoopbackInterface = unnumberedLoopbackInterface;
            return this;
        }

        /**
         * @param unnumberedLoopbackInterface Dialer IP Unnumbered Loopback interface name
         * 
         * @return builder
         * 
         */
        public Builder unnumberedLoopbackInterface(String unnumberedLoopbackInterface) {
            return unnumberedLoopbackInterface(Output.of(unnumberedLoopbackInterface));
        }

        /**
         * @param unnumberedLoopbackInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder unnumberedLoopbackInterfaceVariable(@Nullable Output<String> unnumberedLoopbackInterfaceVariable) {
            $.unnumberedLoopbackInterfaceVariable = unnumberedLoopbackInterfaceVariable;
            return this;
        }

        /**
         * @param unnumberedLoopbackInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder unnumberedLoopbackInterfaceVariable(String unnumberedLoopbackInterfaceVariable) {
            return unnumberedLoopbackInterfaceVariable(Output.of(unnumberedLoopbackInterfaceVariable));
        }

        /**
         * @param writeRule Name of rewrite rule
         * 
         * @return builder
         * 
         */
        public Builder writeRule(@Nullable Output<String> writeRule) {
            $.writeRule = writeRule;
            return this;
        }

        /**
         * @param writeRule Name of rewrite rule
         * 
         * @return builder
         * 
         */
        public Builder writeRule(String writeRule) {
            return writeRule(Output.of(writeRule));
        }

        /**
         * @param writeRuleVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder writeRuleVariable(@Nullable Output<String> writeRuleVariable) {
            $.writeRuleVariable = writeRuleVariable;
            return this;
        }

        /**
         * @param writeRuleVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder writeRuleVariable(String writeRuleVariable) {
            return writeRuleVariable(Output.of(writeRuleVariable));
        }

        public VpnInterfaceEthernetPppoeFeatureTemplateArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("VpnInterfaceEthernetPppoeFeatureTemplateArgs", "description");
            }
            if ($.deviceTypes == null) {
                throw new MissingRequiredPropertyException("VpnInterfaceEthernetPppoeFeatureTemplateArgs", "deviceTypes");
            }
            return $;
        }
    }

}
