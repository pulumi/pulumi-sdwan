// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CiscoVpnFeatureTemplateNat64Pool {
    /**
     * @return Ending IP address of NAT pool range
     * 
     */
    private @Nullable String endAddress;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String endAddressVariable;
    /**
     * @return Enable Route Leaking from Global VPN to this Service VPN
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean leakFromGlobal;
    /**
     * @return Select protocol for route leaking
     *   - Choices: `all`, `static`, `mobile`, `connected`, `rip`, `odr`
     * 
     */
    private @Nullable String leakFromGlobalProtocol;
    /**
     * @return Enable Route Leaking from this Service VPN to Global VPN
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean leakToGlobal;
    /**
     * @return NAT64 Pool name
     * 
     */
    private @Nullable String name;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private @Nullable Boolean optional;
    /**
     * @return NAT 64 Overload Option
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean overload;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String overloadVariable;
    /**
     * @return Starting IP address of NAT pool range
     * 
     */
    private @Nullable String startAddress;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String startAddressVariable;

    private CiscoVpnFeatureTemplateNat64Pool() {}
    /**
     * @return Ending IP address of NAT pool range
     * 
     */
    public Optional<String> endAddress() {
        return Optional.ofNullable(this.endAddress);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> endAddressVariable() {
        return Optional.ofNullable(this.endAddressVariable);
    }
    /**
     * @return Enable Route Leaking from Global VPN to this Service VPN
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> leakFromGlobal() {
        return Optional.ofNullable(this.leakFromGlobal);
    }
    /**
     * @return Select protocol for route leaking
     *   - Choices: `all`, `static`, `mobile`, `connected`, `rip`, `odr`
     * 
     */
    public Optional<String> leakFromGlobalProtocol() {
        return Optional.ofNullable(this.leakFromGlobalProtocol);
    }
    /**
     * @return Enable Route Leaking from this Service VPN to Global VPN
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> leakToGlobal() {
        return Optional.ofNullable(this.leakToGlobal);
    }
    /**
     * @return NAT64 Pool name
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Boolean> optional() {
        return Optional.ofNullable(this.optional);
    }
    /**
     * @return NAT 64 Overload Option
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> overload() {
        return Optional.ofNullable(this.overload);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> overloadVariable() {
        return Optional.ofNullable(this.overloadVariable);
    }
    /**
     * @return Starting IP address of NAT pool range
     * 
     */
    public Optional<String> startAddress() {
        return Optional.ofNullable(this.startAddress);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> startAddressVariable() {
        return Optional.ofNullable(this.startAddressVariable);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CiscoVpnFeatureTemplateNat64Pool defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String endAddress;
        private @Nullable String endAddressVariable;
        private @Nullable Boolean leakFromGlobal;
        private @Nullable String leakFromGlobalProtocol;
        private @Nullable Boolean leakToGlobal;
        private @Nullable String name;
        private @Nullable Boolean optional;
        private @Nullable Boolean overload;
        private @Nullable String overloadVariable;
        private @Nullable String startAddress;
        private @Nullable String startAddressVariable;
        public Builder() {}
        public Builder(CiscoVpnFeatureTemplateNat64Pool defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endAddress = defaults.endAddress;
    	      this.endAddressVariable = defaults.endAddressVariable;
    	      this.leakFromGlobal = defaults.leakFromGlobal;
    	      this.leakFromGlobalProtocol = defaults.leakFromGlobalProtocol;
    	      this.leakToGlobal = defaults.leakToGlobal;
    	      this.name = defaults.name;
    	      this.optional = defaults.optional;
    	      this.overload = defaults.overload;
    	      this.overloadVariable = defaults.overloadVariable;
    	      this.startAddress = defaults.startAddress;
    	      this.startAddressVariable = defaults.startAddressVariable;
        }

        @CustomType.Setter
        public Builder endAddress(@Nullable String endAddress) {

            this.endAddress = endAddress;
            return this;
        }
        @CustomType.Setter
        public Builder endAddressVariable(@Nullable String endAddressVariable) {

            this.endAddressVariable = endAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder leakFromGlobal(@Nullable Boolean leakFromGlobal) {

            this.leakFromGlobal = leakFromGlobal;
            return this;
        }
        @CustomType.Setter
        public Builder leakFromGlobalProtocol(@Nullable String leakFromGlobalProtocol) {

            this.leakFromGlobalProtocol = leakFromGlobalProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder leakToGlobal(@Nullable Boolean leakToGlobal) {

            this.leakToGlobal = leakToGlobal;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder optional(@Nullable Boolean optional) {

            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder overload(@Nullable Boolean overload) {

            this.overload = overload;
            return this;
        }
        @CustomType.Setter
        public Builder overloadVariable(@Nullable String overloadVariable) {

            this.overloadVariable = overloadVariable;
            return this;
        }
        @CustomType.Setter
        public Builder startAddress(@Nullable String startAddress) {

            this.startAddress = startAddress;
            return this;
        }
        @CustomType.Setter
        public Builder startAddressVariable(@Nullable String startAddressVariable) {

            this.startAddressVariable = startAddressVariable;
            return this;
        }
        public CiscoVpnFeatureTemplateNat64Pool build() {
            final var _resultValue = new CiscoVpnFeatureTemplateNat64Pool();
            _resultValue.endAddress = endAddress;
            _resultValue.endAddressVariable = endAddressVariable;
            _resultValue.leakFromGlobal = leakFromGlobal;
            _resultValue.leakFromGlobalProtocol = leakFromGlobalProtocol;
            _resultValue.leakToGlobal = leakToGlobal;
            _resultValue.name = name;
            _resultValue.optional = optional;
            _resultValue.overload = overload;
            _resultValue.overloadVariable = overloadVariable;
            _resultValue.startAddress = startAddress;
            _resultValue.startAddressVariable = startAddressVariable;
            return _resultValue;
        }
    }
}
