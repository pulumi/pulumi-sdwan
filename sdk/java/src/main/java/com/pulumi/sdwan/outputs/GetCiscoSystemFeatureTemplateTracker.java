// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoSystemFeatureTemplateTracker {
    /**
     * @return Type of grouping to be performed for tracker group
     * 
     */
    private String boolean_;
    /**
     * @return Variable name
     * 
     */
    private String booleanVariable;
    /**
     * @return Tracker member names separated by space
     * 
     */
    private List<String> elements;
    /**
     * @return Variable name
     * 
     */
    private String elementsVariable;
    /**
     * @return API url of endpoint
     * 
     */
    private String endpointApiUrl;
    /**
     * @return Variable name
     * 
     */
    private String endpointApiUrlVariable;
    /**
     * @return DNS name of endpoint
     * 
     */
    private String endpointDnsName;
    /**
     * @return Variable name
     * 
     */
    private String endpointDnsNameVariable;
    /**
     * @return IP address of endpoint
     * 
     */
    private String endpointIp;
    /**
     * @return Variable name
     * 
     */
    private String endpointIpVariable;
    /**
     * @return Probe interval \n\n seconds
     * 
     */
    private Integer interval;
    /**
     * @return Variable name
     * 
     */
    private String intervalVariable;
    /**
     * @return Probe failure multiplier \n\n failed attempts
     * 
     */
    private Integer multiplier;
    /**
     * @return Variable name
     * 
     */
    private String multiplierVariable;
    /**
     * @return Tracker name
     * 
     */
    private String name;
    /**
     * @return Variable name
     * 
     */
    private String nameVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Probe Timeout threshold \n\n milliseconds
     * 
     */
    private Integer threshold;
    /**
     * @return Variable name
     * 
     */
    private String thresholdVariable;
    /**
     * @return Default(Interface)
     * 
     */
    private String type;
    /**
     * @return Variable name
     * 
     */
    private String typeVariable;

    private GetCiscoSystemFeatureTemplateTracker() {}
    /**
     * @return Type of grouping to be performed for tracker group
     * 
     */
    public String boolean_() {
        return this.boolean_;
    }
    /**
     * @return Variable name
     * 
     */
    public String booleanVariable() {
        return this.booleanVariable;
    }
    /**
     * @return Tracker member names separated by space
     * 
     */
    public List<String> elements() {
        return this.elements;
    }
    /**
     * @return Variable name
     * 
     */
    public String elementsVariable() {
        return this.elementsVariable;
    }
    /**
     * @return API url of endpoint
     * 
     */
    public String endpointApiUrl() {
        return this.endpointApiUrl;
    }
    /**
     * @return Variable name
     * 
     */
    public String endpointApiUrlVariable() {
        return this.endpointApiUrlVariable;
    }
    /**
     * @return DNS name of endpoint
     * 
     */
    public String endpointDnsName() {
        return this.endpointDnsName;
    }
    /**
     * @return Variable name
     * 
     */
    public String endpointDnsNameVariable() {
        return this.endpointDnsNameVariable;
    }
    /**
     * @return IP address of endpoint
     * 
     */
    public String endpointIp() {
        return this.endpointIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String endpointIpVariable() {
        return this.endpointIpVariable;
    }
    /**
     * @return Probe interval \n\n seconds
     * 
     */
    public Integer interval() {
        return this.interval;
    }
    /**
     * @return Variable name
     * 
     */
    public String intervalVariable() {
        return this.intervalVariable;
    }
    /**
     * @return Probe failure multiplier \n\n failed attempts
     * 
     */
    public Integer multiplier() {
        return this.multiplier;
    }
    /**
     * @return Variable name
     * 
     */
    public String multiplierVariable() {
        return this.multiplierVariable;
    }
    /**
     * @return Tracker name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Variable name
     * 
     */
    public String nameVariable() {
        return this.nameVariable;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Probe Timeout threshold \n\n milliseconds
     * 
     */
    public Integer threshold() {
        return this.threshold;
    }
    /**
     * @return Variable name
     * 
     */
    public String thresholdVariable() {
        return this.thresholdVariable;
    }
    /**
     * @return Default(Interface)
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Variable name
     * 
     */
    public String typeVariable() {
        return this.typeVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoSystemFeatureTemplateTracker defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String boolean_;
        private String booleanVariable;
        private List<String> elements;
        private String elementsVariable;
        private String endpointApiUrl;
        private String endpointApiUrlVariable;
        private String endpointDnsName;
        private String endpointDnsNameVariable;
        private String endpointIp;
        private String endpointIpVariable;
        private Integer interval;
        private String intervalVariable;
        private Integer multiplier;
        private String multiplierVariable;
        private String name;
        private String nameVariable;
        private Boolean optional;
        private Integer threshold;
        private String thresholdVariable;
        private String type;
        private String typeVariable;
        public Builder() {}
        public Builder(GetCiscoSystemFeatureTemplateTracker defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.boolean_ = defaults.boolean_;
    	      this.booleanVariable = defaults.booleanVariable;
    	      this.elements = defaults.elements;
    	      this.elementsVariable = defaults.elementsVariable;
    	      this.endpointApiUrl = defaults.endpointApiUrl;
    	      this.endpointApiUrlVariable = defaults.endpointApiUrlVariable;
    	      this.endpointDnsName = defaults.endpointDnsName;
    	      this.endpointDnsNameVariable = defaults.endpointDnsNameVariable;
    	      this.endpointIp = defaults.endpointIp;
    	      this.endpointIpVariable = defaults.endpointIpVariable;
    	      this.interval = defaults.interval;
    	      this.intervalVariable = defaults.intervalVariable;
    	      this.multiplier = defaults.multiplier;
    	      this.multiplierVariable = defaults.multiplierVariable;
    	      this.name = defaults.name;
    	      this.nameVariable = defaults.nameVariable;
    	      this.optional = defaults.optional;
    	      this.threshold = defaults.threshold;
    	      this.thresholdVariable = defaults.thresholdVariable;
    	      this.type = defaults.type;
    	      this.typeVariable = defaults.typeVariable;
        }

        @CustomType.Setter("boolean")
        public Builder boolean_(String boolean_) {
            if (boolean_ == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "boolean_");
            }
            this.boolean_ = boolean_;
            return this;
        }
        @CustomType.Setter
        public Builder booleanVariable(String booleanVariable) {
            if (booleanVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "booleanVariable");
            }
            this.booleanVariable = booleanVariable;
            return this;
        }
        @CustomType.Setter
        public Builder elements(List<String> elements) {
            if (elements == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "elements");
            }
            this.elements = elements;
            return this;
        }
        public Builder elements(String... elements) {
            return elements(List.of(elements));
        }
        @CustomType.Setter
        public Builder elementsVariable(String elementsVariable) {
            if (elementsVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "elementsVariable");
            }
            this.elementsVariable = elementsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder endpointApiUrl(String endpointApiUrl) {
            if (endpointApiUrl == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "endpointApiUrl");
            }
            this.endpointApiUrl = endpointApiUrl;
            return this;
        }
        @CustomType.Setter
        public Builder endpointApiUrlVariable(String endpointApiUrlVariable) {
            if (endpointApiUrlVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "endpointApiUrlVariable");
            }
            this.endpointApiUrlVariable = endpointApiUrlVariable;
            return this;
        }
        @CustomType.Setter
        public Builder endpointDnsName(String endpointDnsName) {
            if (endpointDnsName == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "endpointDnsName");
            }
            this.endpointDnsName = endpointDnsName;
            return this;
        }
        @CustomType.Setter
        public Builder endpointDnsNameVariable(String endpointDnsNameVariable) {
            if (endpointDnsNameVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "endpointDnsNameVariable");
            }
            this.endpointDnsNameVariable = endpointDnsNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder endpointIp(String endpointIp) {
            if (endpointIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "endpointIp");
            }
            this.endpointIp = endpointIp;
            return this;
        }
        @CustomType.Setter
        public Builder endpointIpVariable(String endpointIpVariable) {
            if (endpointIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "endpointIpVariable");
            }
            this.endpointIpVariable = endpointIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interval(Integer interval) {
            if (interval == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "interval");
            }
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder intervalVariable(String intervalVariable) {
            if (intervalVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "intervalVariable");
            }
            this.intervalVariable = intervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder multiplier(Integer multiplier) {
            if (multiplier == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "multiplier");
            }
            this.multiplier = multiplier;
            return this;
        }
        @CustomType.Setter
        public Builder multiplierVariable(String multiplierVariable) {
            if (multiplierVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "multiplierVariable");
            }
            this.multiplierVariable = multiplierVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameVariable(String nameVariable) {
            if (nameVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "nameVariable");
            }
            this.nameVariable = nameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Integer threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder thresholdVariable(String thresholdVariable) {
            if (thresholdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "thresholdVariable");
            }
            this.thresholdVariable = thresholdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder typeVariable(String typeVariable) {
            if (typeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateTracker", "typeVariable");
            }
            this.typeVariable = typeVariable;
            return this;
        }
        public GetCiscoSystemFeatureTemplateTracker build() {
            final var _resultValue = new GetCiscoSystemFeatureTemplateTracker();
            _resultValue.boolean_ = boolean_;
            _resultValue.booleanVariable = booleanVariable;
            _resultValue.elements = elements;
            _resultValue.elementsVariable = elementsVariable;
            _resultValue.endpointApiUrl = endpointApiUrl;
            _resultValue.endpointApiUrlVariable = endpointApiUrlVariable;
            _resultValue.endpointDnsName = endpointDnsName;
            _resultValue.endpointDnsNameVariable = endpointDnsNameVariable;
            _resultValue.endpointIp = endpointIp;
            _resultValue.endpointIpVariable = endpointIpVariable;
            _resultValue.interval = interval;
            _resultValue.intervalVariable = intervalVariable;
            _resultValue.multiplier = multiplier;
            _resultValue.multiplierVariable = multiplierVariable;
            _resultValue.name = name;
            _resultValue.nameVariable = nameVariable;
            _resultValue.optional = optional;
            _resultValue.threshold = threshold;
            _resultValue.thresholdVariable = thresholdVariable;
            _resultValue.type = type;
            _resultValue.typeVariable = typeVariable;
            return _resultValue;
        }
    }
}
