// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CiscoTrustsecFeatureTemplateSxpConnection {
    /**
     * @return Configure Connection Maximum hold time &lt;0..65535&gt;
     *   - Range: `0`-`65535`
     *   - Default value: `0`
     * 
     */
    private @Nullable Integer maximumHoldTime;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String maximumHoldTimeVariable;
    /**
     * @return Configure Connection Minimum hold time &lt;0..65535&gt;
     *   - Range: `0`-`65535`
     *   - Default value: `0`
     * 
     */
    private @Nullable Integer minimumHoldTime;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String minimumHoldTimeVariable;
    /**
     * @return Define Mode of connection
     *   - Choices: `local`, `peer`
     *   - Default value: `local`
     * 
     */
    private @Nullable String mode;
    /**
     * @return Define Role of a device &lt;speaker/listener/both&gt;
     *   - Choices: `listener`, `speaker`, `both`
     *   - Default value: `speaker`
     * 
     */
    private @Nullable String modeType;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private @Nullable Boolean optional;
    /**
     * @return Configure SXP Peer IP address (IPv4)
     * 
     */
    private @Nullable String peerIp;
    /**
     * @return Define Preshared Key type
     *   - Choices: `default`, `key-chain`, `none`
     *   - Default value: `none`
     * 
     */
    private @Nullable String presharedKey;
    /**
     * @return Configure SXP Source IP address (IPv4)
     * 
     */
    private @Nullable String sourceIp;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String sourceIpVariable;
    /**
     * @return Configure Connection VPN (VRF) ID
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     * 
     */
    private @Nullable Integer vpnId;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String vpnIdVariable;

    private CiscoTrustsecFeatureTemplateSxpConnection() {}
    /**
     * @return Configure Connection Maximum hold time &lt;0..65535&gt;
     *   - Range: `0`-`65535`
     *   - Default value: `0`
     * 
     */
    public Optional<Integer> maximumHoldTime() {
        return Optional.ofNullable(this.maximumHoldTime);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> maximumHoldTimeVariable() {
        return Optional.ofNullable(this.maximumHoldTimeVariable);
    }
    /**
     * @return Configure Connection Minimum hold time &lt;0..65535&gt;
     *   - Range: `0`-`65535`
     *   - Default value: `0`
     * 
     */
    public Optional<Integer> minimumHoldTime() {
        return Optional.ofNullable(this.minimumHoldTime);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> minimumHoldTimeVariable() {
        return Optional.ofNullable(this.minimumHoldTimeVariable);
    }
    /**
     * @return Define Mode of connection
     *   - Choices: `local`, `peer`
     *   - Default value: `local`
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return Define Role of a device &lt;speaker/listener/both&gt;
     *   - Choices: `listener`, `speaker`, `both`
     *   - Default value: `speaker`
     * 
     */
    public Optional<String> modeType() {
        return Optional.ofNullable(this.modeType);
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Boolean> optional() {
        return Optional.ofNullable(this.optional);
    }
    /**
     * @return Configure SXP Peer IP address (IPv4)
     * 
     */
    public Optional<String> peerIp() {
        return Optional.ofNullable(this.peerIp);
    }
    /**
     * @return Define Preshared Key type
     *   - Choices: `default`, `key-chain`, `none`
     *   - Default value: `none`
     * 
     */
    public Optional<String> presharedKey() {
        return Optional.ofNullable(this.presharedKey);
    }
    /**
     * @return Configure SXP Source IP address (IPv4)
     * 
     */
    public Optional<String> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> sourceIpVariable() {
        return Optional.ofNullable(this.sourceIpVariable);
    }
    /**
     * @return Configure Connection VPN (VRF) ID
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     * 
     */
    public Optional<Integer> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> vpnIdVariable() {
        return Optional.ofNullable(this.vpnIdVariable);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CiscoTrustsecFeatureTemplateSxpConnection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer maximumHoldTime;
        private @Nullable String maximumHoldTimeVariable;
        private @Nullable Integer minimumHoldTime;
        private @Nullable String minimumHoldTimeVariable;
        private @Nullable String mode;
        private @Nullable String modeType;
        private @Nullable Boolean optional;
        private @Nullable String peerIp;
        private @Nullable String presharedKey;
        private @Nullable String sourceIp;
        private @Nullable String sourceIpVariable;
        private @Nullable Integer vpnId;
        private @Nullable String vpnIdVariable;
        public Builder() {}
        public Builder(CiscoTrustsecFeatureTemplateSxpConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maximumHoldTime = defaults.maximumHoldTime;
    	      this.maximumHoldTimeVariable = defaults.maximumHoldTimeVariable;
    	      this.minimumHoldTime = defaults.minimumHoldTime;
    	      this.minimumHoldTimeVariable = defaults.minimumHoldTimeVariable;
    	      this.mode = defaults.mode;
    	      this.modeType = defaults.modeType;
    	      this.optional = defaults.optional;
    	      this.peerIp = defaults.peerIp;
    	      this.presharedKey = defaults.presharedKey;
    	      this.sourceIp = defaults.sourceIp;
    	      this.sourceIpVariable = defaults.sourceIpVariable;
    	      this.vpnId = defaults.vpnId;
    	      this.vpnIdVariable = defaults.vpnIdVariable;
        }

        @CustomType.Setter
        public Builder maximumHoldTime(@Nullable Integer maximumHoldTime) {

            this.maximumHoldTime = maximumHoldTime;
            return this;
        }
        @CustomType.Setter
        public Builder maximumHoldTimeVariable(@Nullable String maximumHoldTimeVariable) {

            this.maximumHoldTimeVariable = maximumHoldTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder minimumHoldTime(@Nullable Integer minimumHoldTime) {

            this.minimumHoldTime = minimumHoldTime;
            return this;
        }
        @CustomType.Setter
        public Builder minimumHoldTimeVariable(@Nullable String minimumHoldTimeVariable) {

            this.minimumHoldTimeVariable = minimumHoldTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder modeType(@Nullable String modeType) {

            this.modeType = modeType;
            return this;
        }
        @CustomType.Setter
        public Builder optional(@Nullable Boolean optional) {

            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder peerIp(@Nullable String peerIp) {

            this.peerIp = peerIp;
            return this;
        }
        @CustomType.Setter
        public Builder presharedKey(@Nullable String presharedKey) {

            this.presharedKey = presharedKey;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIp(@Nullable String sourceIp) {

            this.sourceIp = sourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpVariable(@Nullable String sourceIpVariable) {

            this.sourceIpVariable = sourceIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder vpnId(@Nullable Integer vpnId) {

            this.vpnId = vpnId;
            return this;
        }
        @CustomType.Setter
        public Builder vpnIdVariable(@Nullable String vpnIdVariable) {

            this.vpnIdVariable = vpnIdVariable;
            return this;
        }
        public CiscoTrustsecFeatureTemplateSxpConnection build() {
            final var _resultValue = new CiscoTrustsecFeatureTemplateSxpConnection();
            _resultValue.maximumHoldTime = maximumHoldTime;
            _resultValue.maximumHoldTimeVariable = maximumHoldTimeVariable;
            _resultValue.minimumHoldTime = minimumHoldTime;
            _resultValue.minimumHoldTimeVariable = minimumHoldTimeVariable;
            _resultValue.mode = mode;
            _resultValue.modeType = modeType;
            _resultValue.optional = optional;
            _resultValue.peerIp = peerIp;
            _resultValue.presharedKey = presharedKey;
            _resultValue.sourceIp = sourceIp;
            _resultValue.sourceIpVariable = sourceIpVariable;
            _resultValue.vpnId = vpnId;
            _resultValue.vpnIdVariable = vpnIdVariable;
            return _resultValue;
        }
    }
}
