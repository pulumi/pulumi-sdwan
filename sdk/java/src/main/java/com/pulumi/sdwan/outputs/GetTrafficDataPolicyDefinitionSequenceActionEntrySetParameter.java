// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter {
    /**
     * @return DSCP
     * 
     */
    private Integer dscp;
    /**
     * @return Forwarding class
     * 
     */
    private String forwardingClass;
    /**
     * @return Local TLOC list color. Space separated list of colors.
     * 
     */
    private String localTlocListColor;
    /**
     * @return Local TLOC list encapsulation.
     * 
     */
    private String localTlocListEncap;
    /**
     * @return Local TLOC list restrict
     * 
     */
    private Boolean localTlocListRestrict;
    /**
     * @return Next hop IP
     * 
     */
    private String nextHop;
    /**
     * @return Use routing table entry to forward the packet in case Next-hop is not available
     * 
     */
    private Boolean nextHopLoose;
    /**
     * @return Policer list ID
     * 
     */
    private String policerListId;
    /**
     * @return Policer list version
     * 
     */
    private Integer policerListVersion;
    /**
     * @return Preferred color group list ID
     * 
     */
    private String preferredColorGroupList;
    /**
     * @return Preferred color group list version
     * 
     */
    private Integer preferredColorGroupListVersion;
    /**
     * @return Service TLOC color
     * 
     */
    private String serviceTlocColor;
    /**
     * @return Service TLOC encapsulation
     * 
     */
    private String serviceTlocEncapsulation;
    /**
     * @return Service TLOC IP address
     * 
     */
    private String serviceTlocIp;
    /**
     * @return Service TLOC list ID
     * 
     */
    private String serviceTlocListId;
    /**
     * @return Service TLOC list version
     * 
     */
    private Integer serviceTlocListVersion;
    /**
     * @return Service TLOC Local
     * 
     */
    private Boolean serviceTlocLocal;
    /**
     * @return Service TLOC Restrict
     * 
     */
    private Boolean serviceTlocRestrict;
    /**
     * @return Service type
     * 
     */
    private String serviceType;
    /**
     * @return Service VPN ID
     * 
     */
    private Integer serviceVpnId;
    /**
     * @return TLOC color
     * 
     */
    private String tlocColor;
    /**
     * @return TLOC encapsulation
     * 
     */
    private String tlocEncapsulation;
    /**
     * @return TLOC IP address
     * 
     */
    private String tlocIp;
    /**
     * @return TLOC list ID
     * 
     */
    private String tlocListId;
    /**
     * @return TLOC list version
     * 
     */
    private Integer tlocListVersion;
    /**
     * @return Type of set parameter
     * 
     */
    private String type;
    /**
     * @return DSCP
     * 
     */
    private Integer vpnId;

    private GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter() {}
    /**
     * @return DSCP
     * 
     */
    public Integer dscp() {
        return this.dscp;
    }
    /**
     * @return Forwarding class
     * 
     */
    public String forwardingClass() {
        return this.forwardingClass;
    }
    /**
     * @return Local TLOC list color. Space separated list of colors.
     * 
     */
    public String localTlocListColor() {
        return this.localTlocListColor;
    }
    /**
     * @return Local TLOC list encapsulation.
     * 
     */
    public String localTlocListEncap() {
        return this.localTlocListEncap;
    }
    /**
     * @return Local TLOC list restrict
     * 
     */
    public Boolean localTlocListRestrict() {
        return this.localTlocListRestrict;
    }
    /**
     * @return Next hop IP
     * 
     */
    public String nextHop() {
        return this.nextHop;
    }
    /**
     * @return Use routing table entry to forward the packet in case Next-hop is not available
     * 
     */
    public Boolean nextHopLoose() {
        return this.nextHopLoose;
    }
    /**
     * @return Policer list ID
     * 
     */
    public String policerListId() {
        return this.policerListId;
    }
    /**
     * @return Policer list version
     * 
     */
    public Integer policerListVersion() {
        return this.policerListVersion;
    }
    /**
     * @return Preferred color group list ID
     * 
     */
    public String preferredColorGroupList() {
        return this.preferredColorGroupList;
    }
    /**
     * @return Preferred color group list version
     * 
     */
    public Integer preferredColorGroupListVersion() {
        return this.preferredColorGroupListVersion;
    }
    /**
     * @return Service TLOC color
     * 
     */
    public String serviceTlocColor() {
        return this.serviceTlocColor;
    }
    /**
     * @return Service TLOC encapsulation
     * 
     */
    public String serviceTlocEncapsulation() {
        return this.serviceTlocEncapsulation;
    }
    /**
     * @return Service TLOC IP address
     * 
     */
    public String serviceTlocIp() {
        return this.serviceTlocIp;
    }
    /**
     * @return Service TLOC list ID
     * 
     */
    public String serviceTlocListId() {
        return this.serviceTlocListId;
    }
    /**
     * @return Service TLOC list version
     * 
     */
    public Integer serviceTlocListVersion() {
        return this.serviceTlocListVersion;
    }
    /**
     * @return Service TLOC Local
     * 
     */
    public Boolean serviceTlocLocal() {
        return this.serviceTlocLocal;
    }
    /**
     * @return Service TLOC Restrict
     * 
     */
    public Boolean serviceTlocRestrict() {
        return this.serviceTlocRestrict;
    }
    /**
     * @return Service type
     * 
     */
    public String serviceType() {
        return this.serviceType;
    }
    /**
     * @return Service VPN ID
     * 
     */
    public Integer serviceVpnId() {
        return this.serviceVpnId;
    }
    /**
     * @return TLOC color
     * 
     */
    public String tlocColor() {
        return this.tlocColor;
    }
    /**
     * @return TLOC encapsulation
     * 
     */
    public String tlocEncapsulation() {
        return this.tlocEncapsulation;
    }
    /**
     * @return TLOC IP address
     * 
     */
    public String tlocIp() {
        return this.tlocIp;
    }
    /**
     * @return TLOC list ID
     * 
     */
    public String tlocListId() {
        return this.tlocListId;
    }
    /**
     * @return TLOC list version
     * 
     */
    public Integer tlocListVersion() {
        return this.tlocListVersion;
    }
    /**
     * @return Type of set parameter
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return DSCP
     * 
     */
    public Integer vpnId() {
        return this.vpnId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer dscp;
        private String forwardingClass;
        private String localTlocListColor;
        private String localTlocListEncap;
        private Boolean localTlocListRestrict;
        private String nextHop;
        private Boolean nextHopLoose;
        private String policerListId;
        private Integer policerListVersion;
        private String preferredColorGroupList;
        private Integer preferredColorGroupListVersion;
        private String serviceTlocColor;
        private String serviceTlocEncapsulation;
        private String serviceTlocIp;
        private String serviceTlocListId;
        private Integer serviceTlocListVersion;
        private Boolean serviceTlocLocal;
        private Boolean serviceTlocRestrict;
        private String serviceType;
        private Integer serviceVpnId;
        private String tlocColor;
        private String tlocEncapsulation;
        private String tlocIp;
        private String tlocListId;
        private Integer tlocListVersion;
        private String type;
        private Integer vpnId;
        public Builder() {}
        public Builder(GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dscp = defaults.dscp;
    	      this.forwardingClass = defaults.forwardingClass;
    	      this.localTlocListColor = defaults.localTlocListColor;
    	      this.localTlocListEncap = defaults.localTlocListEncap;
    	      this.localTlocListRestrict = defaults.localTlocListRestrict;
    	      this.nextHop = defaults.nextHop;
    	      this.nextHopLoose = defaults.nextHopLoose;
    	      this.policerListId = defaults.policerListId;
    	      this.policerListVersion = defaults.policerListVersion;
    	      this.preferredColorGroupList = defaults.preferredColorGroupList;
    	      this.preferredColorGroupListVersion = defaults.preferredColorGroupListVersion;
    	      this.serviceTlocColor = defaults.serviceTlocColor;
    	      this.serviceTlocEncapsulation = defaults.serviceTlocEncapsulation;
    	      this.serviceTlocIp = defaults.serviceTlocIp;
    	      this.serviceTlocListId = defaults.serviceTlocListId;
    	      this.serviceTlocListVersion = defaults.serviceTlocListVersion;
    	      this.serviceTlocLocal = defaults.serviceTlocLocal;
    	      this.serviceTlocRestrict = defaults.serviceTlocRestrict;
    	      this.serviceType = defaults.serviceType;
    	      this.serviceVpnId = defaults.serviceVpnId;
    	      this.tlocColor = defaults.tlocColor;
    	      this.tlocEncapsulation = defaults.tlocEncapsulation;
    	      this.tlocIp = defaults.tlocIp;
    	      this.tlocListId = defaults.tlocListId;
    	      this.tlocListVersion = defaults.tlocListVersion;
    	      this.type = defaults.type;
    	      this.vpnId = defaults.vpnId;
        }

        @CustomType.Setter
        public Builder dscp(Integer dscp) {
            if (dscp == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "dscp");
            }
            this.dscp = dscp;
            return this;
        }
        @CustomType.Setter
        public Builder forwardingClass(String forwardingClass) {
            if (forwardingClass == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "forwardingClass");
            }
            this.forwardingClass = forwardingClass;
            return this;
        }
        @CustomType.Setter
        public Builder localTlocListColor(String localTlocListColor) {
            if (localTlocListColor == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "localTlocListColor");
            }
            this.localTlocListColor = localTlocListColor;
            return this;
        }
        @CustomType.Setter
        public Builder localTlocListEncap(String localTlocListEncap) {
            if (localTlocListEncap == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "localTlocListEncap");
            }
            this.localTlocListEncap = localTlocListEncap;
            return this;
        }
        @CustomType.Setter
        public Builder localTlocListRestrict(Boolean localTlocListRestrict) {
            if (localTlocListRestrict == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "localTlocListRestrict");
            }
            this.localTlocListRestrict = localTlocListRestrict;
            return this;
        }
        @CustomType.Setter
        public Builder nextHop(String nextHop) {
            if (nextHop == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "nextHop");
            }
            this.nextHop = nextHop;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopLoose(Boolean nextHopLoose) {
            if (nextHopLoose == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "nextHopLoose");
            }
            this.nextHopLoose = nextHopLoose;
            return this;
        }
        @CustomType.Setter
        public Builder policerListId(String policerListId) {
            if (policerListId == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "policerListId");
            }
            this.policerListId = policerListId;
            return this;
        }
        @CustomType.Setter
        public Builder policerListVersion(Integer policerListVersion) {
            if (policerListVersion == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "policerListVersion");
            }
            this.policerListVersion = policerListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder preferredColorGroupList(String preferredColorGroupList) {
            if (preferredColorGroupList == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "preferredColorGroupList");
            }
            this.preferredColorGroupList = preferredColorGroupList;
            return this;
        }
        @CustomType.Setter
        public Builder preferredColorGroupListVersion(Integer preferredColorGroupListVersion) {
            if (preferredColorGroupListVersion == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "preferredColorGroupListVersion");
            }
            this.preferredColorGroupListVersion = preferredColorGroupListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocColor(String serviceTlocColor) {
            if (serviceTlocColor == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "serviceTlocColor");
            }
            this.serviceTlocColor = serviceTlocColor;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocEncapsulation(String serviceTlocEncapsulation) {
            if (serviceTlocEncapsulation == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "serviceTlocEncapsulation");
            }
            this.serviceTlocEncapsulation = serviceTlocEncapsulation;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocIp(String serviceTlocIp) {
            if (serviceTlocIp == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "serviceTlocIp");
            }
            this.serviceTlocIp = serviceTlocIp;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocListId(String serviceTlocListId) {
            if (serviceTlocListId == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "serviceTlocListId");
            }
            this.serviceTlocListId = serviceTlocListId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocListVersion(Integer serviceTlocListVersion) {
            if (serviceTlocListVersion == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "serviceTlocListVersion");
            }
            this.serviceTlocListVersion = serviceTlocListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocLocal(Boolean serviceTlocLocal) {
            if (serviceTlocLocal == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "serviceTlocLocal");
            }
            this.serviceTlocLocal = serviceTlocLocal;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocRestrict(Boolean serviceTlocRestrict) {
            if (serviceTlocRestrict == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "serviceTlocRestrict");
            }
            this.serviceTlocRestrict = serviceTlocRestrict;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(String serviceType) {
            if (serviceType == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "serviceType");
            }
            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder serviceVpnId(Integer serviceVpnId) {
            if (serviceVpnId == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "serviceVpnId");
            }
            this.serviceVpnId = serviceVpnId;
            return this;
        }
        @CustomType.Setter
        public Builder tlocColor(String tlocColor) {
            if (tlocColor == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "tlocColor");
            }
            this.tlocColor = tlocColor;
            return this;
        }
        @CustomType.Setter
        public Builder tlocEncapsulation(String tlocEncapsulation) {
            if (tlocEncapsulation == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "tlocEncapsulation");
            }
            this.tlocEncapsulation = tlocEncapsulation;
            return this;
        }
        @CustomType.Setter
        public Builder tlocIp(String tlocIp) {
            if (tlocIp == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "tlocIp");
            }
            this.tlocIp = tlocIp;
            return this;
        }
        @CustomType.Setter
        public Builder tlocListId(String tlocListId) {
            if (tlocListId == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "tlocListId");
            }
            this.tlocListId = tlocListId;
            return this;
        }
        @CustomType.Setter
        public Builder tlocListVersion(Integer tlocListVersion) {
            if (tlocListVersion == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "tlocListVersion");
            }
            this.tlocListVersion = tlocListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vpnId(Integer vpnId) {
            if (vpnId == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "vpnId");
            }
            this.vpnId = vpnId;
            return this;
        }
        public GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter build() {
            final var _resultValue = new GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter();
            _resultValue.dscp = dscp;
            _resultValue.forwardingClass = forwardingClass;
            _resultValue.localTlocListColor = localTlocListColor;
            _resultValue.localTlocListEncap = localTlocListEncap;
            _resultValue.localTlocListRestrict = localTlocListRestrict;
            _resultValue.nextHop = nextHop;
            _resultValue.nextHopLoose = nextHopLoose;
            _resultValue.policerListId = policerListId;
            _resultValue.policerListVersion = policerListVersion;
            _resultValue.preferredColorGroupList = preferredColorGroupList;
            _resultValue.preferredColorGroupListVersion = preferredColorGroupListVersion;
            _resultValue.serviceTlocColor = serviceTlocColor;
            _resultValue.serviceTlocEncapsulation = serviceTlocEncapsulation;
            _resultValue.serviceTlocIp = serviceTlocIp;
            _resultValue.serviceTlocListId = serviceTlocListId;
            _resultValue.serviceTlocListVersion = serviceTlocListVersion;
            _resultValue.serviceTlocLocal = serviceTlocLocal;
            _resultValue.serviceTlocRestrict = serviceTlocRestrict;
            _resultValue.serviceType = serviceType;
            _resultValue.serviceVpnId = serviceVpnId;
            _resultValue.tlocColor = tlocColor;
            _resultValue.tlocEncapsulation = tlocEncapsulation;
            _resultValue.tlocIp = tlocIp;
            _resultValue.tlocListId = tlocListId;
            _resultValue.tlocListVersion = tlocListVersion;
            _resultValue.type = type;
            _resultValue.vpnId = vpnId;
            return _resultValue;
        }
    }
}
