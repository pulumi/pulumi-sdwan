// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs Empty = new ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs();

    /**
     * Aggregate Only
     *   - Default value: `false`
     * 
     */
    @Import(name="aggregateOnly")
    private @Nullable Output<Boolean> aggregateOnly;

    /**
     * @return Aggregate Only
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> aggregateOnly() {
        return Optional.ofNullable(this.aggregateOnly);
    }

    @Import(name="networkAddress")
    private @Nullable Output<String> networkAddress;

    public Optional<Output<String>> networkAddress() {
        return Optional.ofNullable(this.networkAddress);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="networkAddressVariable")
    private @Nullable Output<String> networkAddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> networkAddressVariable() {
        return Optional.ofNullable(this.networkAddressVariable);
    }

    /**
     * Applied to Region
     *   - Choices: `core-and-access`, `core`, `access`
     *   - Default value: `core-and-access`
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Applied to Region
     *   - Choices: `core-and-access`, `core`, `access`
     *   - Default value: `core-and-access`
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="regionVariable")
    private @Nullable Output<String> regionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> regionVariable() {
        return Optional.ofNullable(this.regionVariable);
    }

    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Import(name="subnetMask")
    private @Nullable Output<String> subnetMask;

    /**
     * @return - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Optional<Output<String>> subnetMask() {
        return Optional.ofNullable(this.subnetMask);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="subnetMaskVariable")
    private @Nullable Output<String> subnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> subnetMaskVariable() {
        return Optional.ofNullable(this.subnetMaskVariable);
    }

    private ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs() {}

    private ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs(ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs $) {
        this.aggregateOnly = $.aggregateOnly;
        this.networkAddress = $.networkAddress;
        this.networkAddressVariable = $.networkAddressVariable;
        this.region = $.region;
        this.regionVariable = $.regionVariable;
        this.subnetMask = $.subnetMask;
        this.subnetMaskVariable = $.subnetMaskVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs $;

        public Builder() {
            $ = new ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs();
        }

        public Builder(ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs defaults) {
            $ = new ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregateOnly Aggregate Only
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder aggregateOnly(@Nullable Output<Boolean> aggregateOnly) {
            $.aggregateOnly = aggregateOnly;
            return this;
        }

        /**
         * @param aggregateOnly Aggregate Only
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder aggregateOnly(Boolean aggregateOnly) {
            return aggregateOnly(Output.of(aggregateOnly));
        }

        public Builder networkAddress(@Nullable Output<String> networkAddress) {
            $.networkAddress = networkAddress;
            return this;
        }

        public Builder networkAddress(String networkAddress) {
            return networkAddress(Output.of(networkAddress));
        }

        /**
         * @param networkAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder networkAddressVariable(@Nullable Output<String> networkAddressVariable) {
            $.networkAddressVariable = networkAddressVariable;
            return this;
        }

        /**
         * @param networkAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder networkAddressVariable(String networkAddressVariable) {
            return networkAddressVariable(Output.of(networkAddressVariable));
        }

        /**
         * @param region Applied to Region
         *   - Choices: `core-and-access`, `core`, `access`
         *   - Default value: `core-and-access`
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Applied to Region
         *   - Choices: `core-and-access`, `core`, `access`
         *   - Default value: `core-and-access`
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param regionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder regionVariable(@Nullable Output<String> regionVariable) {
            $.regionVariable = regionVariable;
            return this;
        }

        /**
         * @param regionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder regionVariable(String regionVariable) {
            return regionVariable(Output.of(regionVariable));
        }

        /**
         * @param subnetMask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(@Nullable Output<String> subnetMask) {
            $.subnetMask = subnetMask;
            return this;
        }

        /**
         * @param subnetMask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(String subnetMask) {
            return subnetMask(Output.of(subnetMask));
        }

        /**
         * @param subnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder subnetMaskVariable(@Nullable Output<String> subnetMaskVariable) {
            $.subnetMaskVariable = subnetMaskVariable;
            return this;
        }

        /**
         * @param subnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder subnetMaskVariable(String subnetMaskVariable) {
            return subnetMaskVariable(Output.of(subnetMaskVariable));
        }

        public ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs build() {
            return $;
        }
    }

}
