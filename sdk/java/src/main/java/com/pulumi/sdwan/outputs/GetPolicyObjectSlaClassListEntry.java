// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPolicyObjectSlaClassListEntry {
    private String appProbeClassListId;
    private String fallbackBestTunnelCriteria;
    private Integer fallbackBestTunnelJitterVariance;
    private Integer fallbackBestTunnelLatencyVariance;
    private Integer fallbackBestTunnelLossVariance;
    private Integer jitter;
    private Integer latency;
    private Integer loss;

    private GetPolicyObjectSlaClassListEntry() {}
    public String appProbeClassListId() {
        return this.appProbeClassListId;
    }
    public String fallbackBestTunnelCriteria() {
        return this.fallbackBestTunnelCriteria;
    }
    public Integer fallbackBestTunnelJitterVariance() {
        return this.fallbackBestTunnelJitterVariance;
    }
    public Integer fallbackBestTunnelLatencyVariance() {
        return this.fallbackBestTunnelLatencyVariance;
    }
    public Integer fallbackBestTunnelLossVariance() {
        return this.fallbackBestTunnelLossVariance;
    }
    public Integer jitter() {
        return this.jitter;
    }
    public Integer latency() {
        return this.latency;
    }
    public Integer loss() {
        return this.loss;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicyObjectSlaClassListEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appProbeClassListId;
        private String fallbackBestTunnelCriteria;
        private Integer fallbackBestTunnelJitterVariance;
        private Integer fallbackBestTunnelLatencyVariance;
        private Integer fallbackBestTunnelLossVariance;
        private Integer jitter;
        private Integer latency;
        private Integer loss;
        public Builder() {}
        public Builder(GetPolicyObjectSlaClassListEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appProbeClassListId = defaults.appProbeClassListId;
    	      this.fallbackBestTunnelCriteria = defaults.fallbackBestTunnelCriteria;
    	      this.fallbackBestTunnelJitterVariance = defaults.fallbackBestTunnelJitterVariance;
    	      this.fallbackBestTunnelLatencyVariance = defaults.fallbackBestTunnelLatencyVariance;
    	      this.fallbackBestTunnelLossVariance = defaults.fallbackBestTunnelLossVariance;
    	      this.jitter = defaults.jitter;
    	      this.latency = defaults.latency;
    	      this.loss = defaults.loss;
        }

        @CustomType.Setter
        public Builder appProbeClassListId(String appProbeClassListId) {
            if (appProbeClassListId == null) {
              throw new MissingRequiredPropertyException("GetPolicyObjectSlaClassListEntry", "appProbeClassListId");
            }
            this.appProbeClassListId = appProbeClassListId;
            return this;
        }
        @CustomType.Setter
        public Builder fallbackBestTunnelCriteria(String fallbackBestTunnelCriteria) {
            if (fallbackBestTunnelCriteria == null) {
              throw new MissingRequiredPropertyException("GetPolicyObjectSlaClassListEntry", "fallbackBestTunnelCriteria");
            }
            this.fallbackBestTunnelCriteria = fallbackBestTunnelCriteria;
            return this;
        }
        @CustomType.Setter
        public Builder fallbackBestTunnelJitterVariance(Integer fallbackBestTunnelJitterVariance) {
            if (fallbackBestTunnelJitterVariance == null) {
              throw new MissingRequiredPropertyException("GetPolicyObjectSlaClassListEntry", "fallbackBestTunnelJitterVariance");
            }
            this.fallbackBestTunnelJitterVariance = fallbackBestTunnelJitterVariance;
            return this;
        }
        @CustomType.Setter
        public Builder fallbackBestTunnelLatencyVariance(Integer fallbackBestTunnelLatencyVariance) {
            if (fallbackBestTunnelLatencyVariance == null) {
              throw new MissingRequiredPropertyException("GetPolicyObjectSlaClassListEntry", "fallbackBestTunnelLatencyVariance");
            }
            this.fallbackBestTunnelLatencyVariance = fallbackBestTunnelLatencyVariance;
            return this;
        }
        @CustomType.Setter
        public Builder fallbackBestTunnelLossVariance(Integer fallbackBestTunnelLossVariance) {
            if (fallbackBestTunnelLossVariance == null) {
              throw new MissingRequiredPropertyException("GetPolicyObjectSlaClassListEntry", "fallbackBestTunnelLossVariance");
            }
            this.fallbackBestTunnelLossVariance = fallbackBestTunnelLossVariance;
            return this;
        }
        @CustomType.Setter
        public Builder jitter(Integer jitter) {
            if (jitter == null) {
              throw new MissingRequiredPropertyException("GetPolicyObjectSlaClassListEntry", "jitter");
            }
            this.jitter = jitter;
            return this;
        }
        @CustomType.Setter
        public Builder latency(Integer latency) {
            if (latency == null) {
              throw new MissingRequiredPropertyException("GetPolicyObjectSlaClassListEntry", "latency");
            }
            this.latency = latency;
            return this;
        }
        @CustomType.Setter
        public Builder loss(Integer loss) {
            if (loss == null) {
              throw new MissingRequiredPropertyException("GetPolicyObjectSlaClassListEntry", "loss");
            }
            this.loss = loss;
            return this;
        }
        public GetPolicyObjectSlaClassListEntry build() {
            final var _resultValue = new GetPolicyObjectSlaClassListEntry();
            _resultValue.appProbeClassListId = appProbeClassListId;
            _resultValue.fallbackBestTunnelCriteria = fallbackBestTunnelCriteria;
            _resultValue.fallbackBestTunnelJitterVariance = fallbackBestTunnelJitterVariance;
            _resultValue.fallbackBestTunnelLatencyVariance = fallbackBestTunnelLatencyVariance;
            _resultValue.fallbackBestTunnelLossVariance = fallbackBestTunnelLossVariance;
            _resultValue.jitter = jitter;
            _resultValue.latency = latency;
            _resultValue.loss = loss;
            return _resultValue;
        }
    }
}
