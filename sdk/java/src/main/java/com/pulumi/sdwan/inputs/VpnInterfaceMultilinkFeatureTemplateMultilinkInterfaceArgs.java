// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sdwan.inputs.VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs Empty = new VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs();

    /**
     * Channel Group List
     * 
     */
    @Import(name="channelGroupLists")
    private @Nullable Output<List<VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs>> channelGroupLists;

    /**
     * @return Channel Group List
     * 
     */
    public Optional<Output<List<VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs>>> channelGroupLists() {
        return Optional.ofNullable(this.channelGroupLists);
    }

    /**
     * Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="descriptionVariable")
    private @Nullable Output<String> descriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> descriptionVariable() {
        return Optional.ofNullable(this.descriptionVariable);
    }

    /**
     * Framing
     * 
     */
    @Import(name="framing")
    private @Nullable Output<String> framing;

    /**
     * @return Framing
     * 
     */
    public Optional<Output<String>> framing() {
        return Optional.ofNullable(this.framing);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="framingVariable")
    private @Nullable Output<String> framingVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> framingVariable() {
        return Optional.ofNullable(this.framingVariable);
    }

    /**
     * Card Type
     *   - Choices: `E1`, `T1`, `NIM-2T`, `NIM-4T`
     * 
     */
    @Import(name="interfaceType")
    private @Nullable Output<String> interfaceType;

    /**
     * @return Card Type
     *   - Choices: `E1`, `T1`, `NIM-2T`, `NIM-4T`
     * 
     */
    public Optional<Output<String>> interfaceType() {
        return Optional.ofNullable(this.interfaceType);
    }

    /**
     * Internal
     *   - Default value: `false`
     * 
     */
    @Import(name="internal")
    private @Nullable Output<Boolean> internal;

    /**
     * @return Internal
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> internal() {
        return Optional.ofNullable(this.internal);
    }

    /**
     * Line Mode
     *   - Choices: `secondary`, `primary`
     * 
     */
    @Import(name="lineMode")
    private @Nullable Output<String> lineMode;

    /**
     * @return Line Mode
     *   - Choices: `secondary`, `primary`
     * 
     */
    public Optional<Output<String>> lineMode() {
        return Optional.ofNullable(this.lineMode);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="lineModeVariable")
    private @Nullable Output<String> lineModeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> lineModeVariable() {
        return Optional.ofNullable(this.lineModeVariable);
    }

    /**
     * LineCode
     *   - Choices: `ami`, `b8zs`, `hdb3`
     * 
     */
    @Import(name="linecode")
    private @Nullable Output<String> linecode;

    /**
     * @return LineCode
     *   - Choices: `ami`, `b8zs`, `hdb3`
     * 
     */
    public Optional<Output<String>> linecode() {
        return Optional.ofNullable(this.linecode);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="linecodeVariable")
    private @Nullable Output<String> linecodeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> linecodeVariable() {
        return Optional.ofNullable(this.linecodeVariable);
    }

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * Set length for long
     * 
     */
    @Import(name="setLengthForLong")
    private @Nullable Output<String> setLengthForLong;

    /**
     * @return Set length for long
     * 
     */
    public Optional<Output<String>> setLengthForLong() {
        return Optional.ofNullable(this.setLengthForLong);
    }

    /**
     * Set Length for short
     * 
     */
    @Import(name="setLengthForShort")
    private @Nullable Output<String> setLengthForShort;

    /**
     * @return Set Length for short
     * 
     */
    public Optional<Output<String>> setLengthForShort() {
        return Optional.ofNullable(this.setLengthForShort);
    }

    /**
     * Slot number
     * 
     */
    @Import(name="slot")
    private @Nullable Output<String> slot;

    /**
     * @return Slot number
     * 
     */
    public Optional<Output<String>> slot() {
        return Optional.ofNullable(this.slot);
    }

    private VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs() {}

    private VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs(VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs $) {
        this.channelGroupLists = $.channelGroupLists;
        this.description = $.description;
        this.descriptionVariable = $.descriptionVariable;
        this.framing = $.framing;
        this.framingVariable = $.framingVariable;
        this.interfaceType = $.interfaceType;
        this.internal = $.internal;
        this.lineMode = $.lineMode;
        this.lineModeVariable = $.lineModeVariable;
        this.linecode = $.linecode;
        this.linecodeVariable = $.linecodeVariable;
        this.optional = $.optional;
        this.setLengthForLong = $.setLengthForLong;
        this.setLengthForShort = $.setLengthForShort;
        this.slot = $.slot;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs $;

        public Builder() {
            $ = new VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs();
        }

        public Builder(VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs defaults) {
            $ = new VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param channelGroupLists Channel Group List
         * 
         * @return builder
         * 
         */
        public Builder channelGroupLists(@Nullable Output<List<VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs>> channelGroupLists) {
            $.channelGroupLists = channelGroupLists;
            return this;
        }

        /**
         * @param channelGroupLists Channel Group List
         * 
         * @return builder
         * 
         */
        public Builder channelGroupLists(List<VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs> channelGroupLists) {
            return channelGroupLists(Output.of(channelGroupLists));
        }

        /**
         * @param channelGroupLists Channel Group List
         * 
         * @return builder
         * 
         */
        public Builder channelGroupLists(VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs... channelGroupLists) {
            return channelGroupLists(List.of(channelGroupLists));
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param descriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder descriptionVariable(@Nullable Output<String> descriptionVariable) {
            $.descriptionVariable = descriptionVariable;
            return this;
        }

        /**
         * @param descriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder descriptionVariable(String descriptionVariable) {
            return descriptionVariable(Output.of(descriptionVariable));
        }

        /**
         * @param framing Framing
         * 
         * @return builder
         * 
         */
        public Builder framing(@Nullable Output<String> framing) {
            $.framing = framing;
            return this;
        }

        /**
         * @param framing Framing
         * 
         * @return builder
         * 
         */
        public Builder framing(String framing) {
            return framing(Output.of(framing));
        }

        /**
         * @param framingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder framingVariable(@Nullable Output<String> framingVariable) {
            $.framingVariable = framingVariable;
            return this;
        }

        /**
         * @param framingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder framingVariable(String framingVariable) {
            return framingVariable(Output.of(framingVariable));
        }

        /**
         * @param interfaceType Card Type
         *   - Choices: `E1`, `T1`, `NIM-2T`, `NIM-4T`
         * 
         * @return builder
         * 
         */
        public Builder interfaceType(@Nullable Output<String> interfaceType) {
            $.interfaceType = interfaceType;
            return this;
        }

        /**
         * @param interfaceType Card Type
         *   - Choices: `E1`, `T1`, `NIM-2T`, `NIM-4T`
         * 
         * @return builder
         * 
         */
        public Builder interfaceType(String interfaceType) {
            return interfaceType(Output.of(interfaceType));
        }

        /**
         * @param internal Internal
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder internal(@Nullable Output<Boolean> internal) {
            $.internal = internal;
            return this;
        }

        /**
         * @param internal Internal
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder internal(Boolean internal) {
            return internal(Output.of(internal));
        }

        /**
         * @param lineMode Line Mode
         *   - Choices: `secondary`, `primary`
         * 
         * @return builder
         * 
         */
        public Builder lineMode(@Nullable Output<String> lineMode) {
            $.lineMode = lineMode;
            return this;
        }

        /**
         * @param lineMode Line Mode
         *   - Choices: `secondary`, `primary`
         * 
         * @return builder
         * 
         */
        public Builder lineMode(String lineMode) {
            return lineMode(Output.of(lineMode));
        }

        /**
         * @param lineModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder lineModeVariable(@Nullable Output<String> lineModeVariable) {
            $.lineModeVariable = lineModeVariable;
            return this;
        }

        /**
         * @param lineModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder lineModeVariable(String lineModeVariable) {
            return lineModeVariable(Output.of(lineModeVariable));
        }

        /**
         * @param linecode LineCode
         *   - Choices: `ami`, `b8zs`, `hdb3`
         * 
         * @return builder
         * 
         */
        public Builder linecode(@Nullable Output<String> linecode) {
            $.linecode = linecode;
            return this;
        }

        /**
         * @param linecode LineCode
         *   - Choices: `ami`, `b8zs`, `hdb3`
         * 
         * @return builder
         * 
         */
        public Builder linecode(String linecode) {
            return linecode(Output.of(linecode));
        }

        /**
         * @param linecodeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder linecodeVariable(@Nullable Output<String> linecodeVariable) {
            $.linecodeVariable = linecodeVariable;
            return this;
        }

        /**
         * @param linecodeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder linecodeVariable(String linecodeVariable) {
            return linecodeVariable(Output.of(linecodeVariable));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param setLengthForLong Set length for long
         * 
         * @return builder
         * 
         */
        public Builder setLengthForLong(@Nullable Output<String> setLengthForLong) {
            $.setLengthForLong = setLengthForLong;
            return this;
        }

        /**
         * @param setLengthForLong Set length for long
         * 
         * @return builder
         * 
         */
        public Builder setLengthForLong(String setLengthForLong) {
            return setLengthForLong(Output.of(setLengthForLong));
        }

        /**
         * @param setLengthForShort Set Length for short
         * 
         * @return builder
         * 
         */
        public Builder setLengthForShort(@Nullable Output<String> setLengthForShort) {
            $.setLengthForShort = setLengthForShort;
            return this;
        }

        /**
         * @param setLengthForShort Set Length for short
         * 
         * @return builder
         * 
         */
        public Builder setLengthForShort(String setLengthForShort) {
            return setLengthForShort(Output.of(setLengthForShort));
        }

        /**
         * @param slot Slot number
         * 
         * @return builder
         * 
         */
        public Builder slot(@Nullable Output<String> slot) {
            $.slot = slot;
            return this;
        }

        /**
         * @param slot Slot number
         * 
         * @return builder
         * 
         */
        public Builder slot(String slot) {
            return slot(Output.of(slot));
        }

        public VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs build() {
            return $;
        }
    }

}
