// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sdwan.inputs.CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberArgs;
import com.pulumi.sdwan.inputs.CiscoSystemFeatureTemplateObjectTrackerArgs;
import com.pulumi.sdwan.inputs.CiscoSystemFeatureTemplateTrackerArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoSystemFeatureTemplateState extends com.pulumi.resources.ResourceArgs {

    public static final CiscoSystemFeatureTemplateState Empty = new CiscoSystemFeatureTemplateState();

    /**
     * Collect admin-tech before reboot due to daemon failure - Default value: `true`
     * 
     */
    @Import(name="adminTechOnFailure")
    private @Nullable Output<Boolean> adminTechOnFailure;

    /**
     * @return Collect admin-tech before reboot due to daemon failure - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> adminTechOnFailure() {
        return Optional.ofNullable(this.adminTechOnFailure);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="adminTechOnFailureVariable")
    private @Nullable Output<String> adminTechOnFailureVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> adminTechOnFailureVariable() {
        return Optional.ofNullable(this.adminTechOnFailureVariable);
    }

    /**
     * Set the affinity group number for router - Range: `1`-`255`
     * 
     */
    @Import(name="affinityGroupNumber")
    private @Nullable Output<Integer> affinityGroupNumber;

    /**
     * @return Set the affinity group number for router - Range: `1`-`255`
     * 
     */
    public Optional<Output<Integer>> affinityGroupNumber() {
        return Optional.ofNullable(this.affinityGroupNumber);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="affinityGroupNumberVariable")
    private @Nullable Output<String> affinityGroupNumberVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> affinityGroupNumberVariable() {
        return Optional.ofNullable(this.affinityGroupNumberVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="affinityGroupPreferenceVariable")
    private @Nullable Output<String> affinityGroupPreferenceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> affinityGroupPreferenceVariable() {
        return Optional.ofNullable(this.affinityGroupPreferenceVariable);
    }

    /**
     * Set the affinity group preference
     * 
     */
    @Import(name="affinityGroupPreferences")
    private @Nullable Output<List<Integer>> affinityGroupPreferences;

    /**
     * @return Set the affinity group preference
     * 
     */
    public Optional<Output<List<Integer>>> affinityGroupPreferences() {
        return Optional.ofNullable(this.affinityGroupPreferences);
    }

    /**
     * Set the console baud rate - Choices: `1200`, `2400`, `4800`, `9600`, `19200`, `38400`, `57600`, `115200` - Default
     * value: `9600`
     * 
     */
    @Import(name="consoleBaudRate")
    private @Nullable Output<String> consoleBaudRate;

    /**
     * @return Set the console baud rate - Choices: `1200`, `2400`, `4800`, `9600`, `19200`, `38400`, `57600`, `115200` - Default
     * value: `9600`
     * 
     */
    public Optional<Output<String>> consoleBaudRate() {
        return Optional.ofNullable(this.consoleBaudRate);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="consoleBaudRateVariable")
    private @Nullable Output<String> consoleBaudRateVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> consoleBaudRateVariable() {
        return Optional.ofNullable(this.consoleBaudRateVariable);
    }

    /**
     * Set the policer rate for control sessions - Range: `1`-`65535` - Default value: `300`
     * 
     */
    @Import(name="controlSessionPps")
    private @Nullable Output<Integer> controlSessionPps;

    /**
     * @return Set the policer rate for control sessions - Range: `1`-`65535` - Default value: `300`
     * 
     */
    public Optional<Output<Integer>> controlSessionPps() {
        return Optional.ofNullable(this.controlSessionPps);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="controlSessionPpsVariable")
    private @Nullable Output<String> controlSessionPpsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> controlSessionPpsVariable() {
        return Optional.ofNullable(this.controlSessionPpsVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="controllerGroupListVariable")
    private @Nullable Output<String> controllerGroupListVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> controllerGroupListVariable() {
        return Optional.ofNullable(this.controllerGroupListVariable);
    }

    /**
     * Configure a list of comma-separated device groups
     * 
     */
    @Import(name="controllerGroupLists")
    private @Nullable Output<List<Integer>> controllerGroupLists;

    /**
     * @return Configure a list of comma-separated device groups
     * 
     */
    public Optional<Output<List<Integer>>> controllerGroupLists() {
        return Optional.ofNullable(this.controllerGroupLists);
    }

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Device groups (Use comma(,) for multiple groups)
     * 
     */
    @Import(name="deviceGroups")
    private @Nullable Output<List<String>> deviceGroups;

    /**
     * @return Device groups (Use comma(,) for multiple groups)
     * 
     */
    public Optional<Output<List<String>>> deviceGroups() {
        return Optional.ofNullable(this.deviceGroups);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="deviceGroupsVariable")
    private @Nullable Output<String> deviceGroupsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> deviceGroupsVariable() {
        return Optional.ofNullable(this.deviceGroupsVariable);
    }

    /**
     * List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes")
    private @Nullable Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Optional<Output<List<String>>> deviceTypes() {
        return Optional.ofNullable(this.deviceTypes);
    }

    /**
     * Enable migration mode to Multi-Region Fabric - Choices: `enabled`, `enabled-from-bgp-core`
     * 
     */
    @Import(name="enableMrfMigration")
    private @Nullable Output<String> enableMrfMigration;

    /**
     * @return Enable migration mode to Multi-Region Fabric - Choices: `enabled`, `enabled-from-bgp-core`
     * 
     */
    public Optional<Output<String>> enableMrfMigration() {
        return Optional.ofNullable(this.enableMrfMigration);
    }

    /**
     * Enable Geo fencing - Default value: `false`
     * 
     */
    @Import(name="geoFencing")
    private @Nullable Output<Boolean> geoFencing;

    /**
     * @return Enable Geo fencing - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> geoFencing() {
        return Optional.ofNullable(this.geoFencing);
    }

    /**
     * Set the device’s geo fencing range - Range: `100`-`10000` - Default value: `100`
     * 
     */
    @Import(name="geoFencingRange")
    private @Nullable Output<Integer> geoFencingRange;

    /**
     * @return Set the device’s geo fencing range - Range: `100`-`10000` - Default value: `100`
     * 
     */
    public Optional<Output<Integer>> geoFencingRange() {
        return Optional.ofNullable(this.geoFencingRange);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="geoFencingRangeVariable")
    private @Nullable Output<String> geoFencingRangeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> geoFencingRangeVariable() {
        return Optional.ofNullable(this.geoFencingRangeVariable);
    }

    /**
     * Enable Geo fencing - Default value: `false`
     * 
     */
    @Import(name="geoFencingSms")
    private @Nullable Output<Boolean> geoFencingSms;

    /**
     * @return Enable Geo fencing - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> geoFencingSms() {
        return Optional.ofNullable(this.geoFencingSms);
    }

    /**
     * Set device’s geo fencing SMS phone number
     * 
     */
    @Import(name="geoFencingSmsPhoneNumbers")
    private @Nullable Output<List<CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberArgs>> geoFencingSmsPhoneNumbers;

    /**
     * @return Set device’s geo fencing SMS phone number
     * 
     */
    public Optional<Output<List<CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberArgs>>> geoFencingSmsPhoneNumbers() {
        return Optional.ofNullable(this.geoFencingSmsPhoneNumbers);
    }

    /**
     * Set the hostname
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return Set the hostname
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="hostnameVariable")
    private @Nullable Output<String> hostnameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> hostnameVariable() {
        return Optional.ofNullable(this.hostnameVariable);
    }

    /**
     * Idle CLI timeout in minutes - Range: `0`-`300`
     * 
     */
    @Import(name="idleTimeout")
    private @Nullable Output<Integer> idleTimeout;

    /**
     * @return Idle CLI timeout in minutes - Range: `0`-`300`
     * 
     */
    public Optional<Output<Integer>> idleTimeout() {
        return Optional.ofNullable(this.idleTimeout);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="idleTimeoutVariable")
    private @Nullable Output<String> idleTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> idleTimeoutVariable() {
        return Optional.ofNullable(this.idleTimeoutVariable);
    }

    /**
     * Set the device’s physical latitude - Range: `-90`-`90`
     * 
     */
    @Import(name="latitude")
    private @Nullable Output<Double> latitude;

    /**
     * @return Set the device’s physical latitude - Range: `-90`-`90`
     * 
     */
    public Optional<Output<Double>> latitude() {
        return Optional.ofNullable(this.latitude);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="latitudeVariable")
    private @Nullable Output<String> latitudeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> latitudeVariable() {
        return Optional.ofNullable(this.latitudeVariable);
    }

    /**
     * Set the location of the device
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Set the location of the device
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="locationVariable")
    private @Nullable Output<String> locationVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> locationVariable() {
        return Optional.ofNullable(this.locationVariable);
    }

    /**
     * Set the device’s physical longitude - Range: `-180`-`180`
     * 
     */
    @Import(name="longitude")
    private @Nullable Output<Double> longitude;

    /**
     * @return Set the device’s physical longitude - Range: `-180`-`180`
     * 
     */
    public Optional<Output<Double>> longitude() {
        return Optional.ofNullable(this.longitude);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="longitudeVariable")
    private @Nullable Output<String> longitudeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> longitudeVariable() {
        return Optional.ofNullable(this.longitudeVariable);
    }

    /**
     * Set the maximum number of OMP sessions &lt;1..100&gt; the device can have - Range: `1`-`100`
     * 
     */
    @Import(name="maxOmpSessions")
    private @Nullable Output<Integer> maxOmpSessions;

    /**
     * @return Set the maximum number of OMP sessions &lt;1..100&gt; the device can have - Range: `1`-`100`
     * 
     */
    public Optional<Output<Integer>> maxOmpSessions() {
        return Optional.ofNullable(this.maxOmpSessions);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="maxOmpSessionsVariable")
    private @Nullable Output<String> maxOmpSessionsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> maxOmpSessionsVariable() {
        return Optional.ofNullable(this.maxOmpSessionsVariable);
    }

    /**
     * Set BGP community during migration from BGP-core based network - Range: `1`-`4294967295`
     * 
     */
    @Import(name="migrationBgpCommunity")
    private @Nullable Output<Integer> migrationBgpCommunity;

    /**
     * @return Set BGP community during migration from BGP-core based network - Range: `1`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> migrationBgpCommunity() {
        return Optional.ofNullable(this.migrationBgpCommunity);
    }

    /**
     * Device is multi-tenant - Default value: `false`
     * 
     */
    @Import(name="multiTenant")
    private @Nullable Output<Boolean> multiTenant;

    /**
     * @return Device is multi-tenant - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> multiTenant() {
        return Optional.ofNullable(this.multiTenant);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="multiTenantVariable")
    private @Nullable Output<String> multiTenantVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> multiTenantVariable() {
        return Optional.ofNullable(this.multiTenantVariable);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Object Track configuration
     * 
     */
    @Import(name="objectTrackers")
    private @Nullable Output<List<CiscoSystemFeatureTemplateObjectTrackerArgs>> objectTrackers;

    /**
     * @return Object Track configuration
     * 
     */
    public Optional<Output<List<CiscoSystemFeatureTemplateObjectTrackerArgs>>> objectTrackers() {
        return Optional.ofNullable(this.objectTrackers);
    }

    /**
     * Enable or disable On-demand Tunnel - Default value: `false`
     * 
     */
    @Import(name="onDemandTunnel")
    private @Nullable Output<Boolean> onDemandTunnel;

    /**
     * @return Enable or disable On-demand Tunnel - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> onDemandTunnel() {
        return Optional.ofNullable(this.onDemandTunnel);
    }

    /**
     * Idle CLI timeout in minutes - Range: `0`-`300`
     * 
     */
    @Import(name="onDemandTunnelIdleTimeout")
    private @Nullable Output<Integer> onDemandTunnelIdleTimeout;

    /**
     * @return Idle CLI timeout in minutes - Range: `0`-`300`
     * 
     */
    public Optional<Output<Integer>> onDemandTunnelIdleTimeout() {
        return Optional.ofNullable(this.onDemandTunnelIdleTimeout);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="onDemandTunnelIdleTimeoutVariable")
    private @Nullable Output<String> onDemandTunnelIdleTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> onDemandTunnelIdleTimeoutVariable() {
        return Optional.ofNullable(this.onDemandTunnelIdleTimeoutVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="onDemandTunnelVariable")
    private @Nullable Output<String> onDemandTunnelVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> onDemandTunnelVariable() {
        return Optional.ofNullable(this.onDemandTunnelVariable);
    }

    /**
     * Set the Overlay ID - Range: `1`-`4294967295` - Default value: `1`
     * 
     */
    @Import(name="overlayId")
    private @Nullable Output<Integer> overlayId;

    /**
     * @return Set the Overlay ID - Range: `1`-`4294967295` - Default value: `1`
     * 
     */
    public Optional<Output<Integer>> overlayId() {
        return Optional.ofNullable(this.overlayId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="overlayIdVariable")
    private @Nullable Output<String> overlayIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> overlayIdVariable() {
        return Optional.ofNullable(this.overlayIdVariable);
    }

    /**
     * Enable port hopping - Default value: `true`
     * 
     */
    @Import(name="portHopping")
    private @Nullable Output<Boolean> portHopping;

    /**
     * @return Enable port hopping - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> portHopping() {
        return Optional.ofNullable(this.portHopping);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="portHoppingVariable")
    private @Nullable Output<String> portHoppingVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> portHoppingVariable() {
        return Optional.ofNullable(this.portHoppingVariable);
    }

    /**
     * Set the TLOC port offset when multiple devices are behind a NAT - Range: `0`-`19` - Default value: `0`
     * 
     */
    @Import(name="portOffset")
    private @Nullable Output<Integer> portOffset;

    /**
     * @return Set the TLOC port offset when multiple devices are behind a NAT - Range: `0`-`19` - Default value: `0`
     * 
     */
    public Optional<Output<Integer>> portOffset() {
        return Optional.ofNullable(this.portOffset);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="portOffsetVariable")
    private @Nullable Output<String> portOffsetVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> portOffsetVariable() {
        return Optional.ofNullable(this.portOffsetVariable);
    }

    /**
     * Set region ID - Range: `1`-`63`
     * 
     */
    @Import(name="regionId")
    private @Nullable Output<Integer> regionId;

    /**
     * @return Set region ID - Range: `1`-`63`
     * 
     */
    public Optional<Output<Integer>> regionId() {
        return Optional.ofNullable(this.regionId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="regionIdVariable")
    private @Nullable Output<String> regionIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> regionIdVariable() {
        return Optional.ofNullable(this.regionIdVariable);
    }

    /**
     * Set the role for router - Choices: `edge-router`, `border-router`
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return Set the role for router - Choices: `edge-router`, `border-router`
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="roleVariable")
    private @Nullable Output<String> roleVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> roleVariable() {
        return Optional.ofNullable(this.roleVariable);
    }

    /**
     * Set secondary region ID - Range: `1`-`63`
     * 
     */
    @Import(name="secondaryRegionId")
    private @Nullable Output<Integer> secondaryRegionId;

    /**
     * @return Set secondary region ID - Range: `1`-`63`
     * 
     */
    public Optional<Output<Integer>> secondaryRegionId() {
        return Optional.ofNullable(this.secondaryRegionId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="secondaryRegionIdVariable")
    private @Nullable Output<String> secondaryRegionIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> secondaryRegionIdVariable() {
        return Optional.ofNullable(this.secondaryRegionIdVariable);
    }

    /**
     * Set the site identifier - Range: `1`-`4294967295`
     * 
     */
    @Import(name="siteId")
    private @Nullable Output<Integer> siteId;

    /**
     * @return Set the site identifier - Range: `1`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="siteIdVariable")
    private @Nullable Output<String> siteIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> siteIdVariable() {
        return Optional.ofNullable(this.siteIdVariable);
    }

    /**
     * Set a text description of the device
     * 
     */
    @Import(name="systemDescription")
    private @Nullable Output<String> systemDescription;

    /**
     * @return Set a text description of the device
     * 
     */
    public Optional<Output<String>> systemDescription() {
        return Optional.ofNullable(this.systemDescription);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="systemDescriptionVariable")
    private @Nullable Output<String> systemDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> systemDescriptionVariable() {
        return Optional.ofNullable(this.systemDescriptionVariable);
    }

    /**
     * Set the system IP address
     * 
     */
    @Import(name="systemIp")
    private @Nullable Output<String> systemIp;

    /**
     * @return Set the system IP address
     * 
     */
    public Optional<Output<String>> systemIp() {
        return Optional.ofNullable(this.systemIp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="systemIpVariable")
    private @Nullable Output<String> systemIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> systemIpVariable() {
        return Optional.ofNullable(this.systemIpVariable);
    }

    /**
     * The template type
     * 
     */
    @Import(name="templateType")
    private @Nullable Output<String> templateType;

    /**
     * @return The template type
     * 
     */
    public Optional<Output<String>> templateType() {
        return Optional.ofNullable(this.templateType);
    }

    /**
     * Set the timezone - Choices: `Europe/Andorra`, `Asia/Dubai`, `Asia/Kabul`, `America/Antigua`, `America/Anguilla`,
     * `Europe/Tirane`, `Asia/Yerevan`, `Africa/Luanda`, `Antarctica/McMurdo`, `Antarctica/Rothera`, `Antarctica/Palmer`,
     * `Antarctica/Mawson`, `Antarctica/Davis`, `Antarctica/Casey`, `Antarctica/Vostok`, `Antarctica/DumontDUrville`,
     * `Antarctica/Syowa`, `America/Argentina/Buenos_Aires`, `America/Argentina/Cordoba`, `America/Argentina/Salta`,
     * `America/Argentina/Jujuy`, `America/Argentina/Tucuman`, `America/Argentina/Catamarca`, `America/Argentina/La_Rioja`,
     * `America/Argentina/San_Juan`, `America/Argentina/Mendoza`, `America/Argentina/San_Luis`,
     * `America/Argentina/Rio_Gallegos`, `America/Argentina/Ushuaia`, `Pacific/Pago_Pago`, `Europe/Vienna`,
     * `Australia/Lord_Howe`, `Antarctica/Macquarie`, `Australia/Hobart`, `Australia/Currie`, `Australia/Melbourne`,
     * `Australia/Sydney`, `Australia/Broken_Hill`, `Australia/Brisbane`, `Australia/Lindeman`, `Australia/Adelaide`,
     * `Australia/Darwin`, `Australia/Perth`, `Australia/Eucla`, `America/Aruba`, `Europe/Mariehamn`, `Asia/Baku`,
     * `Europe/Sarajevo`, `America/Barbados`, `Asia/Dhaka`, `Europe/Brussels`, `Africa/Ouagadougou`, `Europe/Sofia`,
     * `Asia/Bahrain`, `Africa/Bujumbura`, `Africa/Porto-Novo`, `America/St_Barthelemy`, `Atlantic/Bermuda`, `Asia/Brunei`,
     * `America/La_Paz`, `America/Kralendijk`, `America/Noronha`, `America/Belem`, `America/Fortaleza`, `America/Recife`,
     * `America/Araguaina`, `America/Maceio`, `America/Bahia`, `America/Sao_Paulo`, `America/Campo_Grande`, `America/Cuiaba`,
     * `America/Santarem`, `America/Porto_Velho`, `America/Boa_Vista`, `America/Manaus`, `America/Eirunepe`,
     * `America/Rio_Branco`, `America/Nassau`, `Asia/Thimphu`, `Africa/Gaborone`, `Europe/Minsk`, `America/Belize`,
     * `America/St_Johns`, `America/Halifax`, `America/Glace_Bay`, `America/Moncton`, `America/Goose_Bay`,
     * `America/Blanc-Sablon`, `America/Toronto`, `America/Nipigon`, `America/Thunder_Bay`, `America/Iqaluit`,
     * `America/Pangnirtung`, `America/Resolute`, `America/Atikokan`, `America/Rankin_Inlet`, `America/Winnipeg`,
     * `America/Rainy_River`, `America/Regina`, `America/Swift_Current`, `America/Edmonton`, `America/Cambridge_Bay`,
     * `America/Yellowknife`, `America/Inuvik`, `America/Creston`, `America/Dawson_Creek`, `America/Vancouver`,
     * `America/Whitehorse`, `America/Dawson`, `Indian/Cocos`, `Africa/Kinshasa`, `Africa/Lubumbashi`, `Africa/Bangui`,
     * `Africa/Brazzaville`, `Europe/Zurich`, `Africa/Abidjan`, `Pacific/Rarotonga`, `America/Santiago`, `Pacific/Easter`,
     * `Africa/Douala`, `Asia/Shanghai`, `Asia/Harbin`, `Asia/Chongqing`, `Asia/Urumqi`, `Asia/Kashgar`, `America/Bogota`,
     * `America/Costa_Rica`, `America/Havana`, `Atlantic/Cape_Verde`, `America/Curacao`, `Indian/Christmas`, `Asia/Nicosia`,
     * `Europe/Prague`, `Europe/Berlin`, `Europe/Busingen`, `Africa/Djibouti`, `Europe/Copenhagen`, `America/Dominica`,
     * `America/Santo_Domingo`, `Africa/Algiers`, `America/Guayaquil`, `Pacific/Galapagos`, `Europe/Tallinn`, `Africa/Cairo`,
     * `Africa/El_Aaiun`, `Africa/Asmara`, `Europe/Madrid`, `Africa/Ceuta`, `Atlantic/Canary`, `Africa/Addis_Ababa`,
     * `Europe/Helsinki`, `Pacific/Fiji`, `Atlantic/Stanley`, `Pacific/Chuuk`, `Pacific/Pohnpei`, `Pacific/Kosrae`,
     * `Atlantic/Faroe`, `Europe/Paris`, `Africa/Libreville`, `Europe/London`, `America/Grenada`, `Asia/Tbilisi`,
     * `America/Cayenne`, `Europe/Guernsey`, `Africa/Accra`, `Europe/Gibraltar`, `America/Godthab`, `America/Danmarkshavn`,
     * `America/Scoresbysund`, `America/Thule`, `Africa/Banjul`, `Africa/Conakry`, `America/Guadeloupe`, `Africa/Malabo`,
     * `Europe/Athens`, `Atlantic/South_Georgia`, `America/Guatemala`, `Pacific/Guam`, `Africa/Bissau`, `America/Guyana`,
     * `Asia/Hong_Kong`, `America/Tegucigalpa`, `Europe/Zagreb`, `America/Port-au-Prince`, `Europe/Budapest`, `Asia/Jakarta`,
     * `Asia/Pontianak`, `Asia/Makassar`, `Asia/Jayapura`, `Europe/Dublin`, `Asia/Jerusalem`, `Europe/Isle_of_Man`,
     * `Asia/Kolkata`, `Indian/Chagos`, `Asia/Baghdad`, `Asia/Tehran`, `Atlantic/Reykjavik`, `Europe/Rome`, `Europe/Jersey`,
     * `America/Jamaica`, `Asia/Amman`, `Asia/Tokyo`, `Africa/Nairobi`, `Asia/Bishkek`, `Asia/Phnom_Penh`, `Pacific/Tarawa`,
     * `Pacific/Enderbury`, `Pacific/Kiritimati`, `Indian/Comoro`, `America/St_Kitts`, `Asia/Pyongyang`, `Asia/Seoul`,
     * `Asia/Kuwait`, `America/Cayman`, `Asia/Almaty`, `Asia/Qyzylorda`, `Asia/Aqtobe`, `Asia/Aqtau`, `Asia/Oral`,
     * `Asia/Vientiane`, `Asia/Beirut`, `America/St_Lucia`, `Europe/Vaduz`, `Asia/Colombo`, `Africa/Monrovia`, `Africa/Maseru`,
     * `Europe/Vilnius`, `Europe/Luxembourg`, `Europe/Riga`, `Africa/Tripoli`, `Africa/Casablanca`, `Europe/Monaco`,
     * `Europe/Chisinau`, `Europe/Podgorica`, `America/Marigot`, `Indian/Antananarivo`, `Pacific/Majuro`, `Pacific/Kwajalein`,
     * `Europe/Skopje`, `Africa/Bamako`, `Asia/Rangoon`, `Asia/Ulaanbaatar`, `Asia/Hovd`, `Asia/Choibalsan`, `Asia/Macau`,
     * `Pacific/Saipan`, `America/Martinique`, `Africa/Nouakchott`, `America/Montserrat`, `Europe/Malta`, `Indian/Mauritius`,
     * `Indian/Maldives`, `Africa/Blantyre`, `America/Mexico_City`, `America/Cancun`, `America/Merida`, `America/Monterrey`,
     * `America/Matamoros`, `America/Mazatlan`, `America/Chihuahua`, `America/Ojinaga`, `America/Hermosillo`,
     * `America/Tijuana`, `America/Santa_Isabel`, `America/Bahia_Banderas`, `Asia/Kuala_Lumpur`, `Asia/Kuching`,
     * `Africa/Maputo`, `Africa/Windhoek`, `Pacific/Noumea`, `Africa/Niamey`, `Pacific/Norfolk`, `Africa/Lagos`,
     * `America/Managua`, `Europe/Amsterdam`, `Europe/Oslo`, `Asia/Kathmandu`, `Pacific/Nauru`, `Pacific/Niue`,
     * `Pacific/Auckland`, `Pacific/Chatham`, `Asia/Muscat`, `America/Panama`, `America/Lima`, `Pacific/Tahiti`,
     * `Pacific/Marquesas`, `Pacific/Gambier`, `Pacific/Port_Moresby`, `Asia/Manila`, `Asia/Karachi`, `Europe/Warsaw`,
     * `America/Miquelon`, `Pacific/Pitcairn`, `America/Puerto_Rico`, `Asia/Gaza`, `Asia/Hebron`, `Europe/Lisbon`,
     * `Atlantic/Madeira`, `Atlantic/Azores`, `Pacific/Palau`, `America/Asuncion`, `Asia/Qatar`, `Indian/Reunion`,
     * `Europe/Bucharest`, `Europe/Belgrade`, `Europe/Kaliningrad`, `Europe/Moscow`, `Europe/Volgograd`, `Europe/Samara`,
     * `Asia/Yekaterinburg`, `Asia/Omsk`, `Asia/Novosibirsk`, `Asia/Novokuznetsk`, `Asia/Krasnoyarsk`, `Asia/Irkutsk`,
     * `Asia/Yakutsk`, `Asia/Khandyga`, `Asia/Vladivostok`, `Asia/Sakhalin`, `Asia/Ust-Nera`, `Asia/Magadan`, `Asia/Kamchatka`,
     * `Asia/Anadyr`, `Africa/Kigali`, `Asia/Riyadh`, `Pacific/Guadalcanal`, `Indian/Mahe`, `Africa/Khartoum`,
     * `Europe/Stockholm`, `Asia/Singapore`, `Atlantic/St_Helena`, `Europe/Ljubljana`, `Arctic/Longyearbyen`,
     * `Europe/Bratislava`, `Africa/Freetown`, `Europe/San_Marino`, `Africa/Dakar`, `Africa/Mogadishu`, `America/Paramaribo`,
     * `Africa/Juba`, `Africa/Sao_Tome`, `America/El_Salvador`, `America/Lower_Princes`, `Asia/Damascus`, `Africa/Mbabane`,
     * `America/Grand_Turk`, `Africa/Ndjamena`, `Indian/Kerguelen`, `Africa/Lome`, `Asia/Bangkok`, `Asia/Dushanbe`,
     * `Pacific/Fakaofo`, `Asia/Dili`, `Asia/Ashgabat`, `Africa/Tunis`, `Pacific/Tongatapu`, `Europe/Istanbul`,
     * `America/Port_of_Spain`, `Pacific/Funafuti`, `Asia/Taipei`, `Africa/Dar_es_Salaam`, `Europe/Kiev`, `Europe/Uzhgorod`,
     * `Europe/Zaporozhye`, `Europe/Simferopol`, `Africa/Kampala`, `Pacific/Johnston`, `Pacific/Midway`, `Pacific/Wake`,
     * `America/New_York`, `America/Detroit`, `America/Kentucky/Louisville`, `America/Kentucky/Monticello`,
     * `America/Indiana/Indianapolis`, `America/Indiana/Vincennes`, `America/Indiana/Winamac`, `America/Indiana/Marengo`,
     * `America/Indiana/Petersburg`, `America/Indiana/Vevay`, `America/Chicago`, `America/Indiana/Tell_City`,
     * `America/Indiana/Knox`, `America/Menominee`, `America/North_Dakota/Center`, `America/North_Dakota/New_Salem`,
     * `America/North_Dakota/Beulah`, `America/Denver`, `America/Boise`, `America/Phoenix`, `America/Los_Angeles`,
     * `America/Anchorage`, `America/Juneau`, `America/Sitka`, `America/Yakutat`, `America/Nome`, `America/Adak`,
     * `America/Metlakatla`, `Pacific/Honolulu`, `America/Montevideo`, `Asia/Samarkand`, `Asia/Tashkent`, `Europe/Vatican`,
     * `America/St_Vincent`, `America/Caracas`, `America/Tortola`, `America/St_Thomas`, `Asia/Ho_Chi_Minh`, `Pacific/Efate`,
     * `Pacific/Wallis`, `Pacific/Apia`, `Asia/Aden`, `Indian/Mayotte`, `Africa/Johannesburg`, `Africa/Lusaka`,
     * `Africa/Harare`, `UTC` - Default value: `UTC`
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return Set the timezone - Choices: `Europe/Andorra`, `Asia/Dubai`, `Asia/Kabul`, `America/Antigua`, `America/Anguilla`,
     * `Europe/Tirane`, `Asia/Yerevan`, `Africa/Luanda`, `Antarctica/McMurdo`, `Antarctica/Rothera`, `Antarctica/Palmer`,
     * `Antarctica/Mawson`, `Antarctica/Davis`, `Antarctica/Casey`, `Antarctica/Vostok`, `Antarctica/DumontDUrville`,
     * `Antarctica/Syowa`, `America/Argentina/Buenos_Aires`, `America/Argentina/Cordoba`, `America/Argentina/Salta`,
     * `America/Argentina/Jujuy`, `America/Argentina/Tucuman`, `America/Argentina/Catamarca`, `America/Argentina/La_Rioja`,
     * `America/Argentina/San_Juan`, `America/Argentina/Mendoza`, `America/Argentina/San_Luis`,
     * `America/Argentina/Rio_Gallegos`, `America/Argentina/Ushuaia`, `Pacific/Pago_Pago`, `Europe/Vienna`,
     * `Australia/Lord_Howe`, `Antarctica/Macquarie`, `Australia/Hobart`, `Australia/Currie`, `Australia/Melbourne`,
     * `Australia/Sydney`, `Australia/Broken_Hill`, `Australia/Brisbane`, `Australia/Lindeman`, `Australia/Adelaide`,
     * `Australia/Darwin`, `Australia/Perth`, `Australia/Eucla`, `America/Aruba`, `Europe/Mariehamn`, `Asia/Baku`,
     * `Europe/Sarajevo`, `America/Barbados`, `Asia/Dhaka`, `Europe/Brussels`, `Africa/Ouagadougou`, `Europe/Sofia`,
     * `Asia/Bahrain`, `Africa/Bujumbura`, `Africa/Porto-Novo`, `America/St_Barthelemy`, `Atlantic/Bermuda`, `Asia/Brunei`,
     * `America/La_Paz`, `America/Kralendijk`, `America/Noronha`, `America/Belem`, `America/Fortaleza`, `America/Recife`,
     * `America/Araguaina`, `America/Maceio`, `America/Bahia`, `America/Sao_Paulo`, `America/Campo_Grande`, `America/Cuiaba`,
     * `America/Santarem`, `America/Porto_Velho`, `America/Boa_Vista`, `America/Manaus`, `America/Eirunepe`,
     * `America/Rio_Branco`, `America/Nassau`, `Asia/Thimphu`, `Africa/Gaborone`, `Europe/Minsk`, `America/Belize`,
     * `America/St_Johns`, `America/Halifax`, `America/Glace_Bay`, `America/Moncton`, `America/Goose_Bay`,
     * `America/Blanc-Sablon`, `America/Toronto`, `America/Nipigon`, `America/Thunder_Bay`, `America/Iqaluit`,
     * `America/Pangnirtung`, `America/Resolute`, `America/Atikokan`, `America/Rankin_Inlet`, `America/Winnipeg`,
     * `America/Rainy_River`, `America/Regina`, `America/Swift_Current`, `America/Edmonton`, `America/Cambridge_Bay`,
     * `America/Yellowknife`, `America/Inuvik`, `America/Creston`, `America/Dawson_Creek`, `America/Vancouver`,
     * `America/Whitehorse`, `America/Dawson`, `Indian/Cocos`, `Africa/Kinshasa`, `Africa/Lubumbashi`, `Africa/Bangui`,
     * `Africa/Brazzaville`, `Europe/Zurich`, `Africa/Abidjan`, `Pacific/Rarotonga`, `America/Santiago`, `Pacific/Easter`,
     * `Africa/Douala`, `Asia/Shanghai`, `Asia/Harbin`, `Asia/Chongqing`, `Asia/Urumqi`, `Asia/Kashgar`, `America/Bogota`,
     * `America/Costa_Rica`, `America/Havana`, `Atlantic/Cape_Verde`, `America/Curacao`, `Indian/Christmas`, `Asia/Nicosia`,
     * `Europe/Prague`, `Europe/Berlin`, `Europe/Busingen`, `Africa/Djibouti`, `Europe/Copenhagen`, `America/Dominica`,
     * `America/Santo_Domingo`, `Africa/Algiers`, `America/Guayaquil`, `Pacific/Galapagos`, `Europe/Tallinn`, `Africa/Cairo`,
     * `Africa/El_Aaiun`, `Africa/Asmara`, `Europe/Madrid`, `Africa/Ceuta`, `Atlantic/Canary`, `Africa/Addis_Ababa`,
     * `Europe/Helsinki`, `Pacific/Fiji`, `Atlantic/Stanley`, `Pacific/Chuuk`, `Pacific/Pohnpei`, `Pacific/Kosrae`,
     * `Atlantic/Faroe`, `Europe/Paris`, `Africa/Libreville`, `Europe/London`, `America/Grenada`, `Asia/Tbilisi`,
     * `America/Cayenne`, `Europe/Guernsey`, `Africa/Accra`, `Europe/Gibraltar`, `America/Godthab`, `America/Danmarkshavn`,
     * `America/Scoresbysund`, `America/Thule`, `Africa/Banjul`, `Africa/Conakry`, `America/Guadeloupe`, `Africa/Malabo`,
     * `Europe/Athens`, `Atlantic/South_Georgia`, `America/Guatemala`, `Pacific/Guam`, `Africa/Bissau`, `America/Guyana`,
     * `Asia/Hong_Kong`, `America/Tegucigalpa`, `Europe/Zagreb`, `America/Port-au-Prince`, `Europe/Budapest`, `Asia/Jakarta`,
     * `Asia/Pontianak`, `Asia/Makassar`, `Asia/Jayapura`, `Europe/Dublin`, `Asia/Jerusalem`, `Europe/Isle_of_Man`,
     * `Asia/Kolkata`, `Indian/Chagos`, `Asia/Baghdad`, `Asia/Tehran`, `Atlantic/Reykjavik`, `Europe/Rome`, `Europe/Jersey`,
     * `America/Jamaica`, `Asia/Amman`, `Asia/Tokyo`, `Africa/Nairobi`, `Asia/Bishkek`, `Asia/Phnom_Penh`, `Pacific/Tarawa`,
     * `Pacific/Enderbury`, `Pacific/Kiritimati`, `Indian/Comoro`, `America/St_Kitts`, `Asia/Pyongyang`, `Asia/Seoul`,
     * `Asia/Kuwait`, `America/Cayman`, `Asia/Almaty`, `Asia/Qyzylorda`, `Asia/Aqtobe`, `Asia/Aqtau`, `Asia/Oral`,
     * `Asia/Vientiane`, `Asia/Beirut`, `America/St_Lucia`, `Europe/Vaduz`, `Asia/Colombo`, `Africa/Monrovia`, `Africa/Maseru`,
     * `Europe/Vilnius`, `Europe/Luxembourg`, `Europe/Riga`, `Africa/Tripoli`, `Africa/Casablanca`, `Europe/Monaco`,
     * `Europe/Chisinau`, `Europe/Podgorica`, `America/Marigot`, `Indian/Antananarivo`, `Pacific/Majuro`, `Pacific/Kwajalein`,
     * `Europe/Skopje`, `Africa/Bamako`, `Asia/Rangoon`, `Asia/Ulaanbaatar`, `Asia/Hovd`, `Asia/Choibalsan`, `Asia/Macau`,
     * `Pacific/Saipan`, `America/Martinique`, `Africa/Nouakchott`, `America/Montserrat`, `Europe/Malta`, `Indian/Mauritius`,
     * `Indian/Maldives`, `Africa/Blantyre`, `America/Mexico_City`, `America/Cancun`, `America/Merida`, `America/Monterrey`,
     * `America/Matamoros`, `America/Mazatlan`, `America/Chihuahua`, `America/Ojinaga`, `America/Hermosillo`,
     * `America/Tijuana`, `America/Santa_Isabel`, `America/Bahia_Banderas`, `Asia/Kuala_Lumpur`, `Asia/Kuching`,
     * `Africa/Maputo`, `Africa/Windhoek`, `Pacific/Noumea`, `Africa/Niamey`, `Pacific/Norfolk`, `Africa/Lagos`,
     * `America/Managua`, `Europe/Amsterdam`, `Europe/Oslo`, `Asia/Kathmandu`, `Pacific/Nauru`, `Pacific/Niue`,
     * `Pacific/Auckland`, `Pacific/Chatham`, `Asia/Muscat`, `America/Panama`, `America/Lima`, `Pacific/Tahiti`,
     * `Pacific/Marquesas`, `Pacific/Gambier`, `Pacific/Port_Moresby`, `Asia/Manila`, `Asia/Karachi`, `Europe/Warsaw`,
     * `America/Miquelon`, `Pacific/Pitcairn`, `America/Puerto_Rico`, `Asia/Gaza`, `Asia/Hebron`, `Europe/Lisbon`,
     * `Atlantic/Madeira`, `Atlantic/Azores`, `Pacific/Palau`, `America/Asuncion`, `Asia/Qatar`, `Indian/Reunion`,
     * `Europe/Bucharest`, `Europe/Belgrade`, `Europe/Kaliningrad`, `Europe/Moscow`, `Europe/Volgograd`, `Europe/Samara`,
     * `Asia/Yekaterinburg`, `Asia/Omsk`, `Asia/Novosibirsk`, `Asia/Novokuznetsk`, `Asia/Krasnoyarsk`, `Asia/Irkutsk`,
     * `Asia/Yakutsk`, `Asia/Khandyga`, `Asia/Vladivostok`, `Asia/Sakhalin`, `Asia/Ust-Nera`, `Asia/Magadan`, `Asia/Kamchatka`,
     * `Asia/Anadyr`, `Africa/Kigali`, `Asia/Riyadh`, `Pacific/Guadalcanal`, `Indian/Mahe`, `Africa/Khartoum`,
     * `Europe/Stockholm`, `Asia/Singapore`, `Atlantic/St_Helena`, `Europe/Ljubljana`, `Arctic/Longyearbyen`,
     * `Europe/Bratislava`, `Africa/Freetown`, `Europe/San_Marino`, `Africa/Dakar`, `Africa/Mogadishu`, `America/Paramaribo`,
     * `Africa/Juba`, `Africa/Sao_Tome`, `America/El_Salvador`, `America/Lower_Princes`, `Asia/Damascus`, `Africa/Mbabane`,
     * `America/Grand_Turk`, `Africa/Ndjamena`, `Indian/Kerguelen`, `Africa/Lome`, `Asia/Bangkok`, `Asia/Dushanbe`,
     * `Pacific/Fakaofo`, `Asia/Dili`, `Asia/Ashgabat`, `Africa/Tunis`, `Pacific/Tongatapu`, `Europe/Istanbul`,
     * `America/Port_of_Spain`, `Pacific/Funafuti`, `Asia/Taipei`, `Africa/Dar_es_Salaam`, `Europe/Kiev`, `Europe/Uzhgorod`,
     * `Europe/Zaporozhye`, `Europe/Simferopol`, `Africa/Kampala`, `Pacific/Johnston`, `Pacific/Midway`, `Pacific/Wake`,
     * `America/New_York`, `America/Detroit`, `America/Kentucky/Louisville`, `America/Kentucky/Monticello`,
     * `America/Indiana/Indianapolis`, `America/Indiana/Vincennes`, `America/Indiana/Winamac`, `America/Indiana/Marengo`,
     * `America/Indiana/Petersburg`, `America/Indiana/Vevay`, `America/Chicago`, `America/Indiana/Tell_City`,
     * `America/Indiana/Knox`, `America/Menominee`, `America/North_Dakota/Center`, `America/North_Dakota/New_Salem`,
     * `America/North_Dakota/Beulah`, `America/Denver`, `America/Boise`, `America/Phoenix`, `America/Los_Angeles`,
     * `America/Anchorage`, `America/Juneau`, `America/Sitka`, `America/Yakutat`, `America/Nome`, `America/Adak`,
     * `America/Metlakatla`, `Pacific/Honolulu`, `America/Montevideo`, `Asia/Samarkand`, `Asia/Tashkent`, `Europe/Vatican`,
     * `America/St_Vincent`, `America/Caracas`, `America/Tortola`, `America/St_Thomas`, `Asia/Ho_Chi_Minh`, `Pacific/Efate`,
     * `Pacific/Wallis`, `Pacific/Apia`, `Asia/Aden`, `Indian/Mayotte`, `Africa/Johannesburg`, `Africa/Lusaka`,
     * `Africa/Harare`, `UTC` - Default value: `UTC`
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="timezoneVariable")
    private @Nullable Output<String> timezoneVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> timezoneVariable() {
        return Optional.ofNullable(this.timezoneVariable);
    }

    /**
     * Enable or disable default gateway tracking - Default value: `true`
     * 
     */
    @Import(name="trackDefaultGateway")
    private @Nullable Output<Boolean> trackDefaultGateway;

    /**
     * @return Enable or disable default gateway tracking - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> trackDefaultGateway() {
        return Optional.ofNullable(this.trackDefaultGateway);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="trackDefaultGatewayVariable")
    private @Nullable Output<String> trackDefaultGatewayVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> trackDefaultGatewayVariable() {
        return Optional.ofNullable(this.trackDefaultGatewayVariable);
    }

    /**
     * OMP Tag attached to routes based on interface tracking - Range: `1`-`4294967295`
     * 
     */
    @Import(name="trackInterfaceTag")
    private @Nullable Output<Integer> trackInterfaceTag;

    /**
     * @return OMP Tag attached to routes based on interface tracking - Range: `1`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> trackInterfaceTag() {
        return Optional.ofNullable(this.trackInterfaceTag);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="trackInterfaceTagVariable")
    private @Nullable Output<String> trackInterfaceTagVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> trackInterfaceTagVariable() {
        return Optional.ofNullable(this.trackInterfaceTagVariable);
    }

    /**
     * Configure tracking of transport - Default value: `true`
     * 
     */
    @Import(name="trackTransport")
    private @Nullable Output<Boolean> trackTransport;

    /**
     * @return Configure tracking of transport - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> trackTransport() {
        return Optional.ofNullable(this.trackTransport);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="trackTransportVariable")
    private @Nullable Output<String> trackTransportVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> trackTransportVariable() {
        return Optional.ofNullable(this.trackTransportVariable);
    }

    /**
     * Tracker configuration
     * 
     */
    @Import(name="trackers")
    private @Nullable Output<List<CiscoSystemFeatureTemplateTrackerArgs>> trackers;

    /**
     * @return Tracker configuration
     * 
     */
    public Optional<Output<List<CiscoSystemFeatureTemplateTrackerArgs>>> trackers() {
        return Optional.ofNullable(this.trackers);
    }

    /**
     * Enable transport gateway - Default value: `false`
     * 
     */
    @Import(name="transportGateway")
    private @Nullable Output<Boolean> transportGateway;

    /**
     * @return Enable transport gateway - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> transportGateway() {
        return Optional.ofNullable(this.transportGateway);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="transportGatewayVariable")
    private @Nullable Output<String> transportGatewayVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> transportGatewayVariable() {
        return Optional.ofNullable(this.transportGatewayVariable);
    }

    /**
     * The version of the feature template
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of the feature template
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private CiscoSystemFeatureTemplateState() {}

    private CiscoSystemFeatureTemplateState(CiscoSystemFeatureTemplateState $) {
        this.adminTechOnFailure = $.adminTechOnFailure;
        this.adminTechOnFailureVariable = $.adminTechOnFailureVariable;
        this.affinityGroupNumber = $.affinityGroupNumber;
        this.affinityGroupNumberVariable = $.affinityGroupNumberVariable;
        this.affinityGroupPreferenceVariable = $.affinityGroupPreferenceVariable;
        this.affinityGroupPreferences = $.affinityGroupPreferences;
        this.consoleBaudRate = $.consoleBaudRate;
        this.consoleBaudRateVariable = $.consoleBaudRateVariable;
        this.controlSessionPps = $.controlSessionPps;
        this.controlSessionPpsVariable = $.controlSessionPpsVariable;
        this.controllerGroupListVariable = $.controllerGroupListVariable;
        this.controllerGroupLists = $.controllerGroupLists;
        this.description = $.description;
        this.deviceGroups = $.deviceGroups;
        this.deviceGroupsVariable = $.deviceGroupsVariable;
        this.deviceTypes = $.deviceTypes;
        this.enableMrfMigration = $.enableMrfMigration;
        this.geoFencing = $.geoFencing;
        this.geoFencingRange = $.geoFencingRange;
        this.geoFencingRangeVariable = $.geoFencingRangeVariable;
        this.geoFencingSms = $.geoFencingSms;
        this.geoFencingSmsPhoneNumbers = $.geoFencingSmsPhoneNumbers;
        this.hostname = $.hostname;
        this.hostnameVariable = $.hostnameVariable;
        this.idleTimeout = $.idleTimeout;
        this.idleTimeoutVariable = $.idleTimeoutVariable;
        this.latitude = $.latitude;
        this.latitudeVariable = $.latitudeVariable;
        this.location = $.location;
        this.locationVariable = $.locationVariable;
        this.longitude = $.longitude;
        this.longitudeVariable = $.longitudeVariable;
        this.maxOmpSessions = $.maxOmpSessions;
        this.maxOmpSessionsVariable = $.maxOmpSessionsVariable;
        this.migrationBgpCommunity = $.migrationBgpCommunity;
        this.multiTenant = $.multiTenant;
        this.multiTenantVariable = $.multiTenantVariable;
        this.name = $.name;
        this.objectTrackers = $.objectTrackers;
        this.onDemandTunnel = $.onDemandTunnel;
        this.onDemandTunnelIdleTimeout = $.onDemandTunnelIdleTimeout;
        this.onDemandTunnelIdleTimeoutVariable = $.onDemandTunnelIdleTimeoutVariable;
        this.onDemandTunnelVariable = $.onDemandTunnelVariable;
        this.overlayId = $.overlayId;
        this.overlayIdVariable = $.overlayIdVariable;
        this.portHopping = $.portHopping;
        this.portHoppingVariable = $.portHoppingVariable;
        this.portOffset = $.portOffset;
        this.portOffsetVariable = $.portOffsetVariable;
        this.regionId = $.regionId;
        this.regionIdVariable = $.regionIdVariable;
        this.role = $.role;
        this.roleVariable = $.roleVariable;
        this.secondaryRegionId = $.secondaryRegionId;
        this.secondaryRegionIdVariable = $.secondaryRegionIdVariable;
        this.siteId = $.siteId;
        this.siteIdVariable = $.siteIdVariable;
        this.systemDescription = $.systemDescription;
        this.systemDescriptionVariable = $.systemDescriptionVariable;
        this.systemIp = $.systemIp;
        this.systemIpVariable = $.systemIpVariable;
        this.templateType = $.templateType;
        this.timezone = $.timezone;
        this.timezoneVariable = $.timezoneVariable;
        this.trackDefaultGateway = $.trackDefaultGateway;
        this.trackDefaultGatewayVariable = $.trackDefaultGatewayVariable;
        this.trackInterfaceTag = $.trackInterfaceTag;
        this.trackInterfaceTagVariable = $.trackInterfaceTagVariable;
        this.trackTransport = $.trackTransport;
        this.trackTransportVariable = $.trackTransportVariable;
        this.trackers = $.trackers;
        this.transportGateway = $.transportGateway;
        this.transportGatewayVariable = $.transportGatewayVariable;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoSystemFeatureTemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoSystemFeatureTemplateState $;

        public Builder() {
            $ = new CiscoSystemFeatureTemplateState();
        }

        public Builder(CiscoSystemFeatureTemplateState defaults) {
            $ = new CiscoSystemFeatureTemplateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminTechOnFailure Collect admin-tech before reboot due to daemon failure - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder adminTechOnFailure(@Nullable Output<Boolean> adminTechOnFailure) {
            $.adminTechOnFailure = adminTechOnFailure;
            return this;
        }

        /**
         * @param adminTechOnFailure Collect admin-tech before reboot due to daemon failure - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder adminTechOnFailure(Boolean adminTechOnFailure) {
            return adminTechOnFailure(Output.of(adminTechOnFailure));
        }

        /**
         * @param adminTechOnFailureVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder adminTechOnFailureVariable(@Nullable Output<String> adminTechOnFailureVariable) {
            $.adminTechOnFailureVariable = adminTechOnFailureVariable;
            return this;
        }

        /**
         * @param adminTechOnFailureVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder adminTechOnFailureVariable(String adminTechOnFailureVariable) {
            return adminTechOnFailureVariable(Output.of(adminTechOnFailureVariable));
        }

        /**
         * @param affinityGroupNumber Set the affinity group number for router - Range: `1`-`255`
         * 
         * @return builder
         * 
         */
        public Builder affinityGroupNumber(@Nullable Output<Integer> affinityGroupNumber) {
            $.affinityGroupNumber = affinityGroupNumber;
            return this;
        }

        /**
         * @param affinityGroupNumber Set the affinity group number for router - Range: `1`-`255`
         * 
         * @return builder
         * 
         */
        public Builder affinityGroupNumber(Integer affinityGroupNumber) {
            return affinityGroupNumber(Output.of(affinityGroupNumber));
        }

        /**
         * @param affinityGroupNumberVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder affinityGroupNumberVariable(@Nullable Output<String> affinityGroupNumberVariable) {
            $.affinityGroupNumberVariable = affinityGroupNumberVariable;
            return this;
        }

        /**
         * @param affinityGroupNumberVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder affinityGroupNumberVariable(String affinityGroupNumberVariable) {
            return affinityGroupNumberVariable(Output.of(affinityGroupNumberVariable));
        }

        /**
         * @param affinityGroupPreferenceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder affinityGroupPreferenceVariable(@Nullable Output<String> affinityGroupPreferenceVariable) {
            $.affinityGroupPreferenceVariable = affinityGroupPreferenceVariable;
            return this;
        }

        /**
         * @param affinityGroupPreferenceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder affinityGroupPreferenceVariable(String affinityGroupPreferenceVariable) {
            return affinityGroupPreferenceVariable(Output.of(affinityGroupPreferenceVariable));
        }

        /**
         * @param affinityGroupPreferences Set the affinity group preference
         * 
         * @return builder
         * 
         */
        public Builder affinityGroupPreferences(@Nullable Output<List<Integer>> affinityGroupPreferences) {
            $.affinityGroupPreferences = affinityGroupPreferences;
            return this;
        }

        /**
         * @param affinityGroupPreferences Set the affinity group preference
         * 
         * @return builder
         * 
         */
        public Builder affinityGroupPreferences(List<Integer> affinityGroupPreferences) {
            return affinityGroupPreferences(Output.of(affinityGroupPreferences));
        }

        /**
         * @param affinityGroupPreferences Set the affinity group preference
         * 
         * @return builder
         * 
         */
        public Builder affinityGroupPreferences(Integer... affinityGroupPreferences) {
            return affinityGroupPreferences(List.of(affinityGroupPreferences));
        }

        /**
         * @param consoleBaudRate Set the console baud rate - Choices: `1200`, `2400`, `4800`, `9600`, `19200`, `38400`, `57600`, `115200` - Default
         * value: `9600`
         * 
         * @return builder
         * 
         */
        public Builder consoleBaudRate(@Nullable Output<String> consoleBaudRate) {
            $.consoleBaudRate = consoleBaudRate;
            return this;
        }

        /**
         * @param consoleBaudRate Set the console baud rate - Choices: `1200`, `2400`, `4800`, `9600`, `19200`, `38400`, `57600`, `115200` - Default
         * value: `9600`
         * 
         * @return builder
         * 
         */
        public Builder consoleBaudRate(String consoleBaudRate) {
            return consoleBaudRate(Output.of(consoleBaudRate));
        }

        /**
         * @param consoleBaudRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder consoleBaudRateVariable(@Nullable Output<String> consoleBaudRateVariable) {
            $.consoleBaudRateVariable = consoleBaudRateVariable;
            return this;
        }

        /**
         * @param consoleBaudRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder consoleBaudRateVariable(String consoleBaudRateVariable) {
            return consoleBaudRateVariable(Output.of(consoleBaudRateVariable));
        }

        /**
         * @param controlSessionPps Set the policer rate for control sessions - Range: `1`-`65535` - Default value: `300`
         * 
         * @return builder
         * 
         */
        public Builder controlSessionPps(@Nullable Output<Integer> controlSessionPps) {
            $.controlSessionPps = controlSessionPps;
            return this;
        }

        /**
         * @param controlSessionPps Set the policer rate for control sessions - Range: `1`-`65535` - Default value: `300`
         * 
         * @return builder
         * 
         */
        public Builder controlSessionPps(Integer controlSessionPps) {
            return controlSessionPps(Output.of(controlSessionPps));
        }

        /**
         * @param controlSessionPpsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder controlSessionPpsVariable(@Nullable Output<String> controlSessionPpsVariable) {
            $.controlSessionPpsVariable = controlSessionPpsVariable;
            return this;
        }

        /**
         * @param controlSessionPpsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder controlSessionPpsVariable(String controlSessionPpsVariable) {
            return controlSessionPpsVariable(Output.of(controlSessionPpsVariable));
        }

        /**
         * @param controllerGroupListVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder controllerGroupListVariable(@Nullable Output<String> controllerGroupListVariable) {
            $.controllerGroupListVariable = controllerGroupListVariable;
            return this;
        }

        /**
         * @param controllerGroupListVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder controllerGroupListVariable(String controllerGroupListVariable) {
            return controllerGroupListVariable(Output.of(controllerGroupListVariable));
        }

        /**
         * @param controllerGroupLists Configure a list of comma-separated device groups
         * 
         * @return builder
         * 
         */
        public Builder controllerGroupLists(@Nullable Output<List<Integer>> controllerGroupLists) {
            $.controllerGroupLists = controllerGroupLists;
            return this;
        }

        /**
         * @param controllerGroupLists Configure a list of comma-separated device groups
         * 
         * @return builder
         * 
         */
        public Builder controllerGroupLists(List<Integer> controllerGroupLists) {
            return controllerGroupLists(Output.of(controllerGroupLists));
        }

        /**
         * @param controllerGroupLists Configure a list of comma-separated device groups
         * 
         * @return builder
         * 
         */
        public Builder controllerGroupLists(Integer... controllerGroupLists) {
            return controllerGroupLists(List.of(controllerGroupLists));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceGroups Device groups (Use comma(,) for multiple groups)
         * 
         * @return builder
         * 
         */
        public Builder deviceGroups(@Nullable Output<List<String>> deviceGroups) {
            $.deviceGroups = deviceGroups;
            return this;
        }

        /**
         * @param deviceGroups Device groups (Use comma(,) for multiple groups)
         * 
         * @return builder
         * 
         */
        public Builder deviceGroups(List<String> deviceGroups) {
            return deviceGroups(Output.of(deviceGroups));
        }

        /**
         * @param deviceGroups Device groups (Use comma(,) for multiple groups)
         * 
         * @return builder
         * 
         */
        public Builder deviceGroups(String... deviceGroups) {
            return deviceGroups(List.of(deviceGroups));
        }

        /**
         * @param deviceGroupsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder deviceGroupsVariable(@Nullable Output<String> deviceGroupsVariable) {
            $.deviceGroupsVariable = deviceGroupsVariable;
            return this;
        }

        /**
         * @param deviceGroupsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder deviceGroupsVariable(String deviceGroupsVariable) {
            return deviceGroupsVariable(Output.of(deviceGroupsVariable));
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(@Nullable Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param enableMrfMigration Enable migration mode to Multi-Region Fabric - Choices: `enabled`, `enabled-from-bgp-core`
         * 
         * @return builder
         * 
         */
        public Builder enableMrfMigration(@Nullable Output<String> enableMrfMigration) {
            $.enableMrfMigration = enableMrfMigration;
            return this;
        }

        /**
         * @param enableMrfMigration Enable migration mode to Multi-Region Fabric - Choices: `enabled`, `enabled-from-bgp-core`
         * 
         * @return builder
         * 
         */
        public Builder enableMrfMigration(String enableMrfMigration) {
            return enableMrfMigration(Output.of(enableMrfMigration));
        }

        /**
         * @param geoFencing Enable Geo fencing - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder geoFencing(@Nullable Output<Boolean> geoFencing) {
            $.geoFencing = geoFencing;
            return this;
        }

        /**
         * @param geoFencing Enable Geo fencing - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder geoFencing(Boolean geoFencing) {
            return geoFencing(Output.of(geoFencing));
        }

        /**
         * @param geoFencingRange Set the device’s geo fencing range - Range: `100`-`10000` - Default value: `100`
         * 
         * @return builder
         * 
         */
        public Builder geoFencingRange(@Nullable Output<Integer> geoFencingRange) {
            $.geoFencingRange = geoFencingRange;
            return this;
        }

        /**
         * @param geoFencingRange Set the device’s geo fencing range - Range: `100`-`10000` - Default value: `100`
         * 
         * @return builder
         * 
         */
        public Builder geoFencingRange(Integer geoFencingRange) {
            return geoFencingRange(Output.of(geoFencingRange));
        }

        /**
         * @param geoFencingRangeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder geoFencingRangeVariable(@Nullable Output<String> geoFencingRangeVariable) {
            $.geoFencingRangeVariable = geoFencingRangeVariable;
            return this;
        }

        /**
         * @param geoFencingRangeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder geoFencingRangeVariable(String geoFencingRangeVariable) {
            return geoFencingRangeVariable(Output.of(geoFencingRangeVariable));
        }

        /**
         * @param geoFencingSms Enable Geo fencing - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder geoFencingSms(@Nullable Output<Boolean> geoFencingSms) {
            $.geoFencingSms = geoFencingSms;
            return this;
        }

        /**
         * @param geoFencingSms Enable Geo fencing - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder geoFencingSms(Boolean geoFencingSms) {
            return geoFencingSms(Output.of(geoFencingSms));
        }

        /**
         * @param geoFencingSmsPhoneNumbers Set device’s geo fencing SMS phone number
         * 
         * @return builder
         * 
         */
        public Builder geoFencingSmsPhoneNumbers(@Nullable Output<List<CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberArgs>> geoFencingSmsPhoneNumbers) {
            $.geoFencingSmsPhoneNumbers = geoFencingSmsPhoneNumbers;
            return this;
        }

        /**
         * @param geoFencingSmsPhoneNumbers Set device’s geo fencing SMS phone number
         * 
         * @return builder
         * 
         */
        public Builder geoFencingSmsPhoneNumbers(List<CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberArgs> geoFencingSmsPhoneNumbers) {
            return geoFencingSmsPhoneNumbers(Output.of(geoFencingSmsPhoneNumbers));
        }

        /**
         * @param geoFencingSmsPhoneNumbers Set device’s geo fencing SMS phone number
         * 
         * @return builder
         * 
         */
        public Builder geoFencingSmsPhoneNumbers(CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberArgs... geoFencingSmsPhoneNumbers) {
            return geoFencingSmsPhoneNumbers(List.of(geoFencingSmsPhoneNumbers));
        }

        /**
         * @param hostname Set the hostname
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Set the hostname
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param hostnameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder hostnameVariable(@Nullable Output<String> hostnameVariable) {
            $.hostnameVariable = hostnameVariable;
            return this;
        }

        /**
         * @param hostnameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder hostnameVariable(String hostnameVariable) {
            return hostnameVariable(Output.of(hostnameVariable));
        }

        /**
         * @param idleTimeout Idle CLI timeout in minutes - Range: `0`-`300`
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(@Nullable Output<Integer> idleTimeout) {
            $.idleTimeout = idleTimeout;
            return this;
        }

        /**
         * @param idleTimeout Idle CLI timeout in minutes - Range: `0`-`300`
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(Integer idleTimeout) {
            return idleTimeout(Output.of(idleTimeout));
        }

        /**
         * @param idleTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder idleTimeoutVariable(@Nullable Output<String> idleTimeoutVariable) {
            $.idleTimeoutVariable = idleTimeoutVariable;
            return this;
        }

        /**
         * @param idleTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder idleTimeoutVariable(String idleTimeoutVariable) {
            return idleTimeoutVariable(Output.of(idleTimeoutVariable));
        }

        /**
         * @param latitude Set the device’s physical latitude - Range: `-90`-`90`
         * 
         * @return builder
         * 
         */
        public Builder latitude(@Nullable Output<Double> latitude) {
            $.latitude = latitude;
            return this;
        }

        /**
         * @param latitude Set the device’s physical latitude - Range: `-90`-`90`
         * 
         * @return builder
         * 
         */
        public Builder latitude(Double latitude) {
            return latitude(Output.of(latitude));
        }

        /**
         * @param latitudeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder latitudeVariable(@Nullable Output<String> latitudeVariable) {
            $.latitudeVariable = latitudeVariable;
            return this;
        }

        /**
         * @param latitudeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder latitudeVariable(String latitudeVariable) {
            return latitudeVariable(Output.of(latitudeVariable));
        }

        /**
         * @param location Set the location of the device
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Set the location of the device
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param locationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder locationVariable(@Nullable Output<String> locationVariable) {
            $.locationVariable = locationVariable;
            return this;
        }

        /**
         * @param locationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder locationVariable(String locationVariable) {
            return locationVariable(Output.of(locationVariable));
        }

        /**
         * @param longitude Set the device’s physical longitude - Range: `-180`-`180`
         * 
         * @return builder
         * 
         */
        public Builder longitude(@Nullable Output<Double> longitude) {
            $.longitude = longitude;
            return this;
        }

        /**
         * @param longitude Set the device’s physical longitude - Range: `-180`-`180`
         * 
         * @return builder
         * 
         */
        public Builder longitude(Double longitude) {
            return longitude(Output.of(longitude));
        }

        /**
         * @param longitudeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder longitudeVariable(@Nullable Output<String> longitudeVariable) {
            $.longitudeVariable = longitudeVariable;
            return this;
        }

        /**
         * @param longitudeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder longitudeVariable(String longitudeVariable) {
            return longitudeVariable(Output.of(longitudeVariable));
        }

        /**
         * @param maxOmpSessions Set the maximum number of OMP sessions &lt;1..100&gt; the device can have - Range: `1`-`100`
         * 
         * @return builder
         * 
         */
        public Builder maxOmpSessions(@Nullable Output<Integer> maxOmpSessions) {
            $.maxOmpSessions = maxOmpSessions;
            return this;
        }

        /**
         * @param maxOmpSessions Set the maximum number of OMP sessions &lt;1..100&gt; the device can have - Range: `1`-`100`
         * 
         * @return builder
         * 
         */
        public Builder maxOmpSessions(Integer maxOmpSessions) {
            return maxOmpSessions(Output.of(maxOmpSessions));
        }

        /**
         * @param maxOmpSessionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder maxOmpSessionsVariable(@Nullable Output<String> maxOmpSessionsVariable) {
            $.maxOmpSessionsVariable = maxOmpSessionsVariable;
            return this;
        }

        /**
         * @param maxOmpSessionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder maxOmpSessionsVariable(String maxOmpSessionsVariable) {
            return maxOmpSessionsVariable(Output.of(maxOmpSessionsVariable));
        }

        /**
         * @param migrationBgpCommunity Set BGP community during migration from BGP-core based network - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder migrationBgpCommunity(@Nullable Output<Integer> migrationBgpCommunity) {
            $.migrationBgpCommunity = migrationBgpCommunity;
            return this;
        }

        /**
         * @param migrationBgpCommunity Set BGP community during migration from BGP-core based network - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder migrationBgpCommunity(Integer migrationBgpCommunity) {
            return migrationBgpCommunity(Output.of(migrationBgpCommunity));
        }

        /**
         * @param multiTenant Device is multi-tenant - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder multiTenant(@Nullable Output<Boolean> multiTenant) {
            $.multiTenant = multiTenant;
            return this;
        }

        /**
         * @param multiTenant Device is multi-tenant - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder multiTenant(Boolean multiTenant) {
            return multiTenant(Output.of(multiTenant));
        }

        /**
         * @param multiTenantVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder multiTenantVariable(@Nullable Output<String> multiTenantVariable) {
            $.multiTenantVariable = multiTenantVariable;
            return this;
        }

        /**
         * @param multiTenantVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder multiTenantVariable(String multiTenantVariable) {
            return multiTenantVariable(Output.of(multiTenantVariable));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param objectTrackers Object Track configuration
         * 
         * @return builder
         * 
         */
        public Builder objectTrackers(@Nullable Output<List<CiscoSystemFeatureTemplateObjectTrackerArgs>> objectTrackers) {
            $.objectTrackers = objectTrackers;
            return this;
        }

        /**
         * @param objectTrackers Object Track configuration
         * 
         * @return builder
         * 
         */
        public Builder objectTrackers(List<CiscoSystemFeatureTemplateObjectTrackerArgs> objectTrackers) {
            return objectTrackers(Output.of(objectTrackers));
        }

        /**
         * @param objectTrackers Object Track configuration
         * 
         * @return builder
         * 
         */
        public Builder objectTrackers(CiscoSystemFeatureTemplateObjectTrackerArgs... objectTrackers) {
            return objectTrackers(List.of(objectTrackers));
        }

        /**
         * @param onDemandTunnel Enable or disable On-demand Tunnel - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder onDemandTunnel(@Nullable Output<Boolean> onDemandTunnel) {
            $.onDemandTunnel = onDemandTunnel;
            return this;
        }

        /**
         * @param onDemandTunnel Enable or disable On-demand Tunnel - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder onDemandTunnel(Boolean onDemandTunnel) {
            return onDemandTunnel(Output.of(onDemandTunnel));
        }

        /**
         * @param onDemandTunnelIdleTimeout Idle CLI timeout in minutes - Range: `0`-`300`
         * 
         * @return builder
         * 
         */
        public Builder onDemandTunnelIdleTimeout(@Nullable Output<Integer> onDemandTunnelIdleTimeout) {
            $.onDemandTunnelIdleTimeout = onDemandTunnelIdleTimeout;
            return this;
        }

        /**
         * @param onDemandTunnelIdleTimeout Idle CLI timeout in minutes - Range: `0`-`300`
         * 
         * @return builder
         * 
         */
        public Builder onDemandTunnelIdleTimeout(Integer onDemandTunnelIdleTimeout) {
            return onDemandTunnelIdleTimeout(Output.of(onDemandTunnelIdleTimeout));
        }

        /**
         * @param onDemandTunnelIdleTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder onDemandTunnelIdleTimeoutVariable(@Nullable Output<String> onDemandTunnelIdleTimeoutVariable) {
            $.onDemandTunnelIdleTimeoutVariable = onDemandTunnelIdleTimeoutVariable;
            return this;
        }

        /**
         * @param onDemandTunnelIdleTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder onDemandTunnelIdleTimeoutVariable(String onDemandTunnelIdleTimeoutVariable) {
            return onDemandTunnelIdleTimeoutVariable(Output.of(onDemandTunnelIdleTimeoutVariable));
        }

        /**
         * @param onDemandTunnelVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder onDemandTunnelVariable(@Nullable Output<String> onDemandTunnelVariable) {
            $.onDemandTunnelVariable = onDemandTunnelVariable;
            return this;
        }

        /**
         * @param onDemandTunnelVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder onDemandTunnelVariable(String onDemandTunnelVariable) {
            return onDemandTunnelVariable(Output.of(onDemandTunnelVariable));
        }

        /**
         * @param overlayId Set the Overlay ID - Range: `1`-`4294967295` - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder overlayId(@Nullable Output<Integer> overlayId) {
            $.overlayId = overlayId;
            return this;
        }

        /**
         * @param overlayId Set the Overlay ID - Range: `1`-`4294967295` - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder overlayId(Integer overlayId) {
            return overlayId(Output.of(overlayId));
        }

        /**
         * @param overlayIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder overlayIdVariable(@Nullable Output<String> overlayIdVariable) {
            $.overlayIdVariable = overlayIdVariable;
            return this;
        }

        /**
         * @param overlayIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder overlayIdVariable(String overlayIdVariable) {
            return overlayIdVariable(Output.of(overlayIdVariable));
        }

        /**
         * @param portHopping Enable port hopping - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder portHopping(@Nullable Output<Boolean> portHopping) {
            $.portHopping = portHopping;
            return this;
        }

        /**
         * @param portHopping Enable port hopping - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder portHopping(Boolean portHopping) {
            return portHopping(Output.of(portHopping));
        }

        /**
         * @param portHoppingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder portHoppingVariable(@Nullable Output<String> portHoppingVariable) {
            $.portHoppingVariable = portHoppingVariable;
            return this;
        }

        /**
         * @param portHoppingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder portHoppingVariable(String portHoppingVariable) {
            return portHoppingVariable(Output.of(portHoppingVariable));
        }

        /**
         * @param portOffset Set the TLOC port offset when multiple devices are behind a NAT - Range: `0`-`19` - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder portOffset(@Nullable Output<Integer> portOffset) {
            $.portOffset = portOffset;
            return this;
        }

        /**
         * @param portOffset Set the TLOC port offset when multiple devices are behind a NAT - Range: `0`-`19` - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder portOffset(Integer portOffset) {
            return portOffset(Output.of(portOffset));
        }

        /**
         * @param portOffsetVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder portOffsetVariable(@Nullable Output<String> portOffsetVariable) {
            $.portOffsetVariable = portOffsetVariable;
            return this;
        }

        /**
         * @param portOffsetVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder portOffsetVariable(String portOffsetVariable) {
            return portOffsetVariable(Output.of(portOffsetVariable));
        }

        /**
         * @param regionId Set region ID - Range: `1`-`63`
         * 
         * @return builder
         * 
         */
        public Builder regionId(@Nullable Output<Integer> regionId) {
            $.regionId = regionId;
            return this;
        }

        /**
         * @param regionId Set region ID - Range: `1`-`63`
         * 
         * @return builder
         * 
         */
        public Builder regionId(Integer regionId) {
            return regionId(Output.of(regionId));
        }

        /**
         * @param regionIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder regionIdVariable(@Nullable Output<String> regionIdVariable) {
            $.regionIdVariable = regionIdVariable;
            return this;
        }

        /**
         * @param regionIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder regionIdVariable(String regionIdVariable) {
            return regionIdVariable(Output.of(regionIdVariable));
        }

        /**
         * @param role Set the role for router - Choices: `edge-router`, `border-router`
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Set the role for router - Choices: `edge-router`, `border-router`
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param roleVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder roleVariable(@Nullable Output<String> roleVariable) {
            $.roleVariable = roleVariable;
            return this;
        }

        /**
         * @param roleVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder roleVariable(String roleVariable) {
            return roleVariable(Output.of(roleVariable));
        }

        /**
         * @param secondaryRegionId Set secondary region ID - Range: `1`-`63`
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegionId(@Nullable Output<Integer> secondaryRegionId) {
            $.secondaryRegionId = secondaryRegionId;
            return this;
        }

        /**
         * @param secondaryRegionId Set secondary region ID - Range: `1`-`63`
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegionId(Integer secondaryRegionId) {
            return secondaryRegionId(Output.of(secondaryRegionId));
        }

        /**
         * @param secondaryRegionIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegionIdVariable(@Nullable Output<String> secondaryRegionIdVariable) {
            $.secondaryRegionIdVariable = secondaryRegionIdVariable;
            return this;
        }

        /**
         * @param secondaryRegionIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegionIdVariable(String secondaryRegionIdVariable) {
            return secondaryRegionIdVariable(Output.of(secondaryRegionIdVariable));
        }

        /**
         * @param siteId Set the site identifier - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder siteId(@Nullable Output<Integer> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId Set the site identifier - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder siteId(Integer siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param siteIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder siteIdVariable(@Nullable Output<String> siteIdVariable) {
            $.siteIdVariable = siteIdVariable;
            return this;
        }

        /**
         * @param siteIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder siteIdVariable(String siteIdVariable) {
            return siteIdVariable(Output.of(siteIdVariable));
        }

        /**
         * @param systemDescription Set a text description of the device
         * 
         * @return builder
         * 
         */
        public Builder systemDescription(@Nullable Output<String> systemDescription) {
            $.systemDescription = systemDescription;
            return this;
        }

        /**
         * @param systemDescription Set a text description of the device
         * 
         * @return builder
         * 
         */
        public Builder systemDescription(String systemDescription) {
            return systemDescription(Output.of(systemDescription));
        }

        /**
         * @param systemDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder systemDescriptionVariable(@Nullable Output<String> systemDescriptionVariable) {
            $.systemDescriptionVariable = systemDescriptionVariable;
            return this;
        }

        /**
         * @param systemDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder systemDescriptionVariable(String systemDescriptionVariable) {
            return systemDescriptionVariable(Output.of(systemDescriptionVariable));
        }

        /**
         * @param systemIp Set the system IP address
         * 
         * @return builder
         * 
         */
        public Builder systemIp(@Nullable Output<String> systemIp) {
            $.systemIp = systemIp;
            return this;
        }

        /**
         * @param systemIp Set the system IP address
         * 
         * @return builder
         * 
         */
        public Builder systemIp(String systemIp) {
            return systemIp(Output.of(systemIp));
        }

        /**
         * @param systemIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder systemIpVariable(@Nullable Output<String> systemIpVariable) {
            $.systemIpVariable = systemIpVariable;
            return this;
        }

        /**
         * @param systemIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder systemIpVariable(String systemIpVariable) {
            return systemIpVariable(Output.of(systemIpVariable));
        }

        /**
         * @param templateType The template type
         * 
         * @return builder
         * 
         */
        public Builder templateType(@Nullable Output<String> templateType) {
            $.templateType = templateType;
            return this;
        }

        /**
         * @param templateType The template type
         * 
         * @return builder
         * 
         */
        public Builder templateType(String templateType) {
            return templateType(Output.of(templateType));
        }

        /**
         * @param timezone Set the timezone - Choices: `Europe/Andorra`, `Asia/Dubai`, `Asia/Kabul`, `America/Antigua`, `America/Anguilla`,
         * `Europe/Tirane`, `Asia/Yerevan`, `Africa/Luanda`, `Antarctica/McMurdo`, `Antarctica/Rothera`, `Antarctica/Palmer`,
         * `Antarctica/Mawson`, `Antarctica/Davis`, `Antarctica/Casey`, `Antarctica/Vostok`, `Antarctica/DumontDUrville`,
         * `Antarctica/Syowa`, `America/Argentina/Buenos_Aires`, `America/Argentina/Cordoba`, `America/Argentina/Salta`,
         * `America/Argentina/Jujuy`, `America/Argentina/Tucuman`, `America/Argentina/Catamarca`, `America/Argentina/La_Rioja`,
         * `America/Argentina/San_Juan`, `America/Argentina/Mendoza`, `America/Argentina/San_Luis`,
         * `America/Argentina/Rio_Gallegos`, `America/Argentina/Ushuaia`, `Pacific/Pago_Pago`, `Europe/Vienna`,
         * `Australia/Lord_Howe`, `Antarctica/Macquarie`, `Australia/Hobart`, `Australia/Currie`, `Australia/Melbourne`,
         * `Australia/Sydney`, `Australia/Broken_Hill`, `Australia/Brisbane`, `Australia/Lindeman`, `Australia/Adelaide`,
         * `Australia/Darwin`, `Australia/Perth`, `Australia/Eucla`, `America/Aruba`, `Europe/Mariehamn`, `Asia/Baku`,
         * `Europe/Sarajevo`, `America/Barbados`, `Asia/Dhaka`, `Europe/Brussels`, `Africa/Ouagadougou`, `Europe/Sofia`,
         * `Asia/Bahrain`, `Africa/Bujumbura`, `Africa/Porto-Novo`, `America/St_Barthelemy`, `Atlantic/Bermuda`, `Asia/Brunei`,
         * `America/La_Paz`, `America/Kralendijk`, `America/Noronha`, `America/Belem`, `America/Fortaleza`, `America/Recife`,
         * `America/Araguaina`, `America/Maceio`, `America/Bahia`, `America/Sao_Paulo`, `America/Campo_Grande`, `America/Cuiaba`,
         * `America/Santarem`, `America/Porto_Velho`, `America/Boa_Vista`, `America/Manaus`, `America/Eirunepe`,
         * `America/Rio_Branco`, `America/Nassau`, `Asia/Thimphu`, `Africa/Gaborone`, `Europe/Minsk`, `America/Belize`,
         * `America/St_Johns`, `America/Halifax`, `America/Glace_Bay`, `America/Moncton`, `America/Goose_Bay`,
         * `America/Blanc-Sablon`, `America/Toronto`, `America/Nipigon`, `America/Thunder_Bay`, `America/Iqaluit`,
         * `America/Pangnirtung`, `America/Resolute`, `America/Atikokan`, `America/Rankin_Inlet`, `America/Winnipeg`,
         * `America/Rainy_River`, `America/Regina`, `America/Swift_Current`, `America/Edmonton`, `America/Cambridge_Bay`,
         * `America/Yellowknife`, `America/Inuvik`, `America/Creston`, `America/Dawson_Creek`, `America/Vancouver`,
         * `America/Whitehorse`, `America/Dawson`, `Indian/Cocos`, `Africa/Kinshasa`, `Africa/Lubumbashi`, `Africa/Bangui`,
         * `Africa/Brazzaville`, `Europe/Zurich`, `Africa/Abidjan`, `Pacific/Rarotonga`, `America/Santiago`, `Pacific/Easter`,
         * `Africa/Douala`, `Asia/Shanghai`, `Asia/Harbin`, `Asia/Chongqing`, `Asia/Urumqi`, `Asia/Kashgar`, `America/Bogota`,
         * `America/Costa_Rica`, `America/Havana`, `Atlantic/Cape_Verde`, `America/Curacao`, `Indian/Christmas`, `Asia/Nicosia`,
         * `Europe/Prague`, `Europe/Berlin`, `Europe/Busingen`, `Africa/Djibouti`, `Europe/Copenhagen`, `America/Dominica`,
         * `America/Santo_Domingo`, `Africa/Algiers`, `America/Guayaquil`, `Pacific/Galapagos`, `Europe/Tallinn`, `Africa/Cairo`,
         * `Africa/El_Aaiun`, `Africa/Asmara`, `Europe/Madrid`, `Africa/Ceuta`, `Atlantic/Canary`, `Africa/Addis_Ababa`,
         * `Europe/Helsinki`, `Pacific/Fiji`, `Atlantic/Stanley`, `Pacific/Chuuk`, `Pacific/Pohnpei`, `Pacific/Kosrae`,
         * `Atlantic/Faroe`, `Europe/Paris`, `Africa/Libreville`, `Europe/London`, `America/Grenada`, `Asia/Tbilisi`,
         * `America/Cayenne`, `Europe/Guernsey`, `Africa/Accra`, `Europe/Gibraltar`, `America/Godthab`, `America/Danmarkshavn`,
         * `America/Scoresbysund`, `America/Thule`, `Africa/Banjul`, `Africa/Conakry`, `America/Guadeloupe`, `Africa/Malabo`,
         * `Europe/Athens`, `Atlantic/South_Georgia`, `America/Guatemala`, `Pacific/Guam`, `Africa/Bissau`, `America/Guyana`,
         * `Asia/Hong_Kong`, `America/Tegucigalpa`, `Europe/Zagreb`, `America/Port-au-Prince`, `Europe/Budapest`, `Asia/Jakarta`,
         * `Asia/Pontianak`, `Asia/Makassar`, `Asia/Jayapura`, `Europe/Dublin`, `Asia/Jerusalem`, `Europe/Isle_of_Man`,
         * `Asia/Kolkata`, `Indian/Chagos`, `Asia/Baghdad`, `Asia/Tehran`, `Atlantic/Reykjavik`, `Europe/Rome`, `Europe/Jersey`,
         * `America/Jamaica`, `Asia/Amman`, `Asia/Tokyo`, `Africa/Nairobi`, `Asia/Bishkek`, `Asia/Phnom_Penh`, `Pacific/Tarawa`,
         * `Pacific/Enderbury`, `Pacific/Kiritimati`, `Indian/Comoro`, `America/St_Kitts`, `Asia/Pyongyang`, `Asia/Seoul`,
         * `Asia/Kuwait`, `America/Cayman`, `Asia/Almaty`, `Asia/Qyzylorda`, `Asia/Aqtobe`, `Asia/Aqtau`, `Asia/Oral`,
         * `Asia/Vientiane`, `Asia/Beirut`, `America/St_Lucia`, `Europe/Vaduz`, `Asia/Colombo`, `Africa/Monrovia`, `Africa/Maseru`,
         * `Europe/Vilnius`, `Europe/Luxembourg`, `Europe/Riga`, `Africa/Tripoli`, `Africa/Casablanca`, `Europe/Monaco`,
         * `Europe/Chisinau`, `Europe/Podgorica`, `America/Marigot`, `Indian/Antananarivo`, `Pacific/Majuro`, `Pacific/Kwajalein`,
         * `Europe/Skopje`, `Africa/Bamako`, `Asia/Rangoon`, `Asia/Ulaanbaatar`, `Asia/Hovd`, `Asia/Choibalsan`, `Asia/Macau`,
         * `Pacific/Saipan`, `America/Martinique`, `Africa/Nouakchott`, `America/Montserrat`, `Europe/Malta`, `Indian/Mauritius`,
         * `Indian/Maldives`, `Africa/Blantyre`, `America/Mexico_City`, `America/Cancun`, `America/Merida`, `America/Monterrey`,
         * `America/Matamoros`, `America/Mazatlan`, `America/Chihuahua`, `America/Ojinaga`, `America/Hermosillo`,
         * `America/Tijuana`, `America/Santa_Isabel`, `America/Bahia_Banderas`, `Asia/Kuala_Lumpur`, `Asia/Kuching`,
         * `Africa/Maputo`, `Africa/Windhoek`, `Pacific/Noumea`, `Africa/Niamey`, `Pacific/Norfolk`, `Africa/Lagos`,
         * `America/Managua`, `Europe/Amsterdam`, `Europe/Oslo`, `Asia/Kathmandu`, `Pacific/Nauru`, `Pacific/Niue`,
         * `Pacific/Auckland`, `Pacific/Chatham`, `Asia/Muscat`, `America/Panama`, `America/Lima`, `Pacific/Tahiti`,
         * `Pacific/Marquesas`, `Pacific/Gambier`, `Pacific/Port_Moresby`, `Asia/Manila`, `Asia/Karachi`, `Europe/Warsaw`,
         * `America/Miquelon`, `Pacific/Pitcairn`, `America/Puerto_Rico`, `Asia/Gaza`, `Asia/Hebron`, `Europe/Lisbon`,
         * `Atlantic/Madeira`, `Atlantic/Azores`, `Pacific/Palau`, `America/Asuncion`, `Asia/Qatar`, `Indian/Reunion`,
         * `Europe/Bucharest`, `Europe/Belgrade`, `Europe/Kaliningrad`, `Europe/Moscow`, `Europe/Volgograd`, `Europe/Samara`,
         * `Asia/Yekaterinburg`, `Asia/Omsk`, `Asia/Novosibirsk`, `Asia/Novokuznetsk`, `Asia/Krasnoyarsk`, `Asia/Irkutsk`,
         * `Asia/Yakutsk`, `Asia/Khandyga`, `Asia/Vladivostok`, `Asia/Sakhalin`, `Asia/Ust-Nera`, `Asia/Magadan`, `Asia/Kamchatka`,
         * `Asia/Anadyr`, `Africa/Kigali`, `Asia/Riyadh`, `Pacific/Guadalcanal`, `Indian/Mahe`, `Africa/Khartoum`,
         * `Europe/Stockholm`, `Asia/Singapore`, `Atlantic/St_Helena`, `Europe/Ljubljana`, `Arctic/Longyearbyen`,
         * `Europe/Bratislava`, `Africa/Freetown`, `Europe/San_Marino`, `Africa/Dakar`, `Africa/Mogadishu`, `America/Paramaribo`,
         * `Africa/Juba`, `Africa/Sao_Tome`, `America/El_Salvador`, `America/Lower_Princes`, `Asia/Damascus`, `Africa/Mbabane`,
         * `America/Grand_Turk`, `Africa/Ndjamena`, `Indian/Kerguelen`, `Africa/Lome`, `Asia/Bangkok`, `Asia/Dushanbe`,
         * `Pacific/Fakaofo`, `Asia/Dili`, `Asia/Ashgabat`, `Africa/Tunis`, `Pacific/Tongatapu`, `Europe/Istanbul`,
         * `America/Port_of_Spain`, `Pacific/Funafuti`, `Asia/Taipei`, `Africa/Dar_es_Salaam`, `Europe/Kiev`, `Europe/Uzhgorod`,
         * `Europe/Zaporozhye`, `Europe/Simferopol`, `Africa/Kampala`, `Pacific/Johnston`, `Pacific/Midway`, `Pacific/Wake`,
         * `America/New_York`, `America/Detroit`, `America/Kentucky/Louisville`, `America/Kentucky/Monticello`,
         * `America/Indiana/Indianapolis`, `America/Indiana/Vincennes`, `America/Indiana/Winamac`, `America/Indiana/Marengo`,
         * `America/Indiana/Petersburg`, `America/Indiana/Vevay`, `America/Chicago`, `America/Indiana/Tell_City`,
         * `America/Indiana/Knox`, `America/Menominee`, `America/North_Dakota/Center`, `America/North_Dakota/New_Salem`,
         * `America/North_Dakota/Beulah`, `America/Denver`, `America/Boise`, `America/Phoenix`, `America/Los_Angeles`,
         * `America/Anchorage`, `America/Juneau`, `America/Sitka`, `America/Yakutat`, `America/Nome`, `America/Adak`,
         * `America/Metlakatla`, `Pacific/Honolulu`, `America/Montevideo`, `Asia/Samarkand`, `Asia/Tashkent`, `Europe/Vatican`,
         * `America/St_Vincent`, `America/Caracas`, `America/Tortola`, `America/St_Thomas`, `Asia/Ho_Chi_Minh`, `Pacific/Efate`,
         * `Pacific/Wallis`, `Pacific/Apia`, `Asia/Aden`, `Indian/Mayotte`, `Africa/Johannesburg`, `Africa/Lusaka`,
         * `Africa/Harare`, `UTC` - Default value: `UTC`
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone Set the timezone - Choices: `Europe/Andorra`, `Asia/Dubai`, `Asia/Kabul`, `America/Antigua`, `America/Anguilla`,
         * `Europe/Tirane`, `Asia/Yerevan`, `Africa/Luanda`, `Antarctica/McMurdo`, `Antarctica/Rothera`, `Antarctica/Palmer`,
         * `Antarctica/Mawson`, `Antarctica/Davis`, `Antarctica/Casey`, `Antarctica/Vostok`, `Antarctica/DumontDUrville`,
         * `Antarctica/Syowa`, `America/Argentina/Buenos_Aires`, `America/Argentina/Cordoba`, `America/Argentina/Salta`,
         * `America/Argentina/Jujuy`, `America/Argentina/Tucuman`, `America/Argentina/Catamarca`, `America/Argentina/La_Rioja`,
         * `America/Argentina/San_Juan`, `America/Argentina/Mendoza`, `America/Argentina/San_Luis`,
         * `America/Argentina/Rio_Gallegos`, `America/Argentina/Ushuaia`, `Pacific/Pago_Pago`, `Europe/Vienna`,
         * `Australia/Lord_Howe`, `Antarctica/Macquarie`, `Australia/Hobart`, `Australia/Currie`, `Australia/Melbourne`,
         * `Australia/Sydney`, `Australia/Broken_Hill`, `Australia/Brisbane`, `Australia/Lindeman`, `Australia/Adelaide`,
         * `Australia/Darwin`, `Australia/Perth`, `Australia/Eucla`, `America/Aruba`, `Europe/Mariehamn`, `Asia/Baku`,
         * `Europe/Sarajevo`, `America/Barbados`, `Asia/Dhaka`, `Europe/Brussels`, `Africa/Ouagadougou`, `Europe/Sofia`,
         * `Asia/Bahrain`, `Africa/Bujumbura`, `Africa/Porto-Novo`, `America/St_Barthelemy`, `Atlantic/Bermuda`, `Asia/Brunei`,
         * `America/La_Paz`, `America/Kralendijk`, `America/Noronha`, `America/Belem`, `America/Fortaleza`, `America/Recife`,
         * `America/Araguaina`, `America/Maceio`, `America/Bahia`, `America/Sao_Paulo`, `America/Campo_Grande`, `America/Cuiaba`,
         * `America/Santarem`, `America/Porto_Velho`, `America/Boa_Vista`, `America/Manaus`, `America/Eirunepe`,
         * `America/Rio_Branco`, `America/Nassau`, `Asia/Thimphu`, `Africa/Gaborone`, `Europe/Minsk`, `America/Belize`,
         * `America/St_Johns`, `America/Halifax`, `America/Glace_Bay`, `America/Moncton`, `America/Goose_Bay`,
         * `America/Blanc-Sablon`, `America/Toronto`, `America/Nipigon`, `America/Thunder_Bay`, `America/Iqaluit`,
         * `America/Pangnirtung`, `America/Resolute`, `America/Atikokan`, `America/Rankin_Inlet`, `America/Winnipeg`,
         * `America/Rainy_River`, `America/Regina`, `America/Swift_Current`, `America/Edmonton`, `America/Cambridge_Bay`,
         * `America/Yellowknife`, `America/Inuvik`, `America/Creston`, `America/Dawson_Creek`, `America/Vancouver`,
         * `America/Whitehorse`, `America/Dawson`, `Indian/Cocos`, `Africa/Kinshasa`, `Africa/Lubumbashi`, `Africa/Bangui`,
         * `Africa/Brazzaville`, `Europe/Zurich`, `Africa/Abidjan`, `Pacific/Rarotonga`, `America/Santiago`, `Pacific/Easter`,
         * `Africa/Douala`, `Asia/Shanghai`, `Asia/Harbin`, `Asia/Chongqing`, `Asia/Urumqi`, `Asia/Kashgar`, `America/Bogota`,
         * `America/Costa_Rica`, `America/Havana`, `Atlantic/Cape_Verde`, `America/Curacao`, `Indian/Christmas`, `Asia/Nicosia`,
         * `Europe/Prague`, `Europe/Berlin`, `Europe/Busingen`, `Africa/Djibouti`, `Europe/Copenhagen`, `America/Dominica`,
         * `America/Santo_Domingo`, `Africa/Algiers`, `America/Guayaquil`, `Pacific/Galapagos`, `Europe/Tallinn`, `Africa/Cairo`,
         * `Africa/El_Aaiun`, `Africa/Asmara`, `Europe/Madrid`, `Africa/Ceuta`, `Atlantic/Canary`, `Africa/Addis_Ababa`,
         * `Europe/Helsinki`, `Pacific/Fiji`, `Atlantic/Stanley`, `Pacific/Chuuk`, `Pacific/Pohnpei`, `Pacific/Kosrae`,
         * `Atlantic/Faroe`, `Europe/Paris`, `Africa/Libreville`, `Europe/London`, `America/Grenada`, `Asia/Tbilisi`,
         * `America/Cayenne`, `Europe/Guernsey`, `Africa/Accra`, `Europe/Gibraltar`, `America/Godthab`, `America/Danmarkshavn`,
         * `America/Scoresbysund`, `America/Thule`, `Africa/Banjul`, `Africa/Conakry`, `America/Guadeloupe`, `Africa/Malabo`,
         * `Europe/Athens`, `Atlantic/South_Georgia`, `America/Guatemala`, `Pacific/Guam`, `Africa/Bissau`, `America/Guyana`,
         * `Asia/Hong_Kong`, `America/Tegucigalpa`, `Europe/Zagreb`, `America/Port-au-Prince`, `Europe/Budapest`, `Asia/Jakarta`,
         * `Asia/Pontianak`, `Asia/Makassar`, `Asia/Jayapura`, `Europe/Dublin`, `Asia/Jerusalem`, `Europe/Isle_of_Man`,
         * `Asia/Kolkata`, `Indian/Chagos`, `Asia/Baghdad`, `Asia/Tehran`, `Atlantic/Reykjavik`, `Europe/Rome`, `Europe/Jersey`,
         * `America/Jamaica`, `Asia/Amman`, `Asia/Tokyo`, `Africa/Nairobi`, `Asia/Bishkek`, `Asia/Phnom_Penh`, `Pacific/Tarawa`,
         * `Pacific/Enderbury`, `Pacific/Kiritimati`, `Indian/Comoro`, `America/St_Kitts`, `Asia/Pyongyang`, `Asia/Seoul`,
         * `Asia/Kuwait`, `America/Cayman`, `Asia/Almaty`, `Asia/Qyzylorda`, `Asia/Aqtobe`, `Asia/Aqtau`, `Asia/Oral`,
         * `Asia/Vientiane`, `Asia/Beirut`, `America/St_Lucia`, `Europe/Vaduz`, `Asia/Colombo`, `Africa/Monrovia`, `Africa/Maseru`,
         * `Europe/Vilnius`, `Europe/Luxembourg`, `Europe/Riga`, `Africa/Tripoli`, `Africa/Casablanca`, `Europe/Monaco`,
         * `Europe/Chisinau`, `Europe/Podgorica`, `America/Marigot`, `Indian/Antananarivo`, `Pacific/Majuro`, `Pacific/Kwajalein`,
         * `Europe/Skopje`, `Africa/Bamako`, `Asia/Rangoon`, `Asia/Ulaanbaatar`, `Asia/Hovd`, `Asia/Choibalsan`, `Asia/Macau`,
         * `Pacific/Saipan`, `America/Martinique`, `Africa/Nouakchott`, `America/Montserrat`, `Europe/Malta`, `Indian/Mauritius`,
         * `Indian/Maldives`, `Africa/Blantyre`, `America/Mexico_City`, `America/Cancun`, `America/Merida`, `America/Monterrey`,
         * `America/Matamoros`, `America/Mazatlan`, `America/Chihuahua`, `America/Ojinaga`, `America/Hermosillo`,
         * `America/Tijuana`, `America/Santa_Isabel`, `America/Bahia_Banderas`, `Asia/Kuala_Lumpur`, `Asia/Kuching`,
         * `Africa/Maputo`, `Africa/Windhoek`, `Pacific/Noumea`, `Africa/Niamey`, `Pacific/Norfolk`, `Africa/Lagos`,
         * `America/Managua`, `Europe/Amsterdam`, `Europe/Oslo`, `Asia/Kathmandu`, `Pacific/Nauru`, `Pacific/Niue`,
         * `Pacific/Auckland`, `Pacific/Chatham`, `Asia/Muscat`, `America/Panama`, `America/Lima`, `Pacific/Tahiti`,
         * `Pacific/Marquesas`, `Pacific/Gambier`, `Pacific/Port_Moresby`, `Asia/Manila`, `Asia/Karachi`, `Europe/Warsaw`,
         * `America/Miquelon`, `Pacific/Pitcairn`, `America/Puerto_Rico`, `Asia/Gaza`, `Asia/Hebron`, `Europe/Lisbon`,
         * `Atlantic/Madeira`, `Atlantic/Azores`, `Pacific/Palau`, `America/Asuncion`, `Asia/Qatar`, `Indian/Reunion`,
         * `Europe/Bucharest`, `Europe/Belgrade`, `Europe/Kaliningrad`, `Europe/Moscow`, `Europe/Volgograd`, `Europe/Samara`,
         * `Asia/Yekaterinburg`, `Asia/Omsk`, `Asia/Novosibirsk`, `Asia/Novokuznetsk`, `Asia/Krasnoyarsk`, `Asia/Irkutsk`,
         * `Asia/Yakutsk`, `Asia/Khandyga`, `Asia/Vladivostok`, `Asia/Sakhalin`, `Asia/Ust-Nera`, `Asia/Magadan`, `Asia/Kamchatka`,
         * `Asia/Anadyr`, `Africa/Kigali`, `Asia/Riyadh`, `Pacific/Guadalcanal`, `Indian/Mahe`, `Africa/Khartoum`,
         * `Europe/Stockholm`, `Asia/Singapore`, `Atlantic/St_Helena`, `Europe/Ljubljana`, `Arctic/Longyearbyen`,
         * `Europe/Bratislava`, `Africa/Freetown`, `Europe/San_Marino`, `Africa/Dakar`, `Africa/Mogadishu`, `America/Paramaribo`,
         * `Africa/Juba`, `Africa/Sao_Tome`, `America/El_Salvador`, `America/Lower_Princes`, `Asia/Damascus`, `Africa/Mbabane`,
         * `America/Grand_Turk`, `Africa/Ndjamena`, `Indian/Kerguelen`, `Africa/Lome`, `Asia/Bangkok`, `Asia/Dushanbe`,
         * `Pacific/Fakaofo`, `Asia/Dili`, `Asia/Ashgabat`, `Africa/Tunis`, `Pacific/Tongatapu`, `Europe/Istanbul`,
         * `America/Port_of_Spain`, `Pacific/Funafuti`, `Asia/Taipei`, `Africa/Dar_es_Salaam`, `Europe/Kiev`, `Europe/Uzhgorod`,
         * `Europe/Zaporozhye`, `Europe/Simferopol`, `Africa/Kampala`, `Pacific/Johnston`, `Pacific/Midway`, `Pacific/Wake`,
         * `America/New_York`, `America/Detroit`, `America/Kentucky/Louisville`, `America/Kentucky/Monticello`,
         * `America/Indiana/Indianapolis`, `America/Indiana/Vincennes`, `America/Indiana/Winamac`, `America/Indiana/Marengo`,
         * `America/Indiana/Petersburg`, `America/Indiana/Vevay`, `America/Chicago`, `America/Indiana/Tell_City`,
         * `America/Indiana/Knox`, `America/Menominee`, `America/North_Dakota/Center`, `America/North_Dakota/New_Salem`,
         * `America/North_Dakota/Beulah`, `America/Denver`, `America/Boise`, `America/Phoenix`, `America/Los_Angeles`,
         * `America/Anchorage`, `America/Juneau`, `America/Sitka`, `America/Yakutat`, `America/Nome`, `America/Adak`,
         * `America/Metlakatla`, `Pacific/Honolulu`, `America/Montevideo`, `Asia/Samarkand`, `Asia/Tashkent`, `Europe/Vatican`,
         * `America/St_Vincent`, `America/Caracas`, `America/Tortola`, `America/St_Thomas`, `Asia/Ho_Chi_Minh`, `Pacific/Efate`,
         * `Pacific/Wallis`, `Pacific/Apia`, `Asia/Aden`, `Indian/Mayotte`, `Africa/Johannesburg`, `Africa/Lusaka`,
         * `Africa/Harare`, `UTC` - Default value: `UTC`
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        /**
         * @param timezoneVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder timezoneVariable(@Nullable Output<String> timezoneVariable) {
            $.timezoneVariable = timezoneVariable;
            return this;
        }

        /**
         * @param timezoneVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder timezoneVariable(String timezoneVariable) {
            return timezoneVariable(Output.of(timezoneVariable));
        }

        /**
         * @param trackDefaultGateway Enable or disable default gateway tracking - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder trackDefaultGateway(@Nullable Output<Boolean> trackDefaultGateway) {
            $.trackDefaultGateway = trackDefaultGateway;
            return this;
        }

        /**
         * @param trackDefaultGateway Enable or disable default gateway tracking - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder trackDefaultGateway(Boolean trackDefaultGateway) {
            return trackDefaultGateway(Output.of(trackDefaultGateway));
        }

        /**
         * @param trackDefaultGatewayVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackDefaultGatewayVariable(@Nullable Output<String> trackDefaultGatewayVariable) {
            $.trackDefaultGatewayVariable = trackDefaultGatewayVariable;
            return this;
        }

        /**
         * @param trackDefaultGatewayVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackDefaultGatewayVariable(String trackDefaultGatewayVariable) {
            return trackDefaultGatewayVariable(Output.of(trackDefaultGatewayVariable));
        }

        /**
         * @param trackInterfaceTag OMP Tag attached to routes based on interface tracking - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder trackInterfaceTag(@Nullable Output<Integer> trackInterfaceTag) {
            $.trackInterfaceTag = trackInterfaceTag;
            return this;
        }

        /**
         * @param trackInterfaceTag OMP Tag attached to routes based on interface tracking - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder trackInterfaceTag(Integer trackInterfaceTag) {
            return trackInterfaceTag(Output.of(trackInterfaceTag));
        }

        /**
         * @param trackInterfaceTagVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackInterfaceTagVariable(@Nullable Output<String> trackInterfaceTagVariable) {
            $.trackInterfaceTagVariable = trackInterfaceTagVariable;
            return this;
        }

        /**
         * @param trackInterfaceTagVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackInterfaceTagVariable(String trackInterfaceTagVariable) {
            return trackInterfaceTagVariable(Output.of(trackInterfaceTagVariable));
        }

        /**
         * @param trackTransport Configure tracking of transport - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder trackTransport(@Nullable Output<Boolean> trackTransport) {
            $.trackTransport = trackTransport;
            return this;
        }

        /**
         * @param trackTransport Configure tracking of transport - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder trackTransport(Boolean trackTransport) {
            return trackTransport(Output.of(trackTransport));
        }

        /**
         * @param trackTransportVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackTransportVariable(@Nullable Output<String> trackTransportVariable) {
            $.trackTransportVariable = trackTransportVariable;
            return this;
        }

        /**
         * @param trackTransportVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackTransportVariable(String trackTransportVariable) {
            return trackTransportVariable(Output.of(trackTransportVariable));
        }

        /**
         * @param trackers Tracker configuration
         * 
         * @return builder
         * 
         */
        public Builder trackers(@Nullable Output<List<CiscoSystemFeatureTemplateTrackerArgs>> trackers) {
            $.trackers = trackers;
            return this;
        }

        /**
         * @param trackers Tracker configuration
         * 
         * @return builder
         * 
         */
        public Builder trackers(List<CiscoSystemFeatureTemplateTrackerArgs> trackers) {
            return trackers(Output.of(trackers));
        }

        /**
         * @param trackers Tracker configuration
         * 
         * @return builder
         * 
         */
        public Builder trackers(CiscoSystemFeatureTemplateTrackerArgs... trackers) {
            return trackers(List.of(trackers));
        }

        /**
         * @param transportGateway Enable transport gateway - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder transportGateway(@Nullable Output<Boolean> transportGateway) {
            $.transportGateway = transportGateway;
            return this;
        }

        /**
         * @param transportGateway Enable transport gateway - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder transportGateway(Boolean transportGateway) {
            return transportGateway(Output.of(transportGateway));
        }

        /**
         * @param transportGatewayVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder transportGatewayVariable(@Nullable Output<String> transportGatewayVariable) {
            $.transportGatewayVariable = transportGatewayVariable;
            return this;
        }

        /**
         * @param transportGatewayVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder transportGatewayVariable(String transportGatewayVariable) {
            return transportGatewayVariable(Output.of(transportGatewayVariable));
        }

        /**
         * @param version The version of the feature template
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the feature template
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public CiscoSystemFeatureTemplateState build() {
            return $;
        }
    }

}
