// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs Empty = new TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs();

    /**
     * Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
     *   - Range: `1`-`4294967295`
     * 
     */
    @Import(name="disablePeerMaxNumberOfPrefixes")
    private @Nullable Output<Integer> disablePeerMaxNumberOfPrefixes;

    /**
     * @return Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
     *   - Range: `1`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> disablePeerMaxNumberOfPrefixes() {
        return Optional.ofNullable(this.disablePeerMaxNumberOfPrefixes);
    }

    /**
     * Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
     * 
     */
    @Import(name="disablePeerMaxNumberOfPrefixesVariable")
    private @Nullable Output<String> disablePeerMaxNumberOfPrefixesVariable;

    /**
     * @return Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
     * 
     */
    public Optional<Output<String>> disablePeerMaxNumberOfPrefixesVariable() {
        return Optional.ofNullable(this.disablePeerMaxNumberOfPrefixesVariable);
    }

    /**
     * Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
     *   - Range: `1`-`100`
     *   - Default value: `75`
     * 
     */
    @Import(name="disablePeerThreshold")
    private @Nullable Output<Integer> disablePeerThreshold;

    /**
     * @return Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
     *   - Range: `1`-`100`
     *   - Default value: `75`
     * 
     */
    public Optional<Output<Integer>> disablePeerThreshold() {
        return Optional.ofNullable(this.disablePeerThreshold);
    }

    /**
     * Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
     * 
     */
    @Import(name="disablePeerThresholdVariable")
    private @Nullable Output<String> disablePeerThresholdVariable;

    /**
     * @return Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
     * 
     */
    public Optional<Output<String>> disablePeerThresholdVariable() {
        return Optional.ofNullable(this.disablePeerThresholdVariable);
    }

    /**
     * Set IPv4 unicast address family
     *   - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
     * 
     */
    @Import(name="familyType")
    private @Nullable Output<String> familyType;

    /**
     * @return Set IPv4 unicast address family
     *   - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
     * 
     */
    public Optional<Output<String>> familyType() {
        return Optional.ofNullable(this.familyType);
    }

    @Import(name="inRoutePolicyId")
    private @Nullable Output<String> inRoutePolicyId;

    public Optional<Output<String>> inRoutePolicyId() {
        return Optional.ofNullable(this.inRoutePolicyId);
    }

    @Import(name="outRoutePolicyId")
    private @Nullable Output<String> outRoutePolicyId;

    public Optional<Output<String>> outRoutePolicyId() {
        return Optional.ofNullable(this.outRoutePolicyId);
    }

    /**
     * Neighbor received maximum prefix policy is disabled.
     *   - Choices: `restart`, `off`, `warning-only`, `disable-peer`
     * 
     */
    @Import(name="policyType")
    private @Nullable Output<String> policyType;

    /**
     * @return Neighbor received maximum prefix policy is disabled.
     *   - Choices: `restart`, `off`, `warning-only`, `disable-peer`
     * 
     */
    public Optional<Output<String>> policyType() {
        return Optional.ofNullable(this.policyType);
    }

    /**
     * Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
     *   - Range: `1`-`65535`
     * 
     */
    @Import(name="restartInterval")
    private @Nullable Output<Integer> restartInterval;

    /**
     * @return Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
     *   - Range: `1`-`65535`
     * 
     */
    public Optional<Output<Integer>> restartInterval() {
        return Optional.ofNullable(this.restartInterval);
    }

    /**
     * Variable name, Attribute conditional on `policy_type` being equal to `restart`
     * 
     */
    @Import(name="restartIntervalVariable")
    private @Nullable Output<String> restartIntervalVariable;

    /**
     * @return Variable name, Attribute conditional on `policy_type` being equal to `restart`
     * 
     */
    public Optional<Output<String>> restartIntervalVariable() {
        return Optional.ofNullable(this.restartIntervalVariable);
    }

    /**
     * Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
     *   - Range: `1`-`4294967295`
     * 
     */
    @Import(name="restartMaxNumberOfPrefixes")
    private @Nullable Output<Integer> restartMaxNumberOfPrefixes;

    /**
     * @return Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
     *   - Range: `1`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> restartMaxNumberOfPrefixes() {
        return Optional.ofNullable(this.restartMaxNumberOfPrefixes);
    }

    /**
     * Variable name, Attribute conditional on `policy_type` being equal to `restart`
     * 
     */
    @Import(name="restartMaxNumberOfPrefixesVariable")
    private @Nullable Output<String> restartMaxNumberOfPrefixesVariable;

    /**
     * @return Variable name, Attribute conditional on `policy_type` being equal to `restart`
     * 
     */
    public Optional<Output<String>> restartMaxNumberOfPrefixesVariable() {
        return Optional.ofNullable(this.restartMaxNumberOfPrefixesVariable);
    }

    /**
     * Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
     *   - Range: `1`-`100`
     *   - Default value: `75`
     * 
     */
    @Import(name="restartThreshold")
    private @Nullable Output<Integer> restartThreshold;

    /**
     * @return Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
     *   - Range: `1`-`100`
     *   - Default value: `75`
     * 
     */
    public Optional<Output<Integer>> restartThreshold() {
        return Optional.ofNullable(this.restartThreshold);
    }

    /**
     * Variable name, Attribute conditional on `policy_type` being equal to `restart`
     * 
     */
    @Import(name="restartThresholdVariable")
    private @Nullable Output<String> restartThresholdVariable;

    /**
     * @return Variable name, Attribute conditional on `policy_type` being equal to `restart`
     * 
     */
    public Optional<Output<String>> restartThresholdVariable() {
        return Optional.ofNullable(this.restartThresholdVariable);
    }

    /**
     * Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
     *   - Range: `1`-`4294967295`
     * 
     */
    @Import(name="warningMessageMaxNumberOfPrefixes")
    private @Nullable Output<Integer> warningMessageMaxNumberOfPrefixes;

    /**
     * @return Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
     *   - Range: `1`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> warningMessageMaxNumberOfPrefixes() {
        return Optional.ofNullable(this.warningMessageMaxNumberOfPrefixes);
    }

    /**
     * Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
     * 
     */
    @Import(name="warningMessageMaxNumberOfPrefixesVariable")
    private @Nullable Output<String> warningMessageMaxNumberOfPrefixesVariable;

    /**
     * @return Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
     * 
     */
    public Optional<Output<String>> warningMessageMaxNumberOfPrefixesVariable() {
        return Optional.ofNullable(this.warningMessageMaxNumberOfPrefixesVariable);
    }

    /**
     * Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
     *   - Range: `1`-`100`
     *   - Default value: `75`
     * 
     */
    @Import(name="warningMessageThreshold")
    private @Nullable Output<Integer> warningMessageThreshold;

    /**
     * @return Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
     *   - Range: `1`-`100`
     *   - Default value: `75`
     * 
     */
    public Optional<Output<Integer>> warningMessageThreshold() {
        return Optional.ofNullable(this.warningMessageThreshold);
    }

    /**
     * Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
     * 
     */
    @Import(name="warningMessageThresholdVariable")
    private @Nullable Output<String> warningMessageThresholdVariable;

    /**
     * @return Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
     * 
     */
    public Optional<Output<String>> warningMessageThresholdVariable() {
        return Optional.ofNullable(this.warningMessageThresholdVariable);
    }

    private TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs() {}

    private TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs(TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs $) {
        this.disablePeerMaxNumberOfPrefixes = $.disablePeerMaxNumberOfPrefixes;
        this.disablePeerMaxNumberOfPrefixesVariable = $.disablePeerMaxNumberOfPrefixesVariable;
        this.disablePeerThreshold = $.disablePeerThreshold;
        this.disablePeerThresholdVariable = $.disablePeerThresholdVariable;
        this.familyType = $.familyType;
        this.inRoutePolicyId = $.inRoutePolicyId;
        this.outRoutePolicyId = $.outRoutePolicyId;
        this.policyType = $.policyType;
        this.restartInterval = $.restartInterval;
        this.restartIntervalVariable = $.restartIntervalVariable;
        this.restartMaxNumberOfPrefixes = $.restartMaxNumberOfPrefixes;
        this.restartMaxNumberOfPrefixesVariable = $.restartMaxNumberOfPrefixesVariable;
        this.restartThreshold = $.restartThreshold;
        this.restartThresholdVariable = $.restartThresholdVariable;
        this.warningMessageMaxNumberOfPrefixes = $.warningMessageMaxNumberOfPrefixes;
        this.warningMessageMaxNumberOfPrefixesVariable = $.warningMessageMaxNumberOfPrefixesVariable;
        this.warningMessageThreshold = $.warningMessageThreshold;
        this.warningMessageThresholdVariable = $.warningMessageThresholdVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs $;

        public Builder() {
            $ = new TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs();
        }

        public Builder(TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs defaults) {
            $ = new TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disablePeerMaxNumberOfPrefixes Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
         *   - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder disablePeerMaxNumberOfPrefixes(@Nullable Output<Integer> disablePeerMaxNumberOfPrefixes) {
            $.disablePeerMaxNumberOfPrefixes = disablePeerMaxNumberOfPrefixes;
            return this;
        }

        /**
         * @param disablePeerMaxNumberOfPrefixes Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
         *   - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder disablePeerMaxNumberOfPrefixes(Integer disablePeerMaxNumberOfPrefixes) {
            return disablePeerMaxNumberOfPrefixes(Output.of(disablePeerMaxNumberOfPrefixes));
        }

        /**
         * @param disablePeerMaxNumberOfPrefixesVariable Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
         * 
         * @return builder
         * 
         */
        public Builder disablePeerMaxNumberOfPrefixesVariable(@Nullable Output<String> disablePeerMaxNumberOfPrefixesVariable) {
            $.disablePeerMaxNumberOfPrefixesVariable = disablePeerMaxNumberOfPrefixesVariable;
            return this;
        }

        /**
         * @param disablePeerMaxNumberOfPrefixesVariable Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
         * 
         * @return builder
         * 
         */
        public Builder disablePeerMaxNumberOfPrefixesVariable(String disablePeerMaxNumberOfPrefixesVariable) {
            return disablePeerMaxNumberOfPrefixesVariable(Output.of(disablePeerMaxNumberOfPrefixesVariable));
        }

        /**
         * @param disablePeerThreshold Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
         *   - Range: `1`-`100`
         *   - Default value: `75`
         * 
         * @return builder
         * 
         */
        public Builder disablePeerThreshold(@Nullable Output<Integer> disablePeerThreshold) {
            $.disablePeerThreshold = disablePeerThreshold;
            return this;
        }

        /**
         * @param disablePeerThreshold Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
         *   - Range: `1`-`100`
         *   - Default value: `75`
         * 
         * @return builder
         * 
         */
        public Builder disablePeerThreshold(Integer disablePeerThreshold) {
            return disablePeerThreshold(Output.of(disablePeerThreshold));
        }

        /**
         * @param disablePeerThresholdVariable Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
         * 
         * @return builder
         * 
         */
        public Builder disablePeerThresholdVariable(@Nullable Output<String> disablePeerThresholdVariable) {
            $.disablePeerThresholdVariable = disablePeerThresholdVariable;
            return this;
        }

        /**
         * @param disablePeerThresholdVariable Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
         * 
         * @return builder
         * 
         */
        public Builder disablePeerThresholdVariable(String disablePeerThresholdVariable) {
            return disablePeerThresholdVariable(Output.of(disablePeerThresholdVariable));
        }

        /**
         * @param familyType Set IPv4 unicast address family
         *   - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
         * 
         * @return builder
         * 
         */
        public Builder familyType(@Nullable Output<String> familyType) {
            $.familyType = familyType;
            return this;
        }

        /**
         * @param familyType Set IPv4 unicast address family
         *   - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
         * 
         * @return builder
         * 
         */
        public Builder familyType(String familyType) {
            return familyType(Output.of(familyType));
        }

        public Builder inRoutePolicyId(@Nullable Output<String> inRoutePolicyId) {
            $.inRoutePolicyId = inRoutePolicyId;
            return this;
        }

        public Builder inRoutePolicyId(String inRoutePolicyId) {
            return inRoutePolicyId(Output.of(inRoutePolicyId));
        }

        public Builder outRoutePolicyId(@Nullable Output<String> outRoutePolicyId) {
            $.outRoutePolicyId = outRoutePolicyId;
            return this;
        }

        public Builder outRoutePolicyId(String outRoutePolicyId) {
            return outRoutePolicyId(Output.of(outRoutePolicyId));
        }

        /**
         * @param policyType Neighbor received maximum prefix policy is disabled.
         *   - Choices: `restart`, `off`, `warning-only`, `disable-peer`
         * 
         * @return builder
         * 
         */
        public Builder policyType(@Nullable Output<String> policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param policyType Neighbor received maximum prefix policy is disabled.
         *   - Choices: `restart`, `off`, `warning-only`, `disable-peer`
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            return policyType(Output.of(policyType));
        }

        /**
         * @param restartInterval Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
         *   - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder restartInterval(@Nullable Output<Integer> restartInterval) {
            $.restartInterval = restartInterval;
            return this;
        }

        /**
         * @param restartInterval Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
         *   - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder restartInterval(Integer restartInterval) {
            return restartInterval(Output.of(restartInterval));
        }

        /**
         * @param restartIntervalVariable Variable name, Attribute conditional on `policy_type` being equal to `restart`
         * 
         * @return builder
         * 
         */
        public Builder restartIntervalVariable(@Nullable Output<String> restartIntervalVariable) {
            $.restartIntervalVariable = restartIntervalVariable;
            return this;
        }

        /**
         * @param restartIntervalVariable Variable name, Attribute conditional on `policy_type` being equal to `restart`
         * 
         * @return builder
         * 
         */
        public Builder restartIntervalVariable(String restartIntervalVariable) {
            return restartIntervalVariable(Output.of(restartIntervalVariable));
        }

        /**
         * @param restartMaxNumberOfPrefixes Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
         *   - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder restartMaxNumberOfPrefixes(@Nullable Output<Integer> restartMaxNumberOfPrefixes) {
            $.restartMaxNumberOfPrefixes = restartMaxNumberOfPrefixes;
            return this;
        }

        /**
         * @param restartMaxNumberOfPrefixes Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
         *   - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder restartMaxNumberOfPrefixes(Integer restartMaxNumberOfPrefixes) {
            return restartMaxNumberOfPrefixes(Output.of(restartMaxNumberOfPrefixes));
        }

        /**
         * @param restartMaxNumberOfPrefixesVariable Variable name, Attribute conditional on `policy_type` being equal to `restart`
         * 
         * @return builder
         * 
         */
        public Builder restartMaxNumberOfPrefixesVariable(@Nullable Output<String> restartMaxNumberOfPrefixesVariable) {
            $.restartMaxNumberOfPrefixesVariable = restartMaxNumberOfPrefixesVariable;
            return this;
        }

        /**
         * @param restartMaxNumberOfPrefixesVariable Variable name, Attribute conditional on `policy_type` being equal to `restart`
         * 
         * @return builder
         * 
         */
        public Builder restartMaxNumberOfPrefixesVariable(String restartMaxNumberOfPrefixesVariable) {
            return restartMaxNumberOfPrefixesVariable(Output.of(restartMaxNumberOfPrefixesVariable));
        }

        /**
         * @param restartThreshold Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
         *   - Range: `1`-`100`
         *   - Default value: `75`
         * 
         * @return builder
         * 
         */
        public Builder restartThreshold(@Nullable Output<Integer> restartThreshold) {
            $.restartThreshold = restartThreshold;
            return this;
        }

        /**
         * @param restartThreshold Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
         *   - Range: `1`-`100`
         *   - Default value: `75`
         * 
         * @return builder
         * 
         */
        public Builder restartThreshold(Integer restartThreshold) {
            return restartThreshold(Output.of(restartThreshold));
        }

        /**
         * @param restartThresholdVariable Variable name, Attribute conditional on `policy_type` being equal to `restart`
         * 
         * @return builder
         * 
         */
        public Builder restartThresholdVariable(@Nullable Output<String> restartThresholdVariable) {
            $.restartThresholdVariable = restartThresholdVariable;
            return this;
        }

        /**
         * @param restartThresholdVariable Variable name, Attribute conditional on `policy_type` being equal to `restart`
         * 
         * @return builder
         * 
         */
        public Builder restartThresholdVariable(String restartThresholdVariable) {
            return restartThresholdVariable(Output.of(restartThresholdVariable));
        }

        /**
         * @param warningMessageMaxNumberOfPrefixes Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
         *   - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder warningMessageMaxNumberOfPrefixes(@Nullable Output<Integer> warningMessageMaxNumberOfPrefixes) {
            $.warningMessageMaxNumberOfPrefixes = warningMessageMaxNumberOfPrefixes;
            return this;
        }

        /**
         * @param warningMessageMaxNumberOfPrefixes Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
         *   - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder warningMessageMaxNumberOfPrefixes(Integer warningMessageMaxNumberOfPrefixes) {
            return warningMessageMaxNumberOfPrefixes(Output.of(warningMessageMaxNumberOfPrefixes));
        }

        /**
         * @param warningMessageMaxNumberOfPrefixesVariable Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
         * 
         * @return builder
         * 
         */
        public Builder warningMessageMaxNumberOfPrefixesVariable(@Nullable Output<String> warningMessageMaxNumberOfPrefixesVariable) {
            $.warningMessageMaxNumberOfPrefixesVariable = warningMessageMaxNumberOfPrefixesVariable;
            return this;
        }

        /**
         * @param warningMessageMaxNumberOfPrefixesVariable Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
         * 
         * @return builder
         * 
         */
        public Builder warningMessageMaxNumberOfPrefixesVariable(String warningMessageMaxNumberOfPrefixesVariable) {
            return warningMessageMaxNumberOfPrefixesVariable(Output.of(warningMessageMaxNumberOfPrefixesVariable));
        }

        /**
         * @param warningMessageThreshold Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
         *   - Range: `1`-`100`
         *   - Default value: `75`
         * 
         * @return builder
         * 
         */
        public Builder warningMessageThreshold(@Nullable Output<Integer> warningMessageThreshold) {
            $.warningMessageThreshold = warningMessageThreshold;
            return this;
        }

        /**
         * @param warningMessageThreshold Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
         *   - Range: `1`-`100`
         *   - Default value: `75`
         * 
         * @return builder
         * 
         */
        public Builder warningMessageThreshold(Integer warningMessageThreshold) {
            return warningMessageThreshold(Output.of(warningMessageThreshold));
        }

        /**
         * @param warningMessageThresholdVariable Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
         * 
         * @return builder
         * 
         */
        public Builder warningMessageThresholdVariable(@Nullable Output<String> warningMessageThresholdVariable) {
            $.warningMessageThresholdVariable = warningMessageThresholdVariable;
            return this;
        }

        /**
         * @param warningMessageThresholdVariable Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
         * 
         * @return builder
         * 
         */
        public Builder warningMessageThresholdVariable(String warningMessageThresholdVariable) {
            return warningMessageThresholdVariable(Output.of(warningMessageThresholdVariable));
        }

        public TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs build() {
            return $;
        }
    }

}
