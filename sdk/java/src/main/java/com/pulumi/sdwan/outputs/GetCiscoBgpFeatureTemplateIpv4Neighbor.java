// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoBgpFeatureTemplateIpv4Neighbor {
    /**
     * @return Set neighbor address
     * 
     */
    private String address;
    /**
     * @return Set BGP address family
     * 
     */
    private List<GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily> addressFamilies;
    /**
     * @return Variable name
     * 
     */
    private String addressVariable;
    /**
     * @return As Number
     * 
     */
    private Integer allowAsIn;
    /**
     * @return Variable name
     * 
     */
    private String allowAsInVariable;
    /**
     * @return As Override
     * 
     */
    private Boolean asOverride;
    /**
     * @return Variable name
     * 
     */
    private String asOverrideVariable;
    /**
     * @return Set description
     * 
     */
    private String description;
    /**
     * @return Variable name
     * 
     */
    private String descriptionVariable;
    /**
     * @return Set TTL value for peers that are not directly connected
     * 
     */
    private Integer ebgpMultihop;
    /**
     * @return Variable name
     * 
     */
    private String ebgpMultihopVariable;
    /**
     * @return Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
     * 
     */
    private Integer holdtime;
    /**
     * @return Variable name
     * 
     */
    private String holdtimeVariable;
    /**
     * @return Set how often to advertise keepalive messages to BGP peer
     * 
     */
    private Integer keepalive;
    /**
     * @return Variable name
     * 
     */
    private String keepaliveVariable;
    /**
     * @return Set router to be next hop for routes advertised to neighbor
     * 
     */
    private Boolean nextHopSelf;
    /**
     * @return Variable name
     * 
     */
    private String nextHopSelfVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Set MD5 password on TCP connection with BGP peer
     * 
     */
    private String password;
    /**
     * @return Variable name
     * 
     */
    private String passwordVariable;
    /**
     * @return Set remote autonomous system number
     * 
     */
    private String remoteAs;
    /**
     * @return Variable name
     * 
     */
    private String remoteAsVariable;
    /**
     * @return Send community attribute
     * 
     */
    private Boolean sendCommunity;
    /**
     * @return Variable name
     * 
     */
    private String sendCommunityVariable;
    /**
     * @return Send extended community attribute
     * 
     */
    private Boolean sendExtCommunity;
    /**
     * @return Variable name
     * 
     */
    private String sendExtCommunityVariable;
    /**
     * @return Send label
     * 
     */
    private Boolean sendLabel;
    /**
     * @return Send label
     * 
     */
    private Boolean sendLabelExplicit;
    /**
     * @return Variable name
     * 
     */
    private String sendLabelExplicitVariable;
    /**
     * @return Variable name
     * 
     */
    private String sendLabelVariable;
    /**
     * @return Enable or disable a BGP neighbor
     * 
     */
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return Set IP address of interface for TCP connection to BGP neighbor
     * 
     */
    private String sourceInterface;
    /**
     * @return Variable name
     * 
     */
    private String sourceInterfaceVariable;

    private GetCiscoBgpFeatureTemplateIpv4Neighbor() {}
    /**
     * @return Set neighbor address
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return Set BGP address family
     * 
     */
    public List<GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily> addressFamilies() {
        return this.addressFamilies;
    }
    /**
     * @return Variable name
     * 
     */
    public String addressVariable() {
        return this.addressVariable;
    }
    /**
     * @return As Number
     * 
     */
    public Integer allowAsIn() {
        return this.allowAsIn;
    }
    /**
     * @return Variable name
     * 
     */
    public String allowAsInVariable() {
        return this.allowAsInVariable;
    }
    /**
     * @return As Override
     * 
     */
    public Boolean asOverride() {
        return this.asOverride;
    }
    /**
     * @return Variable name
     * 
     */
    public String asOverrideVariable() {
        return this.asOverrideVariable;
    }
    /**
     * @return Set description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Variable name
     * 
     */
    public String descriptionVariable() {
        return this.descriptionVariable;
    }
    /**
     * @return Set TTL value for peers that are not directly connected
     * 
     */
    public Integer ebgpMultihop() {
        return this.ebgpMultihop;
    }
    /**
     * @return Variable name
     * 
     */
    public String ebgpMultihopVariable() {
        return this.ebgpMultihopVariable;
    }
    /**
     * @return Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
     * 
     */
    public Integer holdtime() {
        return this.holdtime;
    }
    /**
     * @return Variable name
     * 
     */
    public String holdtimeVariable() {
        return this.holdtimeVariable;
    }
    /**
     * @return Set how often to advertise keepalive messages to BGP peer
     * 
     */
    public Integer keepalive() {
        return this.keepalive;
    }
    /**
     * @return Variable name
     * 
     */
    public String keepaliveVariable() {
        return this.keepaliveVariable;
    }
    /**
     * @return Set router to be next hop for routes advertised to neighbor
     * 
     */
    public Boolean nextHopSelf() {
        return this.nextHopSelf;
    }
    /**
     * @return Variable name
     * 
     */
    public String nextHopSelfVariable() {
        return this.nextHopSelfVariable;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Set MD5 password on TCP connection with BGP peer
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return Variable name
     * 
     */
    public String passwordVariable() {
        return this.passwordVariable;
    }
    /**
     * @return Set remote autonomous system number
     * 
     */
    public String remoteAs() {
        return this.remoteAs;
    }
    /**
     * @return Variable name
     * 
     */
    public String remoteAsVariable() {
        return this.remoteAsVariable;
    }
    /**
     * @return Send community attribute
     * 
     */
    public Boolean sendCommunity() {
        return this.sendCommunity;
    }
    /**
     * @return Variable name
     * 
     */
    public String sendCommunityVariable() {
        return this.sendCommunityVariable;
    }
    /**
     * @return Send extended community attribute
     * 
     */
    public Boolean sendExtCommunity() {
        return this.sendExtCommunity;
    }
    /**
     * @return Variable name
     * 
     */
    public String sendExtCommunityVariable() {
        return this.sendExtCommunityVariable;
    }
    /**
     * @return Send label
     * 
     */
    public Boolean sendLabel() {
        return this.sendLabel;
    }
    /**
     * @return Send label
     * 
     */
    public Boolean sendLabelExplicit() {
        return this.sendLabelExplicit;
    }
    /**
     * @return Variable name
     * 
     */
    public String sendLabelExplicitVariable() {
        return this.sendLabelExplicitVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String sendLabelVariable() {
        return this.sendLabelVariable;
    }
    /**
     * @return Enable or disable a BGP neighbor
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return Set IP address of interface for TCP connection to BGP neighbor
     * 
     */
    public String sourceInterface() {
        return this.sourceInterface;
    }
    /**
     * @return Variable name
     * 
     */
    public String sourceInterfaceVariable() {
        return this.sourceInterfaceVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoBgpFeatureTemplateIpv4Neighbor defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private List<GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily> addressFamilies;
        private String addressVariable;
        private Integer allowAsIn;
        private String allowAsInVariable;
        private Boolean asOverride;
        private String asOverrideVariable;
        private String description;
        private String descriptionVariable;
        private Integer ebgpMultihop;
        private String ebgpMultihopVariable;
        private Integer holdtime;
        private String holdtimeVariable;
        private Integer keepalive;
        private String keepaliveVariable;
        private Boolean nextHopSelf;
        private String nextHopSelfVariable;
        private Boolean optional;
        private String password;
        private String passwordVariable;
        private String remoteAs;
        private String remoteAsVariable;
        private Boolean sendCommunity;
        private String sendCommunityVariable;
        private Boolean sendExtCommunity;
        private String sendExtCommunityVariable;
        private Boolean sendLabel;
        private Boolean sendLabelExplicit;
        private String sendLabelExplicitVariable;
        private String sendLabelVariable;
        private Boolean shutdown;
        private String shutdownVariable;
        private String sourceInterface;
        private String sourceInterfaceVariable;
        public Builder() {}
        public Builder(GetCiscoBgpFeatureTemplateIpv4Neighbor defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.addressFamilies = defaults.addressFamilies;
    	      this.addressVariable = defaults.addressVariable;
    	      this.allowAsIn = defaults.allowAsIn;
    	      this.allowAsInVariable = defaults.allowAsInVariable;
    	      this.asOverride = defaults.asOverride;
    	      this.asOverrideVariable = defaults.asOverrideVariable;
    	      this.description = defaults.description;
    	      this.descriptionVariable = defaults.descriptionVariable;
    	      this.ebgpMultihop = defaults.ebgpMultihop;
    	      this.ebgpMultihopVariable = defaults.ebgpMultihopVariable;
    	      this.holdtime = defaults.holdtime;
    	      this.holdtimeVariable = defaults.holdtimeVariable;
    	      this.keepalive = defaults.keepalive;
    	      this.keepaliveVariable = defaults.keepaliveVariable;
    	      this.nextHopSelf = defaults.nextHopSelf;
    	      this.nextHopSelfVariable = defaults.nextHopSelfVariable;
    	      this.optional = defaults.optional;
    	      this.password = defaults.password;
    	      this.passwordVariable = defaults.passwordVariable;
    	      this.remoteAs = defaults.remoteAs;
    	      this.remoteAsVariable = defaults.remoteAsVariable;
    	      this.sendCommunity = defaults.sendCommunity;
    	      this.sendCommunityVariable = defaults.sendCommunityVariable;
    	      this.sendExtCommunity = defaults.sendExtCommunity;
    	      this.sendExtCommunityVariable = defaults.sendExtCommunityVariable;
    	      this.sendLabel = defaults.sendLabel;
    	      this.sendLabelExplicit = defaults.sendLabelExplicit;
    	      this.sendLabelExplicitVariable = defaults.sendLabelExplicitVariable;
    	      this.sendLabelVariable = defaults.sendLabelVariable;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.sourceInterface = defaults.sourceInterface;
    	      this.sourceInterfaceVariable = defaults.sourceInterfaceVariable;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder addressFamilies(List<GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily> addressFamilies) {
            if (addressFamilies == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "addressFamilies");
            }
            this.addressFamilies = addressFamilies;
            return this;
        }
        public Builder addressFamilies(GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily... addressFamilies) {
            return addressFamilies(List.of(addressFamilies));
        }
        @CustomType.Setter
        public Builder addressVariable(String addressVariable) {
            if (addressVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "addressVariable");
            }
            this.addressVariable = addressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder allowAsIn(Integer allowAsIn) {
            if (allowAsIn == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "allowAsIn");
            }
            this.allowAsIn = allowAsIn;
            return this;
        }
        @CustomType.Setter
        public Builder allowAsInVariable(String allowAsInVariable) {
            if (allowAsInVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "allowAsInVariable");
            }
            this.allowAsInVariable = allowAsInVariable;
            return this;
        }
        @CustomType.Setter
        public Builder asOverride(Boolean asOverride) {
            if (asOverride == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "asOverride");
            }
            this.asOverride = asOverride;
            return this;
        }
        @CustomType.Setter
        public Builder asOverrideVariable(String asOverrideVariable) {
            if (asOverrideVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "asOverrideVariable");
            }
            this.asOverrideVariable = asOverrideVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder descriptionVariable(String descriptionVariable) {
            if (descriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "descriptionVariable");
            }
            this.descriptionVariable = descriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ebgpMultihop(Integer ebgpMultihop) {
            if (ebgpMultihop == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "ebgpMultihop");
            }
            this.ebgpMultihop = ebgpMultihop;
            return this;
        }
        @CustomType.Setter
        public Builder ebgpMultihopVariable(String ebgpMultihopVariable) {
            if (ebgpMultihopVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "ebgpMultihopVariable");
            }
            this.ebgpMultihopVariable = ebgpMultihopVariable;
            return this;
        }
        @CustomType.Setter
        public Builder holdtime(Integer holdtime) {
            if (holdtime == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "holdtime");
            }
            this.holdtime = holdtime;
            return this;
        }
        @CustomType.Setter
        public Builder holdtimeVariable(String holdtimeVariable) {
            if (holdtimeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "holdtimeVariable");
            }
            this.holdtimeVariable = holdtimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder keepalive(Integer keepalive) {
            if (keepalive == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "keepalive");
            }
            this.keepalive = keepalive;
            return this;
        }
        @CustomType.Setter
        public Builder keepaliveVariable(String keepaliveVariable) {
            if (keepaliveVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "keepaliveVariable");
            }
            this.keepaliveVariable = keepaliveVariable;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopSelf(Boolean nextHopSelf) {
            if (nextHopSelf == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "nextHopSelf");
            }
            this.nextHopSelf = nextHopSelf;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopSelfVariable(String nextHopSelfVariable) {
            if (nextHopSelfVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "nextHopSelfVariable");
            }
            this.nextHopSelfVariable = nextHopSelfVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder passwordVariable(String passwordVariable) {
            if (passwordVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "passwordVariable");
            }
            this.passwordVariable = passwordVariable;
            return this;
        }
        @CustomType.Setter
        public Builder remoteAs(String remoteAs) {
            if (remoteAs == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "remoteAs");
            }
            this.remoteAs = remoteAs;
            return this;
        }
        @CustomType.Setter
        public Builder remoteAsVariable(String remoteAsVariable) {
            if (remoteAsVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "remoteAsVariable");
            }
            this.remoteAsVariable = remoteAsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sendCommunity(Boolean sendCommunity) {
            if (sendCommunity == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "sendCommunity");
            }
            this.sendCommunity = sendCommunity;
            return this;
        }
        @CustomType.Setter
        public Builder sendCommunityVariable(String sendCommunityVariable) {
            if (sendCommunityVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "sendCommunityVariable");
            }
            this.sendCommunityVariable = sendCommunityVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sendExtCommunity(Boolean sendExtCommunity) {
            if (sendExtCommunity == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "sendExtCommunity");
            }
            this.sendExtCommunity = sendExtCommunity;
            return this;
        }
        @CustomType.Setter
        public Builder sendExtCommunityVariable(String sendExtCommunityVariable) {
            if (sendExtCommunityVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "sendExtCommunityVariable");
            }
            this.sendExtCommunityVariable = sendExtCommunityVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sendLabel(Boolean sendLabel) {
            if (sendLabel == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "sendLabel");
            }
            this.sendLabel = sendLabel;
            return this;
        }
        @CustomType.Setter
        public Builder sendLabelExplicit(Boolean sendLabelExplicit) {
            if (sendLabelExplicit == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "sendLabelExplicit");
            }
            this.sendLabelExplicit = sendLabelExplicit;
            return this;
        }
        @CustomType.Setter
        public Builder sendLabelExplicitVariable(String sendLabelExplicitVariable) {
            if (sendLabelExplicitVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "sendLabelExplicitVariable");
            }
            this.sendLabelExplicitVariable = sendLabelExplicitVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sendLabelVariable(String sendLabelVariable) {
            if (sendLabelVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "sendLabelVariable");
            }
            this.sendLabelVariable = sendLabelVariable;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterface(String sourceInterface) {
            if (sourceInterface == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "sourceInterface");
            }
            this.sourceInterface = sourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceVariable(String sourceInterfaceVariable) {
            if (sourceInterfaceVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4Neighbor", "sourceInterfaceVariable");
            }
            this.sourceInterfaceVariable = sourceInterfaceVariable;
            return this;
        }
        public GetCiscoBgpFeatureTemplateIpv4Neighbor build() {
            final var _resultValue = new GetCiscoBgpFeatureTemplateIpv4Neighbor();
            _resultValue.address = address;
            _resultValue.addressFamilies = addressFamilies;
            _resultValue.addressVariable = addressVariable;
            _resultValue.allowAsIn = allowAsIn;
            _resultValue.allowAsInVariable = allowAsInVariable;
            _resultValue.asOverride = asOverride;
            _resultValue.asOverrideVariable = asOverrideVariable;
            _resultValue.description = description;
            _resultValue.descriptionVariable = descriptionVariable;
            _resultValue.ebgpMultihop = ebgpMultihop;
            _resultValue.ebgpMultihopVariable = ebgpMultihopVariable;
            _resultValue.holdtime = holdtime;
            _resultValue.holdtimeVariable = holdtimeVariable;
            _resultValue.keepalive = keepalive;
            _resultValue.keepaliveVariable = keepaliveVariable;
            _resultValue.nextHopSelf = nextHopSelf;
            _resultValue.nextHopSelfVariable = nextHopSelfVariable;
            _resultValue.optional = optional;
            _resultValue.password = password;
            _resultValue.passwordVariable = passwordVariable;
            _resultValue.remoteAs = remoteAs;
            _resultValue.remoteAsVariable = remoteAsVariable;
            _resultValue.sendCommunity = sendCommunity;
            _resultValue.sendCommunityVariable = sendCommunityVariable;
            _resultValue.sendExtCommunity = sendExtCommunity;
            _resultValue.sendExtCommunityVariable = sendExtCommunityVariable;
            _resultValue.sendLabel = sendLabel;
            _resultValue.sendLabelExplicit = sendLabelExplicit;
            _resultValue.sendLabelExplicitVariable = sendLabelExplicitVariable;
            _resultValue.sendLabelVariable = sendLabelVariable;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.sourceInterface = sourceInterface;
            _resultValue.sourceInterfaceVariable = sourceInterfaceVariable;
            return _resultValue;
        }
    }
}
