// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSwitchportFeatureTemplateStaticMacAddress {
    /**
     * @return Interface name: GigabitEthernet0/&lt;&gt;/&lt;&gt;
     * 
     */
    private String ifName;
    /**
     * @return Variable name
     * 
     */
    private String ifNameVariable;
    /**
     * @return Set MAC address in xxxx.xxxx.xxxx format
     * 
     */
    private String macAddress;
    /**
     * @return Variable name
     * 
     */
    private String macAddressVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Configure VLAN ID used with the mac and interface
     * 
     */
    private Integer vlan;
    /**
     * @return Variable name
     * 
     */
    private String vlanVariable;

    private GetSwitchportFeatureTemplateStaticMacAddress() {}
    /**
     * @return Interface name: GigabitEthernet0/&lt;&gt;/&lt;&gt;
     * 
     */
    public String ifName() {
        return this.ifName;
    }
    /**
     * @return Variable name
     * 
     */
    public String ifNameVariable() {
        return this.ifNameVariable;
    }
    /**
     * @return Set MAC address in xxxx.xxxx.xxxx format
     * 
     */
    public String macAddress() {
        return this.macAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String macAddressVariable() {
        return this.macAddressVariable;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Configure VLAN ID used with the mac and interface
     * 
     */
    public Integer vlan() {
        return this.vlan;
    }
    /**
     * @return Variable name
     * 
     */
    public String vlanVariable() {
        return this.vlanVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSwitchportFeatureTemplateStaticMacAddress defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ifName;
        private String ifNameVariable;
        private String macAddress;
        private String macAddressVariable;
        private Boolean optional;
        private Integer vlan;
        private String vlanVariable;
        public Builder() {}
        public Builder(GetSwitchportFeatureTemplateStaticMacAddress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ifName = defaults.ifName;
    	      this.ifNameVariable = defaults.ifNameVariable;
    	      this.macAddress = defaults.macAddress;
    	      this.macAddressVariable = defaults.macAddressVariable;
    	      this.optional = defaults.optional;
    	      this.vlan = defaults.vlan;
    	      this.vlanVariable = defaults.vlanVariable;
        }

        @CustomType.Setter
        public Builder ifName(String ifName) {
            if (ifName == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateStaticMacAddress", "ifName");
            }
            this.ifName = ifName;
            return this;
        }
        @CustomType.Setter
        public Builder ifNameVariable(String ifNameVariable) {
            if (ifNameVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateStaticMacAddress", "ifNameVariable");
            }
            this.ifNameVariable = ifNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder macAddress(String macAddress) {
            if (macAddress == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateStaticMacAddress", "macAddress");
            }
            this.macAddress = macAddress;
            return this;
        }
        @CustomType.Setter
        public Builder macAddressVariable(String macAddressVariable) {
            if (macAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateStaticMacAddress", "macAddressVariable");
            }
            this.macAddressVariable = macAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateStaticMacAddress", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder vlan(Integer vlan) {
            if (vlan == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateStaticMacAddress", "vlan");
            }
            this.vlan = vlan;
            return this;
        }
        @CustomType.Setter
        public Builder vlanVariable(String vlanVariable) {
            if (vlanVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateStaticMacAddress", "vlanVariable");
            }
            this.vlanVariable = vlanVariable;
            return this;
        }
        public GetSwitchportFeatureTemplateStaticMacAddress build() {
            final var _resultValue = new GetSwitchportFeatureTemplateStaticMacAddress();
            _resultValue.ifName = ifName;
            _resultValue.ifNameVariable = ifNameVariable;
            _resultValue.macAddress = macAddress;
            _resultValue.macAddressVariable = macAddressVariable;
            _resultValue.optional = optional;
            _resultValue.vlan = vlan;
            _resultValue.vlanVariable = vlanVariable;
            return _resultValue;
        }
    }
}
